(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/admin"],{

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/moment/locale sync recursive ^\\.\\/.*$\n");

/***/ }),

/***/ "./resources/js/admin.js":
/*!*******************************!*\
  !*** ./resources/js/admin.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {global.$ = global.jQuery = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n\n__webpack_require__(/*! bootstrap */ \"./node_modules/bootstrap/dist/js/bootstrap.js\");\n\n__webpack_require__(/*! ../template/admin/assets/plugins/select2/dist/js/select2.full.min.js */ \"./resources/template/admin/assets/plugins/select2/dist/js/select2.full.min.js\");\n\n__webpack_require__(/*! ../template/admin/assets/js/adminlte.js */ \"./resources/template/admin/assets/js/adminlte.js\"); // require('../template/admin/assets/plugins/moment/moment.js');\n\n\n__webpack_require__(/*! ../template/admin/assets/plugins/daterangepicker/daterangepicker.js */ \"./resources/template/admin/assets/plugins/daterangepicker/daterangepicker.js\");\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYWRtaW4uanM/MDcyMiJdLCJuYW1lcyI6WyJnbG9iYWwiLCIkIiwialF1ZXJ5IiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUFBLG9EQUFNLENBQUNDLENBQVAsR0FBV0QsTUFBTSxDQUFDRSxNQUFQLEdBQWdCQyxtQkFBTyxDQUFDLG9EQUFELENBQWxDOztBQUNBQSxtQkFBTyxDQUFDLGdFQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsMkpBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQyxpR0FBRCxDQUFQLEMsQ0FDQTs7O0FBQ0FBLG1CQUFPLENBQUMseUpBQUQsQ0FBUCxDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2FkbWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZ2xvYmFsLiQgPSBnbG9iYWwualF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XHJcbnJlcXVpcmUoJ2Jvb3RzdHJhcCcpO1xyXG5yZXF1aXJlKCcuLi90ZW1wbGF0ZS9hZG1pbi9hc3NldHMvcGx1Z2lucy9zZWxlY3QyL2Rpc3QvanMvc2VsZWN0Mi5mdWxsLm1pbi5qcycpO1xyXG5yZXF1aXJlKCcuLi90ZW1wbGF0ZS9hZG1pbi9hc3NldHMvanMvYWRtaW5sdGUuanMnKTtcclxuLy8gcmVxdWlyZSgnLi4vdGVtcGxhdGUvYWRtaW4vYXNzZXRzL3BsdWdpbnMvbW9tZW50L21vbWVudC5qcycpO1xyXG5yZXF1aXJlKCcuLi90ZW1wbGF0ZS9hZG1pbi9hc3NldHMvcGx1Z2lucy9kYXRlcmFuZ2VwaWNrZXIvZGF0ZXJhbmdlcGlja2VyLmpzJyk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/admin.js\n");

/***/ }),

/***/ "./resources/template/admin/assets/js/adminlte.js":
/*!********************************************************!*\
  !*** ./resources/template/admin/assets/js/adminlte.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\r\n * AdminLTE v3.0.5 (https://adminlte.io)\r\n * Copyright 2014-2020 Colorlib <http://colorlib.com>\r\n * Licensed under MIT (https://github.com/ColorlibHQ/AdminLTE/blob/master/LICENSE)\r\n */\n(function (global, factory) {\n  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (undefined);\n})(this, function (exports) {\n  'use strict';\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE ControlSidebar.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n  var ControlSidebar = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'ControlSidebar';\n    var DATA_KEY = 'lte.controlsidebar';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      COLLAPSED: \"collapsed\" + EVENT_KEY,\n      EXPANDED: \"expanded\" + EVENT_KEY\n    };\n    var Selector = {\n      CONTROL_SIDEBAR: '.control-sidebar',\n      CONTROL_SIDEBAR_CONTENT: '.control-sidebar-content',\n      DATA_TOGGLE: '[data-widget=\"control-sidebar\"]',\n      CONTENT: '.content-wrapper',\n      HEADER: '.main-header',\n      FOOTER: '.main-footer'\n    };\n    var ClassName = {\n      CONTROL_SIDEBAR_ANIMATE: 'control-sidebar-animate',\n      CONTROL_SIDEBAR_OPEN: 'control-sidebar-open',\n      CONTROL_SIDEBAR_SLIDE: 'control-sidebar-slide-open',\n      LAYOUT_FIXED: 'layout-fixed',\n      NAVBAR_FIXED: 'layout-navbar-fixed',\n      NAVBAR_SM_FIXED: 'layout-sm-navbar-fixed',\n      NAVBAR_MD_FIXED: 'layout-md-navbar-fixed',\n      NAVBAR_LG_FIXED: 'layout-lg-navbar-fixed',\n      NAVBAR_XL_FIXED: 'layout-xl-navbar-fixed',\n      FOOTER_FIXED: 'layout-footer-fixed',\n      FOOTER_SM_FIXED: 'layout-sm-footer-fixed',\n      FOOTER_MD_FIXED: 'layout-md-footer-fixed',\n      FOOTER_LG_FIXED: 'layout-lg-footer-fixed',\n      FOOTER_XL_FIXED: 'layout-xl-footer-fixed'\n    };\n    var Default = {\n      controlsidebarSlide: true,\n      scrollbarTheme: 'os-theme-light',\n      scrollbarAutoHide: 'l'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var ControlSidebar = /*#__PURE__*/function () {\n      function ControlSidebar(element, config) {\n        this._element = element;\n        this._config = config;\n\n        this._init();\n      } // Public\n\n\n      var _proto = ControlSidebar.prototype;\n\n      _proto.collapse = function collapse() {\n        // Show the control sidebar\n        if (this._config.controlsidebarSlide) {\n          $('html').addClass(ClassName.CONTROL_SIDEBAR_ANIMATE);\n          $('body').removeClass(ClassName.CONTROL_SIDEBAR_SLIDE).delay(300).queue(function () {\n            $(Selector.CONTROL_SIDEBAR).hide();\n            $('html').removeClass(ClassName.CONTROL_SIDEBAR_ANIMATE);\n            $(this).dequeue();\n          });\n        } else {\n          $('body').removeClass(ClassName.CONTROL_SIDEBAR_OPEN);\n        }\n\n        var collapsedEvent = $.Event(Event.COLLAPSED);\n        $(this._element).trigger(collapsedEvent);\n      };\n\n      _proto.show = function show() {\n        // Collapse the control sidebar\n        if (this._config.controlsidebarSlide) {\n          $('html').addClass(ClassName.CONTROL_SIDEBAR_ANIMATE);\n          $(Selector.CONTROL_SIDEBAR).show().delay(10).queue(function () {\n            $('body').addClass(ClassName.CONTROL_SIDEBAR_SLIDE).delay(300).queue(function () {\n              $('html').removeClass(ClassName.CONTROL_SIDEBAR_ANIMATE);\n              $(this).dequeue();\n            });\n            $(this).dequeue();\n          });\n        } else {\n          $('body').addClass(ClassName.CONTROL_SIDEBAR_OPEN);\n        }\n\n        var expandedEvent = $.Event(Event.EXPANDED);\n        $(this._element).trigger(expandedEvent);\n      };\n\n      _proto.toggle = function toggle() {\n        var shouldClose = $('body').hasClass(ClassName.CONTROL_SIDEBAR_OPEN) || $('body').hasClass(ClassName.CONTROL_SIDEBAR_SLIDE);\n\n        if (shouldClose) {\n          // Close the control sidebar\n          this.collapse();\n        } else {\n          // Open the control sidebar\n          this.show();\n        }\n      } // Private\n      ;\n\n      _proto._init = function _init() {\n        var _this = this;\n\n        this._fixHeight();\n\n        this._fixScrollHeight();\n\n        $(window).resize(function () {\n          _this._fixHeight();\n\n          _this._fixScrollHeight();\n        });\n        $(window).scroll(function () {\n          if ($('body').hasClass(ClassName.CONTROL_SIDEBAR_OPEN) || $('body').hasClass(ClassName.CONTROL_SIDEBAR_SLIDE)) {\n            _this._fixScrollHeight();\n          }\n        });\n      };\n\n      _proto._fixScrollHeight = function _fixScrollHeight() {\n        var heights = {\n          scroll: $(document).height(),\n          window: $(window).height(),\n          header: $(Selector.HEADER).outerHeight(),\n          footer: $(Selector.FOOTER).outerHeight()\n        };\n        var positions = {\n          bottom: Math.abs(heights.window + $(window).scrollTop() - heights.scroll),\n          top: $(window).scrollTop()\n        };\n        var navbarFixed = false;\n        var footerFixed = false;\n\n        if ($('body').hasClass(ClassName.LAYOUT_FIXED)) {\n          if ($('body').hasClass(ClassName.NAVBAR_FIXED) || $('body').hasClass(ClassName.NAVBAR_SM_FIXED) || $('body').hasClass(ClassName.NAVBAR_MD_FIXED) || $('body').hasClass(ClassName.NAVBAR_LG_FIXED) || $('body').hasClass(ClassName.NAVBAR_XL_FIXED)) {\n            if ($(Selector.HEADER).css(\"position\") === \"fixed\") {\n              navbarFixed = true;\n            }\n          }\n\n          if ($('body').hasClass(ClassName.FOOTER_FIXED) || $('body').hasClass(ClassName.FOOTER_SM_FIXED) || $('body').hasClass(ClassName.FOOTER_MD_FIXED) || $('body').hasClass(ClassName.FOOTER_LG_FIXED) || $('body').hasClass(ClassName.FOOTER_XL_FIXED)) {\n            if ($(Selector.FOOTER).css(\"position\") === \"fixed\") {\n              footerFixed = true;\n            }\n          }\n\n          if (positions.top === 0 && positions.bottom === 0) {\n            $(Selector.CONTROL_SIDEBAR).css('bottom', heights.footer);\n            $(Selector.CONTROL_SIDEBAR).css('top', heights.header);\n            $(Selector.CONTROL_SIDEBAR + ', ' + Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', heights.window - (heights.header + heights.footer));\n          } else if (positions.bottom <= heights.footer) {\n            if (footerFixed === false) {\n              $(Selector.CONTROL_SIDEBAR).css('bottom', heights.footer - positions.bottom);\n              $(Selector.CONTROL_SIDEBAR + ', ' + Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', heights.window - (heights.footer - positions.bottom));\n            } else {\n              $(Selector.CONTROL_SIDEBAR).css('bottom', heights.footer);\n            }\n          } else if (positions.top <= heights.header) {\n            if (navbarFixed === false) {\n              $(Selector.CONTROL_SIDEBAR).css('top', heights.header - positions.top);\n              $(Selector.CONTROL_SIDEBAR + ', ' + Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', heights.window - (heights.header - positions.top));\n            } else {\n              $(Selector.CONTROL_SIDEBAR).css('top', heights.header);\n            }\n          } else {\n            if (navbarFixed === false) {\n              $(Selector.CONTROL_SIDEBAR).css('top', 0);\n              $(Selector.CONTROL_SIDEBAR + ', ' + Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', heights.window);\n            } else {\n              $(Selector.CONTROL_SIDEBAR).css('top', heights.header);\n            }\n          }\n        }\n      };\n\n      _proto._fixHeight = function _fixHeight() {\n        var heights = {\n          window: $(window).height(),\n          header: $(Selector.HEADER).outerHeight(),\n          footer: $(Selector.FOOTER).outerHeight()\n        };\n\n        if ($('body').hasClass(ClassName.LAYOUT_FIXED)) {\n          var sidebarHeight = heights.window - heights.header;\n\n          if ($('body').hasClass(ClassName.FOOTER_FIXED) || $('body').hasClass(ClassName.FOOTER_SM_FIXED) || $('body').hasClass(ClassName.FOOTER_MD_FIXED) || $('body').hasClass(ClassName.FOOTER_LG_FIXED) || $('body').hasClass(ClassName.FOOTER_XL_FIXED)) {\n            if ($(Selector.FOOTER).css(\"position\") === \"fixed\") {\n              sidebarHeight = heights.window - heights.header - heights.footer;\n            }\n          }\n\n          $(Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', sidebarHeight);\n\n          if (typeof $.fn.overlayScrollbars !== 'undefined') {\n            $(Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).overlayScrollbars({\n              className: this._config.scrollbarTheme,\n              sizeAutoCapable: true,\n              scrollbars: {\n                autoHide: this._config.scrollbarAutoHide,\n                clickScrolling: true\n              }\n            });\n          }\n        }\n      } // Static\n      ;\n\n      ControlSidebar._jQueryInterface = function _jQueryInterface(operation) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new ControlSidebar(this, _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (data[operation] === 'undefined') {\n            throw new Error(operation + \" is not a function\");\n          }\n\n          data[operation]();\n        });\n      };\n\n      return ControlSidebar;\n    }();\n    /**\r\n     *\r\n     * Data Api implementation\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.DATA_TOGGLE, function (event) {\n      event.preventDefault();\n\n      ControlSidebar._jQueryInterface.call($(this), 'toggle');\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = ControlSidebar._jQueryInterface;\n    $.fn[NAME].Constructor = ControlSidebar;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return ControlSidebar._jQueryInterface;\n    };\n\n    return ControlSidebar;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE Layout.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var Layout = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'Layout';\n    var DATA_KEY = 'lte.layout';\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Selector = {\n      HEADER: '.main-header',\n      MAIN_SIDEBAR: '.main-sidebar',\n      SIDEBAR: '.main-sidebar .sidebar',\n      CONTENT: '.content-wrapper',\n      BRAND: '.brand-link',\n      CONTENT_HEADER: '.content-header',\n      WRAPPER: '.wrapper',\n      CONTROL_SIDEBAR: '.control-sidebar',\n      CONTROL_SIDEBAR_CONTENT: '.control-sidebar-content',\n      CONTROL_SIDEBAR_BTN: '[data-widget=\"control-sidebar\"]',\n      LAYOUT_FIXED: '.layout-fixed',\n      FOOTER: '.main-footer',\n      PUSHMENU_BTN: '[data-widget=\"pushmenu\"]',\n      LOGIN_BOX: '.login-box',\n      REGISTER_BOX: '.register-box'\n    };\n    var ClassName = {\n      HOLD: 'hold-transition',\n      SIDEBAR: 'main-sidebar',\n      CONTENT_FIXED: 'content-fixed',\n      SIDEBAR_FOCUSED: 'sidebar-focused',\n      LAYOUT_FIXED: 'layout-fixed',\n      NAVBAR_FIXED: 'layout-navbar-fixed',\n      FOOTER_FIXED: 'layout-footer-fixed',\n      LOGIN_PAGE: 'login-page',\n      REGISTER_PAGE: 'register-page',\n      CONTROL_SIDEBAR_SLIDE_OPEN: 'control-sidebar-slide-open',\n      CONTROL_SIDEBAR_OPEN: 'control-sidebar-open'\n    };\n    var Default = {\n      scrollbarTheme: 'os-theme-light',\n      scrollbarAutoHide: 'l',\n      panelAutoHeight: true,\n      loginRegisterAutoHeight: true\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var Layout = /*#__PURE__*/function () {\n      function Layout(element, config) {\n        this._config = config;\n        this._element = element;\n\n        this._init();\n      } // Public\n\n\n      var _proto = Layout.prototype;\n\n      _proto.fixLayoutHeight = function fixLayoutHeight(extra) {\n        if (extra === void 0) {\n          extra = null;\n        }\n\n        var control_sidebar = 0;\n\n        if ($('body').hasClass(ClassName.CONTROL_SIDEBAR_SLIDE_OPEN) || $('body').hasClass(ClassName.CONTROL_SIDEBAR_OPEN) || extra == 'control_sidebar') {\n          control_sidebar = $(Selector.CONTROL_SIDEBAR_CONTENT).height();\n        }\n\n        var heights = {\n          window: $(window).height(),\n          header: $(Selector.HEADER).length !== 0 ? $(Selector.HEADER).outerHeight() : 0,\n          footer: $(Selector.FOOTER).length !== 0 ? $(Selector.FOOTER).outerHeight() : 0,\n          sidebar: $(Selector.SIDEBAR).length !== 0 ? $(Selector.SIDEBAR).height() : 0,\n          control_sidebar: control_sidebar\n        };\n\n        var max = this._max(heights);\n\n        var offset = this._config.panelAutoHeight;\n\n        if (offset === true) {\n          offset = 0;\n        }\n\n        if (offset !== false) {\n          if (max == heights.control_sidebar) {\n            $(Selector.CONTENT).css('min-height', max + offset);\n          } else if (max == heights.window) {\n            $(Selector.CONTENT).css('min-height', max + offset - heights.header - heights.footer);\n          } else {\n            $(Selector.CONTENT).css('min-height', max + offset - heights.header);\n          }\n\n          if (this._isFooterFixed()) {\n            $(Selector.CONTENT).css('min-height', parseFloat($(Selector.CONTENT).css('min-height')) + heights.footer);\n          }\n        }\n\n        if ($('body').hasClass(ClassName.LAYOUT_FIXED)) {\n          if (offset !== false) {\n            $(Selector.CONTENT).css('min-height', max + offset - heights.header - heights.footer);\n          }\n\n          if (typeof $.fn.overlayScrollbars !== 'undefined') {\n            $(Selector.SIDEBAR).overlayScrollbars({\n              className: this._config.scrollbarTheme,\n              sizeAutoCapable: true,\n              scrollbars: {\n                autoHide: this._config.scrollbarAutoHide,\n                clickScrolling: true\n              }\n            });\n          }\n        }\n      };\n\n      _proto.fixLoginRegisterHeight = function fixLoginRegisterHeight() {\n        if ($(Selector.LOGIN_BOX + ', ' + Selector.REGISTER_BOX).length === 0) {\n          $('body, html').css('height', 'auto');\n        } else if ($(Selector.LOGIN_BOX + ', ' + Selector.REGISTER_BOX).length !== 0) {\n          var box_height = $(Selector.LOGIN_BOX + ', ' + Selector.REGISTER_BOX).height();\n\n          if ($('body').css('min-height') !== box_height) {\n            $('body').css('min-height', box_height);\n          }\n        }\n      } // Private\n      ;\n\n      _proto._init = function _init() {\n        var _this = this; // Activate layout height watcher\n\n\n        this.fixLayoutHeight();\n\n        if (this._config.loginRegisterAutoHeight === true) {\n          this.fixLoginRegisterHeight();\n        } else if (Number.isInteger(this._config.loginRegisterAutoHeight)) {\n          setInterval(this.fixLoginRegisterHeight, this._config.loginRegisterAutoHeight);\n        }\n\n        $(Selector.SIDEBAR).on('collapsed.lte.treeview expanded.lte.treeview', function () {\n          _this.fixLayoutHeight();\n        });\n        $(Selector.PUSHMENU_BTN).on('collapsed.lte.pushmenu shown.lte.pushmenu', function () {\n          _this.fixLayoutHeight();\n        });\n        $(Selector.CONTROL_SIDEBAR_BTN).on('collapsed.lte.controlsidebar', function () {\n          _this.fixLayoutHeight();\n        }).on('expanded.lte.controlsidebar', function () {\n          _this.fixLayoutHeight('control_sidebar');\n        });\n        $(window).resize(function () {\n          _this.fixLayoutHeight();\n        });\n        setTimeout(function () {\n          $('body.hold-transition').removeClass('hold-transition');\n        }, 50);\n      };\n\n      _proto._max = function _max(numbers) {\n        // Calculate the maximum number in a list\n        var max = 0;\n        Object.keys(numbers).forEach(function (key) {\n          if (numbers[key] > max) {\n            max = numbers[key];\n          }\n        });\n        return max;\n      };\n\n      _proto._isFooterFixed = function _isFooterFixed() {\n        return $('.main-footer').css('position') === 'fixed';\n      } // Static\n      ;\n\n      Layout._jQueryInterface = function _jQueryInterface(config) {\n        if (config === void 0) {\n          config = '';\n        }\n\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new Layout($(this), _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'init' || config === '') {\n            data['_init']();\n          } else if (config === 'fixLayoutHeight' || config === 'fixLoginRegisterHeight') {\n            data[config]();\n          }\n        });\n      };\n\n      return Layout;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(window).on('load', function () {\n      Layout._jQueryInterface.call($('body'));\n    });\n    $(Selector.SIDEBAR + ' a').on('focusin', function () {\n      $(Selector.MAIN_SIDEBAR).addClass(ClassName.SIDEBAR_FOCUSED);\n    });\n    $(Selector.SIDEBAR + ' a').on('focusout', function () {\n      $(Selector.MAIN_SIDEBAR).removeClass(ClassName.SIDEBAR_FOCUSED);\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = Layout._jQueryInterface;\n    $.fn[NAME].Constructor = Layout;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Layout._jQueryInterface;\n    };\n\n    return Layout;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE PushMenu.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var PushMenu = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'PushMenu';\n    var DATA_KEY = 'lte.pushmenu';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      COLLAPSED: \"collapsed\" + EVENT_KEY,\n      SHOWN: \"shown\" + EVENT_KEY\n    };\n    var Default = {\n      autoCollapseSize: 992,\n      enableRemember: false,\n      noTransitionAfterReload: true\n    };\n    var Selector = {\n      TOGGLE_BUTTON: '[data-widget=\"pushmenu\"]',\n      SIDEBAR_MINI: '.sidebar-mini',\n      SIDEBAR_COLLAPSED: '.sidebar-collapse',\n      BODY: 'body',\n      OVERLAY: '#sidebar-overlay',\n      WRAPPER: '.wrapper'\n    };\n    var ClassName = {\n      COLLAPSED: 'sidebar-collapse',\n      OPEN: 'sidebar-open',\n      CLOSED: 'sidebar-closed'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var PushMenu = /*#__PURE__*/function () {\n      function PushMenu(element, options) {\n        this._element = element;\n        this._options = $.extend({}, Default, options);\n\n        if (!$(Selector.OVERLAY).length) {\n          this._addOverlay();\n        }\n\n        this._init();\n      } // Public\n\n\n      var _proto = PushMenu.prototype;\n\n      _proto.expand = function expand() {\n        if (this._options.autoCollapseSize) {\n          if ($(window).width() <= this._options.autoCollapseSize) {\n            $(Selector.BODY).addClass(ClassName.OPEN);\n          }\n        }\n\n        $(Selector.BODY).removeClass(ClassName.COLLAPSED).removeClass(ClassName.CLOSED);\n\n        if (this._options.enableRemember) {\n          localStorage.setItem(\"remember\" + EVENT_KEY, ClassName.OPEN);\n        }\n\n        var shownEvent = $.Event(Event.SHOWN);\n        $(this._element).trigger(shownEvent);\n      };\n\n      _proto.collapse = function collapse() {\n        if (this._options.autoCollapseSize) {\n          if ($(window).width() <= this._options.autoCollapseSize) {\n            $(Selector.BODY).removeClass(ClassName.OPEN).addClass(ClassName.CLOSED);\n          }\n        }\n\n        $(Selector.BODY).addClass(ClassName.COLLAPSED);\n\n        if (this._options.enableRemember) {\n          localStorage.setItem(\"remember\" + EVENT_KEY, ClassName.COLLAPSED);\n        }\n\n        var collapsedEvent = $.Event(Event.COLLAPSED);\n        $(this._element).trigger(collapsedEvent);\n      };\n\n      _proto.toggle = function toggle() {\n        if (!$(Selector.BODY).hasClass(ClassName.COLLAPSED)) {\n          this.collapse();\n        } else {\n          this.expand();\n        }\n      };\n\n      _proto.autoCollapse = function autoCollapse(resize) {\n        if (resize === void 0) {\n          resize = false;\n        }\n\n        if (this._options.autoCollapseSize) {\n          if ($(window).width() <= this._options.autoCollapseSize) {\n            if (!$(Selector.BODY).hasClass(ClassName.OPEN)) {\n              this.collapse();\n            }\n          } else if (resize == true) {\n            if ($(Selector.BODY).hasClass(ClassName.OPEN)) {\n              $(Selector.BODY).removeClass(ClassName.OPEN);\n            } else if ($(Selector.BODY).hasClass(ClassName.CLOSED)) {\n              this.expand();\n            }\n          }\n        }\n      };\n\n      _proto.remember = function remember() {\n        if (this._options.enableRemember) {\n          var toggleState = localStorage.getItem(\"remember\" + EVENT_KEY);\n\n          if (toggleState == ClassName.COLLAPSED) {\n            if (this._options.noTransitionAfterReload) {\n              $(\"body\").addClass('hold-transition').addClass(ClassName.COLLAPSED).delay(50).queue(function () {\n                $(this).removeClass('hold-transition');\n                $(this).dequeue();\n              });\n            } else {\n              $(\"body\").addClass(ClassName.COLLAPSED);\n            }\n          } else {\n            if (this._options.noTransitionAfterReload) {\n              $(\"body\").addClass('hold-transition').removeClass(ClassName.COLLAPSED).delay(50).queue(function () {\n                $(this).removeClass('hold-transition');\n                $(this).dequeue();\n              });\n            } else {\n              $(\"body\").removeClass(ClassName.COLLAPSED);\n            }\n          }\n        }\n      } // Private\n      ;\n\n      _proto._init = function _init() {\n        var _this = this;\n\n        this.remember();\n        this.autoCollapse();\n        $(window).resize(function () {\n          _this.autoCollapse(true);\n        });\n      };\n\n      _proto._addOverlay = function _addOverlay() {\n        var _this2 = this;\n\n        var overlay = $('<div />', {\n          id: 'sidebar-overlay'\n        });\n        overlay.on('click', function () {\n          _this2.collapse();\n        });\n        $(Selector.WRAPPER).append(overlay);\n      } // Static\n      ;\n\n      PushMenu._jQueryInterface = function _jQueryInterface(operation) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new PushMenu(this, _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (typeof operation === 'string' && operation.match(/collapse|expand|toggle/)) {\n            data[operation]();\n          }\n        });\n      };\n\n      return PushMenu;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.TOGGLE_BUTTON, function (event) {\n      event.preventDefault();\n      var button = event.currentTarget;\n\n      if ($(button).data('widget') !== 'pushmenu') {\n        button = $(button).closest(Selector.TOGGLE_BUTTON);\n      }\n\n      PushMenu._jQueryInterface.call($(button), 'toggle');\n    });\n    $(window).on('load', function () {\n      PushMenu._jQueryInterface.call($(Selector.TOGGLE_BUTTON));\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = PushMenu._jQueryInterface;\n    $.fn[NAME].Constructor = PushMenu;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return PushMenu._jQueryInterface;\n    };\n\n    return PushMenu;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE Treeview.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var Treeview = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'Treeview';\n    var DATA_KEY = 'lte.treeview';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      SELECTED: \"selected\" + EVENT_KEY,\n      EXPANDED: \"expanded\" + EVENT_KEY,\n      COLLAPSED: \"collapsed\" + EVENT_KEY,\n      LOAD_DATA_API: \"load\" + EVENT_KEY\n    };\n    var Selector = {\n      LI: '.nav-item',\n      LINK: '.nav-link',\n      TREEVIEW_MENU: '.nav-treeview',\n      OPEN: '.menu-open',\n      DATA_WIDGET: '[data-widget=\"treeview\"]'\n    };\n    var ClassName = {\n      LI: 'nav-item',\n      LINK: 'nav-link',\n      TREEVIEW_MENU: 'nav-treeview',\n      OPEN: 'menu-open',\n      SIDEBAR_COLLAPSED: 'sidebar-collapse'\n    };\n    var Default = {\n      trigger: Selector.DATA_WIDGET + \" \" + Selector.LINK,\n      animationSpeed: 300,\n      accordion: true,\n      expandSidebar: false,\n      sidebarButtonSelector: '[data-widget=\"pushmenu\"]'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var Treeview = /*#__PURE__*/function () {\n      function Treeview(element, config) {\n        this._config = config;\n        this._element = element;\n      } // Public\n\n\n      var _proto = Treeview.prototype;\n\n      _proto.init = function init() {\n        this._setupListeners();\n      };\n\n      _proto.expand = function expand(treeviewMenu, parentLi) {\n        var _this = this;\n\n        var expandedEvent = $.Event(Event.EXPANDED);\n\n        if (this._config.accordion) {\n          var openMenuLi = parentLi.siblings(Selector.OPEN).first();\n          var openTreeview = openMenuLi.find(Selector.TREEVIEW_MENU).first();\n          this.collapse(openTreeview, openMenuLi);\n        }\n\n        treeviewMenu.stop().slideDown(this._config.animationSpeed, function () {\n          parentLi.addClass(ClassName.OPEN);\n          $(_this._element).trigger(expandedEvent);\n        });\n\n        if (this._config.expandSidebar) {\n          this._expandSidebar();\n        }\n      };\n\n      _proto.collapse = function collapse(treeviewMenu, parentLi) {\n        var _this2 = this;\n\n        var collapsedEvent = $.Event(Event.COLLAPSED);\n        treeviewMenu.stop().slideUp(this._config.animationSpeed, function () {\n          parentLi.removeClass(ClassName.OPEN);\n          $(_this2._element).trigger(collapsedEvent);\n          treeviewMenu.find(Selector.OPEN + \" > \" + Selector.TREEVIEW_MENU).slideUp();\n          treeviewMenu.find(Selector.OPEN).removeClass(ClassName.OPEN);\n        });\n      };\n\n      _proto.toggle = function toggle(event) {\n        var $relativeTarget = $(event.currentTarget);\n        var $parent = $relativeTarget.parent();\n        var treeviewMenu = $parent.find('> ' + Selector.TREEVIEW_MENU);\n\n        if (!treeviewMenu.is(Selector.TREEVIEW_MENU)) {\n          if (!$parent.is(Selector.LI)) {\n            treeviewMenu = $parent.parent().find('> ' + Selector.TREEVIEW_MENU);\n          }\n\n          if (!treeviewMenu.is(Selector.TREEVIEW_MENU)) {\n            return;\n          }\n        }\n\n        event.preventDefault();\n        var parentLi = $relativeTarget.parents(Selector.LI).first();\n        var isOpen = parentLi.hasClass(ClassName.OPEN);\n\n        if (isOpen) {\n          this.collapse($(treeviewMenu), parentLi);\n        } else {\n          this.expand($(treeviewMenu), parentLi);\n        }\n      } // Private\n      ;\n\n      _proto._setupListeners = function _setupListeners() {\n        var _this3 = this;\n\n        $(document).on('click', this._config.trigger, function (event) {\n          _this3.toggle(event);\n        });\n      };\n\n      _proto._expandSidebar = function _expandSidebar() {\n        if ($('body').hasClass(ClassName.SIDEBAR_COLLAPSED)) {\n          $(this._config.sidebarButtonSelector).PushMenu('expand');\n        }\n      } // Static\n      ;\n\n      Treeview._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new Treeview($(this), _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'init') {\n            data[config]();\n          }\n        });\n      };\n\n      return Treeview;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(window).on(Event.LOAD_DATA_API, function () {\n      $(Selector.DATA_WIDGET).each(function () {\n        Treeview._jQueryInterface.call($(this), 'init');\n      });\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = Treeview._jQueryInterface;\n    $.fn[NAME].Constructor = Treeview;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Treeview._jQueryInterface;\n    };\n\n    return Treeview;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE DirectChat.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var DirectChat = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'DirectChat';\n    var DATA_KEY = 'lte.directchat';\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      TOGGLED: \"toggled{EVENT_KEY}\"\n    };\n    var Selector = {\n      DATA_TOGGLE: '[data-widget=\"chat-pane-toggle\"]',\n      DIRECT_CHAT: '.direct-chat'\n    };\n    var ClassName = {\n      DIRECT_CHAT_OPEN: 'direct-chat-contacts-open'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var DirectChat = /*#__PURE__*/function () {\n      function DirectChat(element, config) {\n        this._element = element;\n      }\n\n      var _proto = DirectChat.prototype;\n\n      _proto.toggle = function toggle() {\n        $(this._element).parents(Selector.DIRECT_CHAT).first().toggleClass(ClassName.DIRECT_CHAT_OPEN);\n        var toggledEvent = $.Event(Event.TOGGLED);\n        $(this._element).trigger(toggledEvent);\n      } // Static\n      ;\n\n      DirectChat._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          if (!data) {\n            data = new DirectChat($(this));\n            $(this).data(DATA_KEY, data);\n          }\n\n          data[config]();\n        });\n      };\n\n      return DirectChat;\n    }();\n    /**\r\n     *\r\n     * Data Api implementation\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.DATA_TOGGLE, function (event) {\n      if (event) event.preventDefault();\n\n      DirectChat._jQueryInterface.call($(this), 'toggle');\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = DirectChat._jQueryInterface;\n    $.fn[NAME].Constructor = DirectChat;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return DirectChat._jQueryInterface;\n    };\n\n    return DirectChat;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE TodoList.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var TodoList = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'TodoList';\n    var DATA_KEY = 'lte.todolist';\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Selector = {\n      DATA_TOGGLE: '[data-widget=\"todo-list\"]'\n    };\n    var ClassName = {\n      TODO_LIST_DONE: 'done'\n    };\n    var Default = {\n      onCheck: function onCheck(item) {\n        return item;\n      },\n      onUnCheck: function onUnCheck(item) {\n        return item;\n      }\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var TodoList = /*#__PURE__*/function () {\n      function TodoList(element, config) {\n        this._config = config;\n        this._element = element;\n\n        this._init();\n      } // Public\n\n\n      var _proto = TodoList.prototype;\n\n      _proto.toggle = function toggle(item) {\n        item.parents('li').toggleClass(ClassName.TODO_LIST_DONE);\n\n        if (!$(item).prop('checked')) {\n          this.unCheck($(item));\n          return;\n        }\n\n        this.check(item);\n      };\n\n      _proto.check = function check(item) {\n        this._config.onCheck.call(item);\n      };\n\n      _proto.unCheck = function unCheck(item) {\n        this._config.onUnCheck.call(item);\n      } // Private\n      ;\n\n      _proto._init = function _init() {\n        var that = this;\n        $(Selector.DATA_TOGGLE).find('input:checkbox:checked').parents('li').toggleClass(ClassName.TODO_LIST_DONE);\n        $(Selector.DATA_TOGGLE).on('change', 'input:checkbox', function (event) {\n          that.toggle($(event.target));\n        });\n      } // Static\n      ;\n\n      TodoList._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new TodoList($(this), _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'init') {\n            data[config]();\n          }\n        });\n      };\n\n      return TodoList;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(window).on('load', function () {\n      TodoList._jQueryInterface.call($(Selector.DATA_TOGGLE));\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = TodoList._jQueryInterface;\n    $.fn[NAME].Constructor = TodoList;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return TodoList._jQueryInterface;\n    };\n\n    return TodoList;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE CardWidget.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var CardWidget = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'CardWidget';\n    var DATA_KEY = 'lte.cardwidget';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      EXPANDED: \"expanded\" + EVENT_KEY,\n      COLLAPSED: \"collapsed\" + EVENT_KEY,\n      MAXIMIZED: \"maximized\" + EVENT_KEY,\n      MINIMIZED: \"minimized\" + EVENT_KEY,\n      REMOVED: \"removed\" + EVENT_KEY\n    };\n    var ClassName = {\n      CARD: 'card',\n      COLLAPSED: 'collapsed-card',\n      COLLAPSING: 'collapsing-card',\n      EXPANDING: 'expanding-card',\n      WAS_COLLAPSED: 'was-collapsed',\n      MAXIMIZED: 'maximized-card'\n    };\n    var Selector = {\n      DATA_REMOVE: '[data-card-widget=\"remove\"]',\n      DATA_COLLAPSE: '[data-card-widget=\"collapse\"]',\n      DATA_MAXIMIZE: '[data-card-widget=\"maximize\"]',\n      CARD: \".\" + ClassName.CARD,\n      CARD_HEADER: '.card-header',\n      CARD_BODY: '.card-body',\n      CARD_FOOTER: '.card-footer',\n      COLLAPSED: \".\" + ClassName.COLLAPSED\n    };\n    var Default = {\n      animationSpeed: 'normal',\n      collapseTrigger: Selector.DATA_COLLAPSE,\n      removeTrigger: Selector.DATA_REMOVE,\n      maximizeTrigger: Selector.DATA_MAXIMIZE,\n      collapseIcon: 'fa-minus',\n      expandIcon: 'fa-plus',\n      maximizeIcon: 'fa-expand',\n      minimizeIcon: 'fa-compress'\n    };\n\n    var CardWidget = /*#__PURE__*/function () {\n      function CardWidget(element, settings) {\n        this._element = element;\n        this._parent = element.parents(Selector.CARD).first();\n\n        if (element.hasClass(ClassName.CARD)) {\n          this._parent = element;\n        }\n\n        this._settings = $.extend({}, Default, settings);\n      }\n\n      var _proto = CardWidget.prototype;\n\n      _proto.collapse = function collapse() {\n        var _this = this;\n\n        this._parent.addClass(ClassName.COLLAPSING).children(Selector.CARD_BODY + \", \" + Selector.CARD_FOOTER).slideUp(this._settings.animationSpeed, function () {\n          _this._parent.addClass(ClassName.COLLAPSED).removeClass(ClassName.COLLAPSING);\n        });\n\n        this._parent.find('> ' + Selector.CARD_HEADER + ' ' + this._settings.collapseTrigger + ' .' + this._settings.collapseIcon).addClass(this._settings.expandIcon).removeClass(this._settings.collapseIcon);\n\n        var collapsed = $.Event(Event.COLLAPSED);\n\n        this._element.trigger(collapsed, this._parent);\n      };\n\n      _proto.expand = function expand() {\n        var _this2 = this;\n\n        this._parent.addClass(ClassName.EXPANDING).children(Selector.CARD_BODY + \", \" + Selector.CARD_FOOTER).slideDown(this._settings.animationSpeed, function () {\n          _this2._parent.removeClass(ClassName.COLLAPSED).removeClass(ClassName.EXPANDING);\n        });\n\n        this._parent.find('> ' + Selector.CARD_HEADER + ' ' + this._settings.collapseTrigger + ' .' + this._settings.expandIcon).addClass(this._settings.collapseIcon).removeClass(this._settings.expandIcon);\n\n        var expanded = $.Event(Event.EXPANDED);\n\n        this._element.trigger(expanded, this._parent);\n      };\n\n      _proto.remove = function remove() {\n        this._parent.slideUp();\n\n        var removed = $.Event(Event.REMOVED);\n\n        this._element.trigger(removed, this._parent);\n      };\n\n      _proto.toggle = function toggle() {\n        if (this._parent.hasClass(ClassName.COLLAPSED)) {\n          this.expand();\n          return;\n        }\n\n        this.collapse();\n      };\n\n      _proto.maximize = function maximize() {\n        this._parent.find(this._settings.maximizeTrigger + ' .' + this._settings.maximizeIcon).addClass(this._settings.minimizeIcon).removeClass(this._settings.maximizeIcon);\n\n        this._parent.css({\n          'height': this._parent.height(),\n          'width': this._parent.width(),\n          'transition': 'all .15s'\n        }).delay(150).queue(function () {\n          $(this).addClass(ClassName.MAXIMIZED);\n          $('html').addClass(ClassName.MAXIMIZED);\n\n          if ($(this).hasClass(ClassName.COLLAPSED)) {\n            $(this).addClass(ClassName.WAS_COLLAPSED);\n          }\n\n          $(this).dequeue();\n        });\n\n        var maximized = $.Event(Event.MAXIMIZED);\n\n        this._element.trigger(maximized, this._parent);\n      };\n\n      _proto.minimize = function minimize() {\n        this._parent.find(this._settings.maximizeTrigger + ' .' + this._settings.minimizeIcon).addClass(this._settings.maximizeIcon).removeClass(this._settings.minimizeIcon);\n\n        this._parent.css('cssText', 'height:' + this._parent[0].style.height + ' !important;' + 'width:' + this._parent[0].style.width + ' !important; transition: all .15s;').delay(10).queue(function () {\n          $(this).removeClass(ClassName.MAXIMIZED);\n          $('html').removeClass(ClassName.MAXIMIZED);\n          $(this).css({\n            'height': 'inherit',\n            'width': 'inherit'\n          });\n\n          if ($(this).hasClass(ClassName.WAS_COLLAPSED)) {\n            $(this).removeClass(ClassName.WAS_COLLAPSED);\n          }\n\n          $(this).dequeue();\n        });\n\n        var MINIMIZED = $.Event(Event.MINIMIZED);\n\n        this._element.trigger(MINIMIZED, this._parent);\n      };\n\n      _proto.toggleMaximize = function toggleMaximize() {\n        if (this._parent.hasClass(ClassName.MAXIMIZED)) {\n          this.minimize();\n          return;\n        }\n\n        this.maximize();\n      } // Private\n      ;\n\n      _proto._init = function _init(card) {\n        var _this3 = this;\n\n        this._parent = card;\n        $(this).find(this._settings.collapseTrigger).click(function () {\n          _this3.toggle();\n        });\n        $(this).find(this._settings.maximizeTrigger).click(function () {\n          _this3.toggleMaximize();\n        });\n        $(this).find(this._settings.removeTrigger).click(function () {\n          _this3.remove();\n        });\n      } // Static\n      ;\n\n      CardWidget._jQueryInterface = function _jQueryInterface(config) {\n        var data = $(this).data(DATA_KEY);\n\n        var _options = $.extend({}, Default, $(this).data());\n\n        if (!data) {\n          data = new CardWidget($(this), _options);\n          $(this).data(DATA_KEY, typeof config === 'string' ? data : config);\n        }\n\n        if (typeof config === 'string' && config.match(/collapse|expand|remove|toggle|maximize|minimize|toggleMaximize/)) {\n          data[config]();\n        } else if (_typeof(config) === 'object') {\n          data._init($(this));\n        }\n      };\n\n      return CardWidget;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.DATA_COLLAPSE, function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      CardWidget._jQueryInterface.call($(this), 'toggle');\n    });\n    $(document).on('click', Selector.DATA_REMOVE, function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      CardWidget._jQueryInterface.call($(this), 'remove');\n    });\n    $(document).on('click', Selector.DATA_MAXIMIZE, function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      CardWidget._jQueryInterface.call($(this), 'toggleMaximize');\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = CardWidget._jQueryInterface;\n    $.fn[NAME].Constructor = CardWidget;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return CardWidget._jQueryInterface;\n    };\n\n    return CardWidget;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE CardRefresh.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var CardRefresh = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'CardRefresh';\n    var DATA_KEY = 'lte.cardrefresh';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      LOADED: \"loaded\" + EVENT_KEY,\n      OVERLAY_ADDED: \"overlay.added\" + EVENT_KEY,\n      OVERLAY_REMOVED: \"overlay.removed\" + EVENT_KEY\n    };\n    var ClassName = {\n      CARD: 'card'\n    };\n    var Selector = {\n      CARD: \".\" + ClassName.CARD,\n      DATA_REFRESH: '[data-card-widget=\"card-refresh\"]'\n    };\n    var Default = {\n      source: '',\n      sourceSelector: '',\n      params: {},\n      trigger: Selector.DATA_REFRESH,\n      content: '.card-body',\n      loadInContent: true,\n      loadOnInit: true,\n      responseType: '',\n      overlayTemplate: '<div class=\"overlay\"><i class=\"fas fa-2x fa-sync-alt fa-spin\"></i></div>',\n      onLoadStart: function onLoadStart() {},\n      onLoadDone: function onLoadDone(response) {\n        return response;\n      }\n    };\n\n    var CardRefresh = /*#__PURE__*/function () {\n      function CardRefresh(element, settings) {\n        this._element = element;\n        this._parent = element.parents(Selector.CARD).first();\n        this._settings = $.extend({}, Default, settings);\n        this._overlay = $(this._settings.overlayTemplate);\n\n        if (element.hasClass(ClassName.CARD)) {\n          this._parent = element;\n        }\n\n        if (this._settings.source === '') {\n          throw new Error('Source url was not defined. Please specify a url in your CardRefresh source option.');\n        }\n      }\n\n      var _proto = CardRefresh.prototype;\n\n      _proto.load = function load() {\n        this._addOverlay();\n\n        this._settings.onLoadStart.call($(this));\n\n        $.get(this._settings.source, this._settings.params, function (response) {\n          if (this._settings.loadInContent) {\n            if (this._settings.sourceSelector != '') {\n              response = $(response).find(this._settings.sourceSelector).html();\n            }\n\n            this._parent.find(this._settings.content).html(response);\n          }\n\n          this._settings.onLoadDone.call($(this), response);\n\n          this._removeOverlay();\n        }.bind(this), this._settings.responseType !== '' && this._settings.responseType);\n        var loadedEvent = $.Event(Event.LOADED);\n        $(this._element).trigger(loadedEvent);\n      };\n\n      _proto._addOverlay = function _addOverlay() {\n        this._parent.append(this._overlay);\n\n        var overlayAddedEvent = $.Event(Event.OVERLAY_ADDED);\n        $(this._element).trigger(overlayAddedEvent);\n      };\n\n      _proto._removeOverlay = function _removeOverlay() {\n        this._parent.find(this._overlay).remove();\n\n        var overlayRemovedEvent = $.Event(Event.OVERLAY_REMOVED);\n        $(this._element).trigger(overlayRemovedEvent);\n      }; // Private\n\n\n      _proto._init = function _init(card) {\n        var _this = this;\n\n        $(this).find(this._settings.trigger).on('click', function () {\n          _this.load();\n        });\n\n        if (this._settings.loadOnInit) {\n          this.load();\n        }\n      } // Static\n      ;\n\n      CardRefresh._jQueryInterface = function _jQueryInterface(config) {\n        var data = $(this).data(DATA_KEY);\n\n        var _options = $.extend({}, Default, $(this).data());\n\n        if (!data) {\n          data = new CardRefresh($(this), _options);\n          $(this).data(DATA_KEY, typeof config === 'string' ? data : config);\n        }\n\n        if (typeof config === 'string' && config.match(/load/)) {\n          data[config]();\n        } else {\n          data._init($(this));\n        }\n      };\n\n      return CardRefresh;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.DATA_REFRESH, function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      CardRefresh._jQueryInterface.call($(this), 'load');\n    });\n    $(document).ready(function () {\n      $(Selector.DATA_REFRESH).each(function () {\n        CardRefresh._jQueryInterface.call($(this));\n      });\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = CardRefresh._jQueryInterface;\n    $.fn[NAME].Constructor = CardRefresh;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return CardRefresh._jQueryInterface;\n    };\n\n    return CardRefresh;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE Dropdown.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var Dropdown = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'Dropdown';\n    var DATA_KEY = 'lte.dropdown';\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Selector = {\n      NAVBAR: '.navbar',\n      DROPDOWN_MENU: '.dropdown-menu',\n      DROPDOWN_MENU_ACTIVE: '.dropdown-menu.show',\n      DROPDOWN_TOGGLE: '[data-toggle=\"dropdown\"]'\n    };\n    var ClassName = {\n      DROPDOWN_HOVER: 'dropdown-hover',\n      DROPDOWN_RIGHT: 'dropdown-menu-right'\n    };\n    var Default = {};\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var Dropdown = /*#__PURE__*/function () {\n      function Dropdown(element, config) {\n        this._config = config;\n        this._element = element;\n      } // Public\n\n\n      var _proto = Dropdown.prototype;\n\n      _proto.toggleSubmenu = function toggleSubmenu() {\n        this._element.siblings().show().toggleClass(\"show\");\n\n        if (!this._element.next().hasClass('show')) {\n          this._element.parents('.dropdown-menu').first().find('.show').removeClass(\"show\").hide();\n        }\n\n        this._element.parents('li.nav-item.dropdown.show').on('hidden.bs.dropdown', function (e) {\n          $('.dropdown-submenu .show').removeClass(\"show\").hide();\n        });\n      };\n\n      _proto.fixPosition = function fixPosition() {\n        var elm = $(Selector.DROPDOWN_MENU_ACTIVE);\n\n        if (elm.length !== 0) {\n          if (elm.hasClass(ClassName.DROPDOWN_RIGHT)) {\n            elm.css('left', 'inherit');\n            elm.css('right', 0);\n          } else {\n            elm.css('left', 0);\n            elm.css('right', 'inherit');\n          }\n\n          var offset = elm.offset();\n          var width = elm.width();\n          var windowWidth = $(window).width();\n          var visiblePart = windowWidth - offset.left;\n\n          if (offset.left < 0) {\n            elm.css('left', 'inherit');\n            elm.css('right', offset.left - 5);\n          } else {\n            if (visiblePart < width) {\n              elm.css('left', 'inherit');\n              elm.css('right', 0);\n            }\n          }\n        }\n      } // Static\n      ;\n\n      Dropdown._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _config = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new Dropdown($(this), _config);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'toggleSubmenu' || config == 'fixPosition') {\n            data[config]();\n          }\n        });\n      };\n\n      return Dropdown;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(Selector.DROPDOWN_MENU + ' ' + Selector.DROPDOWN_TOGGLE).on(\"click\", function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      Dropdown._jQueryInterface.call($(this), 'toggleSubmenu');\n    });\n    $(Selector.NAVBAR + ' ' + Selector.DROPDOWN_TOGGLE).on(\"click\", function (event) {\n      event.preventDefault();\n      setTimeout(function () {\n        Dropdown._jQueryInterface.call($(this), 'fixPosition');\n      }, 1);\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = Dropdown._jQueryInterface;\n    $.fn[NAME].Constructor = Dropdown;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Dropdown._jQueryInterface;\n    };\n\n    return Dropdown;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE Toasts.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var Toasts = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'Toasts';\n    var DATA_KEY = 'lte.toasts';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      INIT: \"init\" + EVENT_KEY,\n      CREATED: \"created\" + EVENT_KEY,\n      REMOVED: \"removed\" + EVENT_KEY\n    };\n    var Selector = {\n      BODY: 'toast-body',\n      CONTAINER_TOP_RIGHT: '#toastsContainerTopRight',\n      CONTAINER_TOP_LEFT: '#toastsContainerTopLeft',\n      CONTAINER_BOTTOM_RIGHT: '#toastsContainerBottomRight',\n      CONTAINER_BOTTOM_LEFT: '#toastsContainerBottomLeft'\n    };\n    var ClassName = {\n      TOP_RIGHT: 'toasts-top-right',\n      TOP_LEFT: 'toasts-top-left',\n      BOTTOM_RIGHT: 'toasts-bottom-right',\n      BOTTOM_LEFT: 'toasts-bottom-left',\n      FADE: 'fade'\n    };\n    var Position = {\n      TOP_RIGHT: 'topRight',\n      TOP_LEFT: 'topLeft',\n      BOTTOM_RIGHT: 'bottomRight',\n      BOTTOM_LEFT: 'bottomLeft'\n    };\n    var Default = {\n      position: Position.TOP_RIGHT,\n      fixed: true,\n      autohide: false,\n      autoremove: true,\n      delay: 1000,\n      fade: true,\n      icon: null,\n      image: null,\n      imageAlt: null,\n      imageHeight: '25px',\n      title: null,\n      subtitle: null,\n      close: true,\n      body: null,\n      \"class\": null\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var Toasts = /*#__PURE__*/function () {\n      function Toasts(element, config) {\n        this._config = config;\n\n        this._prepareContainer();\n\n        var initEvent = $.Event(Event.INIT);\n        $('body').trigger(initEvent);\n      } // Public\n\n\n      var _proto = Toasts.prototype;\n\n      _proto.create = function create() {\n        var toast = $('<div class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\"/>');\n        toast.data('autohide', this._config.autohide);\n        toast.data('animation', this._config.fade);\n\n        if (this._config[\"class\"]) {\n          toast.addClass(this._config[\"class\"]);\n        }\n\n        if (this._config.delay && this._config.delay != 500) {\n          toast.data('delay', this._config.delay);\n        }\n\n        var toast_header = $('<div class=\"toast-header\">');\n\n        if (this._config.image != null) {\n          var toast_image = $('<img />').addClass('rounded mr-2').attr('src', this._config.image).attr('alt', this._config.imageAlt);\n\n          if (this._config.imageHeight != null) {\n            toast_image.height(this._config.imageHeight).width('auto');\n          }\n\n          toast_header.append(toast_image);\n        }\n\n        if (this._config.icon != null) {\n          toast_header.append($('<i />').addClass('mr-2').addClass(this._config.icon));\n        }\n\n        if (this._config.title != null) {\n          toast_header.append($('<strong />').addClass('mr-auto').html(this._config.title));\n        }\n\n        if (this._config.subtitle != null) {\n          toast_header.append($('<small />').html(this._config.subtitle));\n        }\n\n        if (this._config.close == true) {\n          var toast_close = $('<button data-dismiss=\"toast\" />').attr('type', 'button').addClass('ml-2 mb-1 close').attr('aria-label', 'Close').append('<span aria-hidden=\"true\">&times;</span>');\n\n          if (this._config.title == null) {\n            toast_close.toggleClass('ml-2 ml-auto');\n          }\n\n          toast_header.append(toast_close);\n        }\n\n        toast.append(toast_header);\n\n        if (this._config.body != null) {\n          toast.append($('<div class=\"toast-body\" />').html(this._config.body));\n        }\n\n        $(this._getContainerId()).prepend(toast);\n        var createdEvent = $.Event(Event.CREATED);\n        $('body').trigger(createdEvent);\n        toast.toast('show');\n\n        if (this._config.autoremove) {\n          toast.on('hidden.bs.toast', function () {\n            $(this).delay(200).remove();\n            var removedEvent = $.Event(Event.REMOVED);\n            $('body').trigger(removedEvent);\n          });\n        }\n      } // Static\n      ;\n\n      _proto._getContainerId = function _getContainerId() {\n        if (this._config.position == Position.TOP_RIGHT) {\n          return Selector.CONTAINER_TOP_RIGHT;\n        } else if (this._config.position == Position.TOP_LEFT) {\n          return Selector.CONTAINER_TOP_LEFT;\n        } else if (this._config.position == Position.BOTTOM_RIGHT) {\n          return Selector.CONTAINER_BOTTOM_RIGHT;\n        } else if (this._config.position == Position.BOTTOM_LEFT) {\n          return Selector.CONTAINER_BOTTOM_LEFT;\n        }\n      };\n\n      _proto._prepareContainer = function _prepareContainer() {\n        if ($(this._getContainerId()).length === 0) {\n          var container = $('<div />').attr('id', this._getContainerId().replace('#', ''));\n\n          if (this._config.position == Position.TOP_RIGHT) {\n            container.addClass(ClassName.TOP_RIGHT);\n          } else if (this._config.position == Position.TOP_LEFT) {\n            container.addClass(ClassName.TOP_LEFT);\n          } else if (this._config.position == Position.BOTTOM_RIGHT) {\n            container.addClass(ClassName.BOTTOM_RIGHT);\n          } else if (this._config.position == Position.BOTTOM_LEFT) {\n            container.addClass(ClassName.BOTTOM_LEFT);\n          }\n\n          $('body').append(container);\n        }\n\n        if (this._config.fixed) {\n          $(this._getContainerId()).addClass('fixed');\n        } else {\n          $(this._getContainerId()).removeClass('fixed');\n        }\n      } // Static\n      ;\n\n      Toasts._jQueryInterface = function _jQueryInterface(option, config) {\n        return this.each(function () {\n          var _options = $.extend({}, Default, config);\n\n          var toast = new Toasts($(this), _options);\n\n          if (option === 'create') {\n            toast[option]();\n          }\n        });\n      };\n\n      return Toasts;\n    }();\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n\n    $.fn[NAME] = Toasts._jQueryInterface;\n    $.fn[NAME].Constructor = Toasts;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Toasts._jQueryInterface;\n    };\n\n    return Toasts;\n  }(jQuery);\n\n  exports.CardRefresh = CardRefresh;\n  exports.CardWidget = CardWidget;\n  exports.ControlSidebar = ControlSidebar;\n  exports.DirectChat = DirectChat;\n  exports.Dropdown = Dropdown;\n  exports.Layout = Layout;\n  exports.PushMenu = PushMenu;\n  exports.Toasts = Toasts;\n  exports.TodoList = TodoList;\n  exports.Treeview = Treeview;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/template/admin/assets/js/adminlte.js\n");

/***/ }),

/***/ "./resources/template/admin/assets/plugins/daterangepicker/daterangepicker.js":
/*!************************************************************************************!*\
  !*** ./resources/template/admin/assets/plugins/daterangepicker/daterangepicker.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\r\n* @version: 3.1\r\n* @author: Dan Grossman http://www.dangrossman.info/\r\n* @copyright: Copyright (c) 2012-2019 Dan Grossman. All rights reserved.\r\n* @license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php\r\n* @website: http://www.daterangepicker.com/\r\n*/\n// Following the UMD template https://github.com/umdjs/umd/blob/master/templates/returnExportsGlobal.js\n(function (root, factory) {\n  if (true) {\n    // AMD. Make globaly available as well\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! moment */ \"./node_modules/moment/moment.js\"), __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (moment, jquery) {\n      if (!jquery.fn) jquery.fn = {}; // webpack server rendering\n\n      if (typeof moment !== 'function' && moment.hasOwnProperty('default')) moment = moment['default'];\n      return factory(moment, jquery);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var moment, jQuery; }\n})(typeof window !== 'undefined' ? window : this, function (moment, $) {\n  var DateRangePicker = function DateRangePicker(element, options, cb) {\n    //default settings for options\n    this.parentEl = 'body';\n    this.element = $(element);\n    this.startDate = moment().startOf('day');\n    this.endDate = moment().endOf('day');\n    this.minDate = false;\n    this.maxDate = false;\n    this.maxSpan = false;\n    this.autoApply = false;\n    this.singleDatePicker = false;\n    this.showDropdowns = false;\n    this.minYear = moment().subtract(100, 'year').format('YYYY');\n    this.maxYear = moment().add(100, 'year').format('YYYY');\n    this.showWeekNumbers = false;\n    this.showISOWeekNumbers = false;\n    this.showCustomRangeLabel = true;\n    this.timePicker = false;\n    this.timePicker24Hour = false;\n    this.timePickerIncrement = 1;\n    this.timePickerSeconds = false;\n    this.linkedCalendars = true;\n    this.autoUpdateInput = true;\n    this.alwaysShowCalendars = false;\n    this.ranges = {};\n    this.opens = 'right';\n    if (this.element.hasClass('pull-right')) this.opens = 'left';\n    this.drops = 'down';\n    if (this.element.hasClass('dropup')) this.drops = 'up';\n    this.buttonClasses = 'btn btn-sm';\n    this.applyButtonClasses = 'btn-primary';\n    this.cancelButtonClasses = 'btn-default';\n    this.locale = {\n      direction: 'ltr',\n      format: moment.localeData().longDateFormat('L'),\n      separator: ' - ',\n      applyLabel: 'Apply',\n      cancelLabel: 'Cancel',\n      weekLabel: 'W',\n      customRangeLabel: 'Custom Range',\n      daysOfWeek: moment.weekdaysMin(),\n      monthNames: moment.monthsShort(),\n      firstDay: moment.localeData().firstDayOfWeek()\n    };\n\n    this.callback = function () {}; //some state information\n\n\n    this.isShowing = false;\n    this.leftCalendar = {};\n    this.rightCalendar = {}; //custom options from user\n\n    if (_typeof(options) !== 'object' || options === null) options = {}; //allow setting options with data attributes\n    //data-api options will be overwritten with custom javascript options\n\n    options = $.extend(this.element.data(), options); //html template for the picker UI\n\n    if (typeof options.template !== 'string' && !(options.template instanceof $)) options.template = '<div class=\"daterangepicker\">' + '<div class=\"ranges\"></div>' + '<div class=\"drp-calendar left\">' + '<div class=\"calendar-table\"></div>' + '<div class=\"calendar-time\"></div>' + '</div>' + '<div class=\"drp-calendar right\">' + '<div class=\"calendar-table\"></div>' + '<div class=\"calendar-time\"></div>' + '</div>' + '<div class=\"drp-buttons\">' + '<span class=\"drp-selected\"></span>' + '<button class=\"cancelBtn\" type=\"button\"></button>' + '<button class=\"applyBtn\" disabled=\"disabled\" type=\"button\"></button> ' + '</div>' + '</div>';\n    this.parentEl = options.parentEl && $(options.parentEl).length ? $(options.parentEl) : $(this.parentEl);\n    this.container = $(options.template).appendTo(this.parentEl); //\n    // handle all the possible options overriding defaults\n    //\n\n    if (_typeof(options.locale) === 'object') {\n      if (typeof options.locale.direction === 'string') this.locale.direction = options.locale.direction;\n      if (typeof options.locale.format === 'string') this.locale.format = options.locale.format;\n      if (typeof options.locale.separator === 'string') this.locale.separator = options.locale.separator;\n      if (_typeof(options.locale.daysOfWeek) === 'object') this.locale.daysOfWeek = options.locale.daysOfWeek.slice();\n      if (_typeof(options.locale.monthNames) === 'object') this.locale.monthNames = options.locale.monthNames.slice();\n      if (typeof options.locale.firstDay === 'number') this.locale.firstDay = options.locale.firstDay;\n      if (typeof options.locale.applyLabel === 'string') this.locale.applyLabel = options.locale.applyLabel;\n      if (typeof options.locale.cancelLabel === 'string') this.locale.cancelLabel = options.locale.cancelLabel;\n      if (typeof options.locale.weekLabel === 'string') this.locale.weekLabel = options.locale.weekLabel;\n\n      if (typeof options.locale.customRangeLabel === 'string') {\n        //Support unicode chars in the custom range name.\n        var elem = document.createElement('textarea');\n        elem.innerHTML = options.locale.customRangeLabel;\n        var rangeHtml = elem.value;\n        this.locale.customRangeLabel = rangeHtml;\n      }\n    }\n\n    this.container.addClass(this.locale.direction);\n    if (typeof options.startDate === 'string') this.startDate = moment(options.startDate, this.locale.format);\n    if (typeof options.endDate === 'string') this.endDate = moment(options.endDate, this.locale.format);\n    if (typeof options.minDate === 'string') this.minDate = moment(options.minDate, this.locale.format);\n    if (typeof options.maxDate === 'string') this.maxDate = moment(options.maxDate, this.locale.format);\n    if (_typeof(options.startDate) === 'object') this.startDate = moment(options.startDate);\n    if (_typeof(options.endDate) === 'object') this.endDate = moment(options.endDate);\n    if (_typeof(options.minDate) === 'object') this.minDate = moment(options.minDate);\n    if (_typeof(options.maxDate) === 'object') this.maxDate = moment(options.maxDate); // sanity check for bad options\n\n    if (this.minDate && this.startDate.isBefore(this.minDate)) this.startDate = this.minDate.clone(); // sanity check for bad options\n\n    if (this.maxDate && this.endDate.isAfter(this.maxDate)) this.endDate = this.maxDate.clone();\n    if (typeof options.applyButtonClasses === 'string') this.applyButtonClasses = options.applyButtonClasses;\n    if (typeof options.applyClass === 'string') //backwards compat\n      this.applyButtonClasses = options.applyClass;\n    if (typeof options.cancelButtonClasses === 'string') this.cancelButtonClasses = options.cancelButtonClasses;\n    if (typeof options.cancelClass === 'string') //backwards compat\n      this.cancelButtonClasses = options.cancelClass;\n    if (_typeof(options.maxSpan) === 'object') this.maxSpan = options.maxSpan;\n    if (_typeof(options.dateLimit) === 'object') //backwards compat\n      this.maxSpan = options.dateLimit;\n    if (typeof options.opens === 'string') this.opens = options.opens;\n    if (typeof options.drops === 'string') this.drops = options.drops;\n    if (typeof options.showWeekNumbers === 'boolean') this.showWeekNumbers = options.showWeekNumbers;\n    if (typeof options.showISOWeekNumbers === 'boolean') this.showISOWeekNumbers = options.showISOWeekNumbers;\n    if (typeof options.buttonClasses === 'string') this.buttonClasses = options.buttonClasses;\n    if (_typeof(options.buttonClasses) === 'object') this.buttonClasses = options.buttonClasses.join(' ');\n    if (typeof options.showDropdowns === 'boolean') this.showDropdowns = options.showDropdowns;\n    if (typeof options.minYear === 'number') this.minYear = options.minYear;\n    if (typeof options.maxYear === 'number') this.maxYear = options.maxYear;\n    if (typeof options.showCustomRangeLabel === 'boolean') this.showCustomRangeLabel = options.showCustomRangeLabel;\n\n    if (typeof options.singleDatePicker === 'boolean') {\n      this.singleDatePicker = options.singleDatePicker;\n      if (this.singleDatePicker) this.endDate = this.startDate.clone();\n    }\n\n    if (typeof options.timePicker === 'boolean') this.timePicker = options.timePicker;\n    if (typeof options.timePickerSeconds === 'boolean') this.timePickerSeconds = options.timePickerSeconds;\n    if (typeof options.timePickerIncrement === 'number') this.timePickerIncrement = options.timePickerIncrement;\n    if (typeof options.timePicker24Hour === 'boolean') this.timePicker24Hour = options.timePicker24Hour;\n    if (typeof options.autoApply === 'boolean') this.autoApply = options.autoApply;\n    if (typeof options.autoUpdateInput === 'boolean') this.autoUpdateInput = options.autoUpdateInput;\n    if (typeof options.linkedCalendars === 'boolean') this.linkedCalendars = options.linkedCalendars;\n    if (typeof options.isInvalidDate === 'function') this.isInvalidDate = options.isInvalidDate;\n    if (typeof options.isCustomDate === 'function') this.isCustomDate = options.isCustomDate;\n    if (typeof options.alwaysShowCalendars === 'boolean') this.alwaysShowCalendars = options.alwaysShowCalendars; // update day names order to firstDay\n\n    if (this.locale.firstDay != 0) {\n      var iterator = this.locale.firstDay;\n\n      while (iterator > 0) {\n        this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());\n        iterator--;\n      }\n    }\n\n    var start, end, range; //if no start/end dates set, check if an input element contains initial values\n\n    if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {\n      if ($(this.element).is(':text')) {\n        var val = $(this.element).val(),\n            split = val.split(this.locale.separator);\n        start = end = null;\n\n        if (split.length == 2) {\n          start = moment(split[0], this.locale.format);\n          end = moment(split[1], this.locale.format);\n        } else if (this.singleDatePicker && val !== \"\") {\n          start = moment(val, this.locale.format);\n          end = moment(val, this.locale.format);\n        }\n\n        if (start !== null && end !== null) {\n          this.setStartDate(start);\n          this.setEndDate(end);\n        }\n      }\n    }\n\n    if (_typeof(options.ranges) === 'object') {\n      for (range in options.ranges) {\n        if (typeof options.ranges[range][0] === 'string') start = moment(options.ranges[range][0], this.locale.format);else start = moment(options.ranges[range][0]);\n        if (typeof options.ranges[range][1] === 'string') end = moment(options.ranges[range][1], this.locale.format);else end = moment(options.ranges[range][1]); // If the start or end date exceed those allowed by the minDate or maxSpan\n        // options, shorten the range to the allowable period.\n\n        if (this.minDate && start.isBefore(this.minDate)) start = this.minDate.clone();\n        var maxDate = this.maxDate;\n        if (this.maxSpan && maxDate && start.clone().add(this.maxSpan).isAfter(maxDate)) maxDate = start.clone().add(this.maxSpan);\n        if (maxDate && end.isAfter(maxDate)) end = maxDate.clone(); // If the end of the range is before the minimum or the start of the range is\n        // after the maximum, don't display this range option at all.\n\n        if (this.minDate && end.isBefore(this.minDate, this.timepicker ? 'minute' : 'day') || maxDate && start.isAfter(maxDate, this.timepicker ? 'minute' : 'day')) continue; //Support unicode chars in the range names.\n\n        var elem = document.createElement('textarea');\n        elem.innerHTML = range;\n        var rangeHtml = elem.value;\n        this.ranges[rangeHtml] = [start, end];\n      }\n\n      var list = '<ul>';\n\n      for (range in this.ranges) {\n        list += '<li data-range-key=\"' + range + '\">' + range + '</li>';\n      }\n\n      if (this.showCustomRangeLabel) {\n        list += '<li data-range-key=\"' + this.locale.customRangeLabel + '\">' + this.locale.customRangeLabel + '</li>';\n      }\n\n      list += '</ul>';\n      this.container.find('.ranges').prepend(list);\n    }\n\n    if (typeof cb === 'function') {\n      this.callback = cb;\n    }\n\n    if (!this.timePicker) {\n      this.startDate = this.startDate.startOf('day');\n      this.endDate = this.endDate.endOf('day');\n      this.container.find('.calendar-time').hide();\n    } //can't be used together for now\n\n\n    if (this.timePicker && this.autoApply) this.autoApply = false;\n\n    if (this.autoApply) {\n      this.container.addClass('auto-apply');\n    }\n\n    if (_typeof(options.ranges) === 'object') this.container.addClass('show-ranges');\n\n    if (this.singleDatePicker) {\n      this.container.addClass('single');\n      this.container.find('.drp-calendar.left').addClass('single');\n      this.container.find('.drp-calendar.left').show();\n      this.container.find('.drp-calendar.right').hide();\n\n      if (!this.timePicker && this.autoApply) {\n        this.container.addClass('auto-apply');\n      }\n    }\n\n    if (typeof options.ranges === 'undefined' && !this.singleDatePicker || this.alwaysShowCalendars) {\n      this.container.addClass('show-calendar');\n    }\n\n    this.container.addClass('opens' + this.opens); //apply CSS classes and labels to buttons\n\n    this.container.find('.applyBtn, .cancelBtn').addClass(this.buttonClasses);\n    if (this.applyButtonClasses.length) this.container.find('.applyBtn').addClass(this.applyButtonClasses);\n    if (this.cancelButtonClasses.length) this.container.find('.cancelBtn').addClass(this.cancelButtonClasses);\n    this.container.find('.applyBtn').html(this.locale.applyLabel);\n    this.container.find('.cancelBtn').html(this.locale.cancelLabel); //\n    // event listeners\n    //\n\n    this.container.find('.drp-calendar').on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this)).on('click.daterangepicker', '.next', $.proxy(this.clickNext, this)).on('mousedown.daterangepicker', 'td.available', $.proxy(this.clickDate, this)).on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this)).on('change.daterangepicker', 'select.yearselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.monthselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.secondselect,select.ampmselect', $.proxy(this.timeChanged, this));\n    this.container.find('.ranges').on('click.daterangepicker', 'li', $.proxy(this.clickRange, this));\n    this.container.find('.drp-buttons').on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this)).on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this));\n\n    if (this.element.is('input') || this.element.is('button')) {\n      this.element.on({\n        'click.daterangepicker': $.proxy(this.show, this),\n        'focus.daterangepicker': $.proxy(this.show, this),\n        'keyup.daterangepicker': $.proxy(this.elementChanged, this),\n        'keydown.daterangepicker': $.proxy(this.keydown, this) //IE 11 compatibility\n\n      });\n    } else {\n      this.element.on('click.daterangepicker', $.proxy(this.toggle, this));\n      this.element.on('keydown.daterangepicker', $.proxy(this.toggle, this));\n    } //\n    // if attached to a text input, set the initial value\n    //\n\n\n    this.updateElement();\n  };\n\n  DateRangePicker.prototype = {\n    constructor: DateRangePicker,\n    setStartDate: function setStartDate(startDate) {\n      if (typeof startDate === 'string') this.startDate = moment(startDate, this.locale.format);\n      if (_typeof(startDate) === 'object') this.startDate = moment(startDate);\n      if (!this.timePicker) this.startDate = this.startDate.startOf('day');\n      if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);\n\n      if (this.minDate && this.startDate.isBefore(this.minDate)) {\n        this.startDate = this.minDate.clone();\n        if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);\n      }\n\n      if (this.maxDate && this.startDate.isAfter(this.maxDate)) {\n        this.startDate = this.maxDate.clone();\n        if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);\n      }\n\n      if (!this.isShowing) this.updateElement();\n      this.updateMonthsInView();\n    },\n    setEndDate: function setEndDate(endDate) {\n      if (typeof endDate === 'string') this.endDate = moment(endDate, this.locale.format);\n      if (_typeof(endDate) === 'object') this.endDate = moment(endDate);\n      if (!this.timePicker) this.endDate = this.endDate.endOf('day');\n      if (this.timePicker && this.timePickerIncrement) this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);\n      if (this.endDate.isBefore(this.startDate)) this.endDate = this.startDate.clone();\n      if (this.maxDate && this.endDate.isAfter(this.maxDate)) this.endDate = this.maxDate.clone();\n      if (this.maxSpan && this.startDate.clone().add(this.maxSpan).isBefore(this.endDate)) this.endDate = this.startDate.clone().add(this.maxSpan);\n      this.previousRightTime = this.endDate.clone();\n      this.container.find('.drp-selected').html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));\n      if (!this.isShowing) this.updateElement();\n      this.updateMonthsInView();\n    },\n    isInvalidDate: function isInvalidDate() {\n      return false;\n    },\n    isCustomDate: function isCustomDate() {\n      return false;\n    },\n    updateView: function updateView() {\n      if (this.timePicker) {\n        this.renderTimePicker('left');\n        this.renderTimePicker('right');\n\n        if (!this.endDate) {\n          this.container.find('.right .calendar-time select').prop('disabled', true).addClass('disabled');\n        } else {\n          this.container.find('.right .calendar-time select').prop('disabled', false).removeClass('disabled');\n        }\n      }\n\n      if (this.endDate) this.container.find('.drp-selected').html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));\n      this.updateMonthsInView();\n      this.updateCalendars();\n      this.updateFormInputs();\n    },\n    updateMonthsInView: function updateMonthsInView() {\n      if (this.endDate) {\n        //if both dates are visible already, do nothing\n        if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month && (this.startDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.startDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM')) && (this.endDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.endDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))) {\n          return;\n        }\n\n        this.leftCalendar.month = this.startDate.clone().date(2);\n\n        if (!this.linkedCalendars && (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year())) {\n          this.rightCalendar.month = this.endDate.clone().date(2);\n        } else {\n          this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');\n        }\n      } else {\n        if (this.leftCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM') && this.rightCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM')) {\n          this.leftCalendar.month = this.startDate.clone().date(2);\n          this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');\n        }\n      }\n\n      if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {\n        this.rightCalendar.month = this.maxDate.clone().date(2);\n        this.leftCalendar.month = this.maxDate.clone().date(2).subtract(1, 'month');\n      }\n    },\n    updateCalendars: function updateCalendars() {\n      if (this.timePicker) {\n        var hour, minute, second;\n\n        if (this.endDate) {\n          hour = parseInt(this.container.find('.left .hourselect').val(), 10);\n          minute = parseInt(this.container.find('.left .minuteselect').val(), 10);\n\n          if (isNaN(minute)) {\n            minute = parseInt(this.container.find('.left .minuteselect option:last').val(), 10);\n          }\n\n          second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;\n\n          if (!this.timePicker24Hour) {\n            var ampm = this.container.find('.left .ampmselect').val();\n            if (ampm === 'PM' && hour < 12) hour += 12;\n            if (ampm === 'AM' && hour === 12) hour = 0;\n          }\n        } else {\n          hour = parseInt(this.container.find('.right .hourselect').val(), 10);\n          minute = parseInt(this.container.find('.right .minuteselect').val(), 10);\n\n          if (isNaN(minute)) {\n            minute = parseInt(this.container.find('.right .minuteselect option:last').val(), 10);\n          }\n\n          second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;\n\n          if (!this.timePicker24Hour) {\n            var ampm = this.container.find('.right .ampmselect').val();\n            if (ampm === 'PM' && hour < 12) hour += 12;\n            if (ampm === 'AM' && hour === 12) hour = 0;\n          }\n        }\n\n        this.leftCalendar.month.hour(hour).minute(minute).second(second);\n        this.rightCalendar.month.hour(hour).minute(minute).second(second);\n      }\n\n      this.renderCalendar('left');\n      this.renderCalendar('right'); //highlight any predefined range matching the current start and end dates\n\n      this.container.find('.ranges li').removeClass('active');\n      if (this.endDate == null) return;\n      this.calculateChosenLabel();\n    },\n    renderCalendar: function renderCalendar(side) {\n      //\n      // Build the matrix of dates that will populate the calendar\n      //\n      var calendar = side == 'left' ? this.leftCalendar : this.rightCalendar;\n      var month = calendar.month.month();\n      var year = calendar.month.year();\n      var hour = calendar.month.hour();\n      var minute = calendar.month.minute();\n      var second = calendar.month.second();\n      var daysInMonth = moment([year, month]).daysInMonth();\n      var firstDay = moment([year, month, 1]);\n      var lastDay = moment([year, month, daysInMonth]);\n      var lastMonth = moment(firstDay).subtract(1, 'month').month();\n      var lastYear = moment(firstDay).subtract(1, 'month').year();\n      var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();\n      var dayOfWeek = firstDay.day(); //initialize a 6 rows x 7 columns array for the calendar\n\n      var calendar = [];\n      calendar.firstDay = firstDay;\n      calendar.lastDay = lastDay;\n\n      for (var i = 0; i < 6; i++) {\n        calendar[i] = [];\n      } //populate the calendar with date objects\n\n\n      var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;\n      if (startDay > daysInLastMonth) startDay -= 7;\n      if (dayOfWeek == this.locale.firstDay) startDay = daysInLastMonth - 6;\n      var curDate = moment([lastYear, lastMonth, startDay, 12, minute, second]);\n      var col, row;\n\n      for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {\n        if (i > 0 && col % 7 === 0) {\n          col = 0;\n          row++;\n        }\n\n        calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);\n        curDate.hour(12);\n\n        if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {\n          calendar[row][col] = this.minDate.clone();\n        }\n\n        if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {\n          calendar[row][col] = this.maxDate.clone();\n        }\n      } //make the calendar object available to hoverDate/clickDate\n\n\n      if (side == 'left') {\n        this.leftCalendar.calendar = calendar;\n      } else {\n        this.rightCalendar.calendar = calendar;\n      } //\n      // Display the calendar\n      //\n\n\n      var minDate = side == 'left' ? this.minDate : this.startDate;\n      var maxDate = this.maxDate;\n      var selected = side == 'left' ? this.startDate : this.endDate;\n      var arrow = this.locale.direction == 'ltr' ? {\n        left: 'chevron-left',\n        right: 'chevron-right'\n      } : {\n        left: 'chevron-right',\n        right: 'chevron-left'\n      };\n      var html = '<table class=\"table-condensed\">';\n      html += '<thead>';\n      html += '<tr>'; // add empty cell for week number\n\n      if (this.showWeekNumbers || this.showISOWeekNumbers) html += '<th></th>';\n\n      if ((!minDate || minDate.isBefore(calendar.firstDay)) && (!this.linkedCalendars || side == 'left')) {\n        html += '<th class=\"prev available\"><span></span></th>';\n      } else {\n        html += '<th></th>';\n      }\n\n      var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(\" YYYY\");\n\n      if (this.showDropdowns) {\n        var currentMonth = calendar[1][1].month();\n        var currentYear = calendar[1][1].year();\n        var maxYear = maxDate && maxDate.year() || this.maxYear;\n        var minYear = minDate && minDate.year() || this.minYear;\n        var inMinYear = currentYear == minYear;\n        var inMaxYear = currentYear == maxYear;\n        var monthHtml = '<select class=\"monthselect\">';\n\n        for (var m = 0; m < 12; m++) {\n          if ((!inMinYear || minDate && m >= minDate.month()) && (!inMaxYear || maxDate && m <= maxDate.month())) {\n            monthHtml += \"<option value='\" + m + \"'\" + (m === currentMonth ? \" selected='selected'\" : \"\") + \">\" + this.locale.monthNames[m] + \"</option>\";\n          } else {\n            monthHtml += \"<option value='\" + m + \"'\" + (m === currentMonth ? \" selected='selected'\" : \"\") + \" disabled='disabled'>\" + this.locale.monthNames[m] + \"</option>\";\n          }\n        }\n\n        monthHtml += \"</select>\";\n        var yearHtml = '<select class=\"yearselect\">';\n\n        for (var y = minYear; y <= maxYear; y++) {\n          yearHtml += '<option value=\"' + y + '\"' + (y === currentYear ? ' selected=\"selected\"' : '') + '>' + y + '</option>';\n        }\n\n        yearHtml += '</select>';\n        dateHtml = monthHtml + yearHtml;\n      }\n\n      html += '<th colspan=\"5\" class=\"month\">' + dateHtml + '</th>';\n\n      if ((!maxDate || maxDate.isAfter(calendar.lastDay)) && (!this.linkedCalendars || side == 'right' || this.singleDatePicker)) {\n        html += '<th class=\"next available\"><span></span></th>';\n      } else {\n        html += '<th></th>';\n      }\n\n      html += '</tr>';\n      html += '<tr>'; // add week number label\n\n      if (this.showWeekNumbers || this.showISOWeekNumbers) html += '<th class=\"week\">' + this.locale.weekLabel + '</th>';\n      $.each(this.locale.daysOfWeek, function (index, dayOfWeek) {\n        html += '<th>' + dayOfWeek + '</th>';\n      });\n      html += '</tr>';\n      html += '</thead>';\n      html += '<tbody>'; //adjust maxDate to reflect the maxSpan setting in order to\n      //grey out end dates beyond the maxSpan\n\n      if (this.endDate == null && this.maxSpan) {\n        var maxLimit = this.startDate.clone().add(this.maxSpan).endOf('day');\n\n        if (!maxDate || maxLimit.isBefore(maxDate)) {\n          maxDate = maxLimit;\n        }\n      }\n\n      for (var row = 0; row < 6; row++) {\n        html += '<tr>'; // add week number\n\n        if (this.showWeekNumbers) html += '<td class=\"week\">' + calendar[row][0].week() + '</td>';else if (this.showISOWeekNumbers) html += '<td class=\"week\">' + calendar[row][0].isoWeek() + '</td>';\n\n        for (var col = 0; col < 7; col++) {\n          var classes = []; //highlight today's date\n\n          if (calendar[row][col].isSame(new Date(), \"day\")) classes.push('today'); //highlight weekends\n\n          if (calendar[row][col].isoWeekday() > 5) classes.push('weekend'); //grey out the dates in other months displayed at beginning and end of this calendar\n\n          if (calendar[row][col].month() != calendar[1][1].month()) classes.push('off', 'ends'); //don't allow selection of dates before the minimum date\n\n          if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day')) classes.push('off', 'disabled'); //don't allow selection of dates after the maximum date\n\n          if (maxDate && calendar[row][col].isAfter(maxDate, 'day')) classes.push('off', 'disabled'); //don't allow selection of date if a custom function decides it's invalid\n\n          if (this.isInvalidDate(calendar[row][col])) classes.push('off', 'disabled'); //highlight the currently selected start date\n\n          if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD')) classes.push('active', 'start-date'); //highlight the currently selected end date\n\n          if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD')) classes.push('active', 'end-date'); //highlight dates in-between the selected dates\n\n          if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate) classes.push('in-range'); //apply custom classes for this date\n\n          var isCustom = this.isCustomDate(calendar[row][col]);\n\n          if (isCustom !== false) {\n            if (typeof isCustom === 'string') classes.push(isCustom);else Array.prototype.push.apply(classes, isCustom);\n          }\n\n          var cname = '',\n              disabled = false;\n\n          for (var i = 0; i < classes.length; i++) {\n            cname += classes[i] + ' ';\n            if (classes[i] == 'disabled') disabled = true;\n          }\n\n          if (!disabled) cname += 'available';\n          html += '<td class=\"' + cname.replace(/^\\s+|\\s+$/g, '') + '\" data-title=\"' + 'r' + row + 'c' + col + '\">' + calendar[row][col].date() + '</td>';\n        }\n\n        html += '</tr>';\n      }\n\n      html += '</tbody>';\n      html += '</table>';\n      this.container.find('.drp-calendar.' + side + ' .calendar-table').html(html);\n    },\n    renderTimePicker: function renderTimePicker(side) {\n      // Don't bother updating the time picker if it's currently disabled\n      // because an end date hasn't been clicked yet\n      if (side == 'right' && !this.endDate) return;\n      var html,\n          selected,\n          minDate,\n          maxDate = this.maxDate;\n      if (this.maxSpan && (!this.maxDate || this.startDate.clone().add(this.maxSpan).isBefore(this.maxDate))) maxDate = this.startDate.clone().add(this.maxSpan);\n\n      if (side == 'left') {\n        selected = this.startDate.clone();\n        minDate = this.minDate;\n      } else if (side == 'right') {\n        selected = this.endDate.clone();\n        minDate = this.startDate; //Preserve the time already selected\n\n        var timeSelector = this.container.find('.drp-calendar.right .calendar-time');\n\n        if (timeSelector.html() != '') {\n          selected.hour(!isNaN(selected.hour()) ? selected.hour() : timeSelector.find('.hourselect option:selected').val());\n          selected.minute(!isNaN(selected.minute()) ? selected.minute() : timeSelector.find('.minuteselect option:selected').val());\n          selected.second(!isNaN(selected.second()) ? selected.second() : timeSelector.find('.secondselect option:selected').val());\n\n          if (!this.timePicker24Hour) {\n            var ampm = timeSelector.find('.ampmselect option:selected').val();\n            if (ampm === 'PM' && selected.hour() < 12) selected.hour(selected.hour() + 12);\n            if (ampm === 'AM' && selected.hour() === 12) selected.hour(0);\n          }\n        }\n\n        if (selected.isBefore(this.startDate)) selected = this.startDate.clone();\n        if (maxDate && selected.isAfter(maxDate)) selected = maxDate.clone();\n      } //\n      // hours\n      //\n\n\n      html = '<select class=\"hourselect\">';\n      var start = this.timePicker24Hour ? 0 : 1;\n      var end = this.timePicker24Hour ? 23 : 12;\n\n      for (var i = start; i <= end; i++) {\n        var i_in_24 = i;\n        if (!this.timePicker24Hour) i_in_24 = selected.hour() >= 12 ? i == 12 ? 12 : i + 12 : i == 12 ? 0 : i;\n        var time = selected.clone().hour(i_in_24);\n        var disabled = false;\n        if (minDate && time.minute(59).isBefore(minDate)) disabled = true;\n        if (maxDate && time.minute(0).isAfter(maxDate)) disabled = true;\n\n        if (i_in_24 == selected.hour() && !disabled) {\n          html += '<option value=\"' + i + '\" selected=\"selected\">' + i + '</option>';\n        } else if (disabled) {\n          html += '<option value=\"' + i + '\" disabled=\"disabled\" class=\"disabled\">' + i + '</option>';\n        } else {\n          html += '<option value=\"' + i + '\">' + i + '</option>';\n        }\n      }\n\n      html += '</select> '; //\n      // minutes\n      //\n\n      html += ': <select class=\"minuteselect\">';\n\n      for (var i = 0; i < 60; i += this.timePickerIncrement) {\n        var padded = i < 10 ? '0' + i : i;\n        var time = selected.clone().minute(i);\n        var disabled = false;\n        if (minDate && time.second(59).isBefore(minDate)) disabled = true;\n        if (maxDate && time.second(0).isAfter(maxDate)) disabled = true;\n\n        if (selected.minute() == i && !disabled) {\n          html += '<option value=\"' + i + '\" selected=\"selected\">' + padded + '</option>';\n        } else if (disabled) {\n          html += '<option value=\"' + i + '\" disabled=\"disabled\" class=\"disabled\">' + padded + '</option>';\n        } else {\n          html += '<option value=\"' + i + '\">' + padded + '</option>';\n        }\n      }\n\n      html += '</select> '; //\n      // seconds\n      //\n\n      if (this.timePickerSeconds) {\n        html += ': <select class=\"secondselect\">';\n\n        for (var i = 0; i < 60; i++) {\n          var padded = i < 10 ? '0' + i : i;\n          var time = selected.clone().second(i);\n          var disabled = false;\n          if (minDate && time.isBefore(minDate)) disabled = true;\n          if (maxDate && time.isAfter(maxDate)) disabled = true;\n\n          if (selected.second() == i && !disabled) {\n            html += '<option value=\"' + i + '\" selected=\"selected\">' + padded + '</option>';\n          } else if (disabled) {\n            html += '<option value=\"' + i + '\" disabled=\"disabled\" class=\"disabled\">' + padded + '</option>';\n          } else {\n            html += '<option value=\"' + i + '\">' + padded + '</option>';\n          }\n        }\n\n        html += '</select> ';\n      } //\n      // AM/PM\n      //\n\n\n      if (!this.timePicker24Hour) {\n        html += '<select class=\"ampmselect\">';\n        var am_html = '';\n        var pm_html = '';\n        if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate)) am_html = ' disabled=\"disabled\" class=\"disabled\"';\n        if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate)) pm_html = ' disabled=\"disabled\" class=\"disabled\"';\n\n        if (selected.hour() >= 12) {\n          html += '<option value=\"AM\"' + am_html + '>AM</option><option value=\"PM\" selected=\"selected\"' + pm_html + '>PM</option>';\n        } else {\n          html += '<option value=\"AM\" selected=\"selected\"' + am_html + '>AM</option><option value=\"PM\"' + pm_html + '>PM</option>';\n        }\n\n        html += '</select>';\n      }\n\n      this.container.find('.drp-calendar.' + side + ' .calendar-time').html(html);\n    },\n    updateFormInputs: function updateFormInputs() {\n      if (this.singleDatePicker || this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate))) {\n        this.container.find('button.applyBtn').prop('disabled', false);\n      } else {\n        this.container.find('button.applyBtn').prop('disabled', true);\n      }\n    },\n    move: function move() {\n      var parentOffset = {\n        top: 0,\n        left: 0\n      },\n          containerTop,\n          drops = this.drops;\n      var parentRightEdge = $(window).width();\n\n      if (!this.parentEl.is('body')) {\n        parentOffset = {\n          top: this.parentEl.offset().top - this.parentEl.scrollTop(),\n          left: this.parentEl.offset().left - this.parentEl.scrollLeft()\n        };\n        parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;\n      }\n\n      switch (drops) {\n        case 'auto':\n          containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;\n\n          if (containerTop + this.container.outerHeight() >= this.parentEl[0].scrollHeight) {\n            containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;\n            drops = 'up';\n          }\n\n          break;\n\n        case 'up':\n          containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;\n          break;\n\n        default:\n          containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;\n          break;\n      } // Force the container to it's actual width\n\n\n      this.container.css({\n        top: 0,\n        left: 0,\n        right: 'auto'\n      });\n      var containerWidth = this.container.outerWidth();\n      this.container.toggleClass('drop-up', drops == 'up');\n\n      if (this.opens == 'left') {\n        var containerRight = parentRightEdge - this.element.offset().left - this.element.outerWidth();\n\n        if (containerWidth + containerRight > $(window).width()) {\n          this.container.css({\n            top: containerTop,\n            right: 'auto',\n            left: 9\n          });\n        } else {\n          this.container.css({\n            top: containerTop,\n            right: containerRight,\n            left: 'auto'\n          });\n        }\n      } else if (this.opens == 'center') {\n        var containerLeft = this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2 - containerWidth / 2;\n\n        if (containerLeft < 0) {\n          this.container.css({\n            top: containerTop,\n            right: 'auto',\n            left: 9\n          });\n        } else if (containerLeft + containerWidth > $(window).width()) {\n          this.container.css({\n            top: containerTop,\n            left: 'auto',\n            right: 0\n          });\n        } else {\n          this.container.css({\n            top: containerTop,\n            left: containerLeft,\n            right: 'auto'\n          });\n        }\n      } else {\n        var containerLeft = this.element.offset().left - parentOffset.left;\n\n        if (containerLeft + containerWidth > $(window).width()) {\n          this.container.css({\n            top: containerTop,\n            left: 'auto',\n            right: 0\n          });\n        } else {\n          this.container.css({\n            top: containerTop,\n            left: containerLeft,\n            right: 'auto'\n          });\n        }\n      }\n    },\n    show: function show(e) {\n      if (this.isShowing) return; // Create a click proxy that is private to this instance of datepicker, for unbinding\n\n      this._outsideClickProxy = $.proxy(function (e) {\n        this.outsideClick(e);\n      }, this); // Bind global datepicker mousedown for hiding and\n\n      $(document).on('mousedown.daterangepicker', this._outsideClickProxy) // also support mobile devices\n      .on('touchend.daterangepicker', this._outsideClickProxy) // also explicitly play nice with Bootstrap dropdowns, which stopPropagation when clicking them\n      .on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy) // and also close when focus changes to outside the picker (eg. tabbing between controls)\n      .on('focusin.daterangepicker', this._outsideClickProxy); // Reposition the picker if the window is resized while it's open\n\n      $(window).on('resize.daterangepicker', $.proxy(function (e) {\n        this.move(e);\n      }, this));\n      this.oldStartDate = this.startDate.clone();\n      this.oldEndDate = this.endDate.clone();\n      this.previousRightTime = this.endDate.clone();\n      this.updateView();\n      this.container.show();\n      this.move();\n      this.element.trigger('show.daterangepicker', this);\n      this.isShowing = true;\n    },\n    hide: function hide(e) {\n      if (!this.isShowing) return; //incomplete date selection, revert to last values\n\n      if (!this.endDate) {\n        this.startDate = this.oldStartDate.clone();\n        this.endDate = this.oldEndDate.clone();\n      } //if a new date range was selected, invoke the user callback function\n\n\n      if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate)) this.callback(this.startDate.clone(), this.endDate.clone(), this.chosenLabel); //if picker is attached to a text input, update it\n\n      this.updateElement();\n      $(document).off('.daterangepicker');\n      $(window).off('.daterangepicker');\n      this.container.hide();\n      this.element.trigger('hide.daterangepicker', this);\n      this.isShowing = false;\n    },\n    toggle: function toggle(e) {\n      if (this.isShowing) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    },\n    outsideClick: function outsideClick(e) {\n      var target = $(e.target); // if the page is clicked anywhere except within the daterangerpicker/button\n      // itself then call this.hide()\n\n      if ( // ie modal dialog fix\n      e.type == \"focusin\" || target.closest(this.element).length || target.closest(this.container).length || target.closest('.calendar-table').length) return;\n      this.hide();\n      this.element.trigger('outsideClick.daterangepicker', this);\n    },\n    showCalendars: function showCalendars() {\n      this.container.addClass('show-calendar');\n      this.move();\n      this.element.trigger('showCalendar.daterangepicker', this);\n    },\n    hideCalendars: function hideCalendars() {\n      this.container.removeClass('show-calendar');\n      this.element.trigger('hideCalendar.daterangepicker', this);\n    },\n    clickRange: function clickRange(e) {\n      var label = e.target.getAttribute('data-range-key');\n      this.chosenLabel = label;\n\n      if (label == this.locale.customRangeLabel) {\n        this.showCalendars();\n      } else {\n        var dates = this.ranges[label];\n        this.startDate = dates[0];\n        this.endDate = dates[1];\n\n        if (!this.timePicker) {\n          this.startDate.startOf('day');\n          this.endDate.endOf('day');\n        }\n\n        if (!this.alwaysShowCalendars) this.hideCalendars();\n        this.clickApply();\n      }\n    },\n    clickPrev: function clickPrev(e) {\n      var cal = $(e.target).parents('.drp-calendar');\n\n      if (cal.hasClass('left')) {\n        this.leftCalendar.month.subtract(1, 'month');\n        if (this.linkedCalendars) this.rightCalendar.month.subtract(1, 'month');\n      } else {\n        this.rightCalendar.month.subtract(1, 'month');\n      }\n\n      this.updateCalendars();\n    },\n    clickNext: function clickNext(e) {\n      var cal = $(e.target).parents('.drp-calendar');\n\n      if (cal.hasClass('left')) {\n        this.leftCalendar.month.add(1, 'month');\n      } else {\n        this.rightCalendar.month.add(1, 'month');\n        if (this.linkedCalendars) this.leftCalendar.month.add(1, 'month');\n      }\n\n      this.updateCalendars();\n    },\n    hoverDate: function hoverDate(e) {\n      //ignore dates that can't be selected\n      if (!$(e.target).hasClass('available')) return;\n      var title = $(e.target).attr('data-title');\n      var row = title.substr(1, 1);\n      var col = title.substr(3, 1);\n      var cal = $(e.target).parents('.drp-calendar');\n      var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col]; //highlight the dates between the start date and the date being hovered as a potential end date\n\n      var leftCalendar = this.leftCalendar;\n      var rightCalendar = this.rightCalendar;\n      var startDate = this.startDate;\n\n      if (!this.endDate) {\n        this.container.find('.drp-calendar tbody td').each(function (index, el) {\n          //skip week numbers, only look at dates\n          if ($(el).hasClass('week')) return;\n          var title = $(el).attr('data-title');\n          var row = title.substr(1, 1);\n          var col = title.substr(3, 1);\n          var cal = $(el).parents('.drp-calendar');\n          var dt = cal.hasClass('left') ? leftCalendar.calendar[row][col] : rightCalendar.calendar[row][col];\n\n          if (dt.isAfter(startDate) && dt.isBefore(date) || dt.isSame(date, 'day')) {\n            $(el).addClass('in-range');\n          } else {\n            $(el).removeClass('in-range');\n          }\n        });\n      }\n    },\n    clickDate: function clickDate(e) {\n      if (!$(e.target).hasClass('available')) return;\n      var title = $(e.target).attr('data-title');\n      var row = title.substr(1, 1);\n      var col = title.substr(3, 1);\n      var cal = $(e.target).parents('.drp-calendar');\n      var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col]; //\n      // this function needs to do a few things:\n      // * alternate between selecting a start and end date for the range,\n      // * if the time picker is enabled, apply the hour/minute/second from the select boxes to the clicked date\n      // * if autoapply is enabled, and an end date was chosen, apply the selection\n      // * if single date picker mode, and time picker isn't enabled, apply the selection immediately\n      // * if one of the inputs above the calendars was focused, cancel that manual input\n      //\n\n      if (this.endDate || date.isBefore(this.startDate, 'day')) {\n        //picking start\n        if (this.timePicker) {\n          var hour = parseInt(this.container.find('.left .hourselect').val(), 10);\n\n          if (!this.timePicker24Hour) {\n            var ampm = this.container.find('.left .ampmselect').val();\n            if (ampm === 'PM' && hour < 12) hour += 12;\n            if (ampm === 'AM' && hour === 12) hour = 0;\n          }\n\n          var minute = parseInt(this.container.find('.left .minuteselect').val(), 10);\n\n          if (isNaN(minute)) {\n            minute = parseInt(this.container.find('.left .minuteselect option:last').val(), 10);\n          }\n\n          var second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;\n          date = date.clone().hour(hour).minute(minute).second(second);\n        }\n\n        this.endDate = null;\n        this.setStartDate(date.clone());\n      } else if (!this.endDate && date.isBefore(this.startDate)) {\n        //special case: clicking the same date for start/end,\n        //but the time of the end date is before the start date\n        this.setEndDate(this.startDate.clone());\n      } else {\n        // picking end\n        if (this.timePicker) {\n          var hour = parseInt(this.container.find('.right .hourselect').val(), 10);\n\n          if (!this.timePicker24Hour) {\n            var ampm = this.container.find('.right .ampmselect').val();\n            if (ampm === 'PM' && hour < 12) hour += 12;\n            if (ampm === 'AM' && hour === 12) hour = 0;\n          }\n\n          var minute = parseInt(this.container.find('.right .minuteselect').val(), 10);\n\n          if (isNaN(minute)) {\n            minute = parseInt(this.container.find('.right .minuteselect option:last').val(), 10);\n          }\n\n          var second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;\n          date = date.clone().hour(hour).minute(minute).second(second);\n        }\n\n        this.setEndDate(date.clone());\n\n        if (this.autoApply) {\n          this.calculateChosenLabel();\n          this.clickApply();\n        }\n      }\n\n      if (this.singleDatePicker) {\n        this.setEndDate(this.startDate);\n        if (!this.timePicker && this.autoApply) this.clickApply();\n      }\n\n      this.updateView(); //This is to cancel the blur event handler if the mouse was in one of the inputs\n\n      e.stopPropagation();\n    },\n    calculateChosenLabel: function calculateChosenLabel() {\n      var customRange = true;\n      var i = 0;\n\n      for (var range in this.ranges) {\n        if (this.timePicker) {\n          var format = this.timePickerSeconds ? \"YYYY-MM-DD HH:mm:ss\" : \"YYYY-MM-DD HH:mm\"; //ignore times when comparing dates if time picker seconds is not enabled\n\n          if (this.startDate.format(format) == this.ranges[range][0].format(format) && this.endDate.format(format) == this.ranges[range][1].format(format)) {\n            customRange = false;\n            this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').attr('data-range-key');\n            break;\n          }\n        } else {\n          //ignore times when comparing dates if time picker is not enabled\n          if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {\n            customRange = false;\n            this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').attr('data-range-key');\n            break;\n          }\n        }\n\n        i++;\n      }\n\n      if (customRange) {\n        if (this.showCustomRangeLabel) {\n          this.chosenLabel = this.container.find('.ranges li:last').addClass('active').attr('data-range-key');\n        } else {\n          this.chosenLabel = null;\n        }\n\n        this.showCalendars();\n      }\n    },\n    clickApply: function clickApply(e) {\n      this.hide();\n      this.element.trigger('apply.daterangepicker', this);\n    },\n    clickCancel: function clickCancel(e) {\n      this.startDate = this.oldStartDate;\n      this.endDate = this.oldEndDate;\n      this.hide();\n      this.element.trigger('cancel.daterangepicker', this);\n    },\n    monthOrYearChanged: function monthOrYearChanged(e) {\n      var isLeft = $(e.target).closest('.drp-calendar').hasClass('left'),\n          leftOrRight = isLeft ? 'left' : 'right',\n          cal = this.container.find('.drp-calendar.' + leftOrRight); // Month must be Number for new moment versions\n\n      var month = parseInt(cal.find('.monthselect').val(), 10);\n      var year = cal.find('.yearselect').val();\n\n      if (!isLeft) {\n        if (year < this.startDate.year() || year == this.startDate.year() && month < this.startDate.month()) {\n          month = this.startDate.month();\n          year = this.startDate.year();\n        }\n      }\n\n      if (this.minDate) {\n        if (year < this.minDate.year() || year == this.minDate.year() && month < this.minDate.month()) {\n          month = this.minDate.month();\n          year = this.minDate.year();\n        }\n      }\n\n      if (this.maxDate) {\n        if (year > this.maxDate.year() || year == this.maxDate.year() && month > this.maxDate.month()) {\n          month = this.maxDate.month();\n          year = this.maxDate.year();\n        }\n      }\n\n      if (isLeft) {\n        this.leftCalendar.month.month(month).year(year);\n        if (this.linkedCalendars) this.rightCalendar.month = this.leftCalendar.month.clone().add(1, 'month');\n      } else {\n        this.rightCalendar.month.month(month).year(year);\n        if (this.linkedCalendars) this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, 'month');\n      }\n\n      this.updateCalendars();\n    },\n    timeChanged: function timeChanged(e) {\n      var cal = $(e.target).closest('.drp-calendar'),\n          isLeft = cal.hasClass('left');\n      var hour = parseInt(cal.find('.hourselect').val(), 10);\n      var minute = parseInt(cal.find('.minuteselect').val(), 10);\n\n      if (isNaN(minute)) {\n        minute = parseInt(cal.find('.minuteselect option:last').val(), 10);\n      }\n\n      var second = this.timePickerSeconds ? parseInt(cal.find('.secondselect').val(), 10) : 0;\n\n      if (!this.timePicker24Hour) {\n        var ampm = cal.find('.ampmselect').val();\n        if (ampm === 'PM' && hour < 12) hour += 12;\n        if (ampm === 'AM' && hour === 12) hour = 0;\n      }\n\n      if (isLeft) {\n        var start = this.startDate.clone();\n        start.hour(hour);\n        start.minute(minute);\n        start.second(second);\n        this.setStartDate(start);\n\n        if (this.singleDatePicker) {\n          this.endDate = this.startDate.clone();\n        } else if (this.endDate && this.endDate.format('YYYY-MM-DD') == start.format('YYYY-MM-DD') && this.endDate.isBefore(start)) {\n          this.setEndDate(start.clone());\n        }\n      } else if (this.endDate) {\n        var end = this.endDate.clone();\n        end.hour(hour);\n        end.minute(minute);\n        end.second(second);\n        this.setEndDate(end);\n      } //update the calendars so all clickable dates reflect the new time component\n\n\n      this.updateCalendars(); //update the form inputs above the calendars with the new time\n\n      this.updateFormInputs(); //re-render the time pickers because changing one selection can affect what's enabled in another\n\n      this.renderTimePicker('left');\n      this.renderTimePicker('right');\n    },\n    elementChanged: function elementChanged() {\n      if (!this.element.is('input')) return;\n      if (!this.element.val().length) return;\n      var dateString = this.element.val().split(this.locale.separator),\n          start = null,\n          end = null;\n\n      if (dateString.length === 2) {\n        start = moment(dateString[0], this.locale.format);\n        end = moment(dateString[1], this.locale.format);\n      }\n\n      if (this.singleDatePicker || start === null || end === null) {\n        start = moment(this.element.val(), this.locale.format);\n        end = start;\n      }\n\n      if (!start.isValid() || !end.isValid()) return;\n      this.setStartDate(start);\n      this.setEndDate(end);\n      this.updateView();\n    },\n    keydown: function keydown(e) {\n      //hide on tab or enter\n      if (e.keyCode === 9 || e.keyCode === 13) {\n        this.hide();\n      } //hide on esc and prevent propagation\n\n\n      if (e.keyCode === 27) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.hide();\n      }\n    },\n    updateElement: function updateElement() {\n      if (this.element.is('input') && this.autoUpdateInput) {\n        var newValue = this.startDate.format(this.locale.format);\n\n        if (!this.singleDatePicker) {\n          newValue += this.locale.separator + this.endDate.format(this.locale.format);\n        }\n\n        if (newValue !== this.element.val()) {\n          this.element.val(newValue).trigger('change');\n        }\n      }\n    },\n    remove: function remove() {\n      this.container.remove();\n      this.element.off('.daterangepicker');\n      this.element.removeData();\n    }\n  };\n\n  $.fn.daterangepicker = function (options, callback) {\n    var implementOptions = $.extend(true, {}, $.fn.daterangepicker.defaultOptions, options);\n    this.each(function () {\n      var el = $(this);\n      if (el.data('daterangepicker')) el.data('daterangepicker').remove();\n      el.data('daterangepicker', new DateRangePicker(el, implementOptions, callback));\n    });\n    return this;\n  };\n\n  return DateRangePicker;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvdGVtcGxhdGUvYWRtaW4vYXNzZXRzL3BsdWdpbnMvZGF0ZXJhbmdlcGlja2VyL2RhdGVyYW5nZXBpY2tlci5qcz8xOWY4Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwibW9tZW50IiwianF1ZXJ5IiwiZm4iLCJoYXNPd25Qcm9wZXJ0eSIsIndpbmRvdyIsIiQiLCJEYXRlUmFuZ2VQaWNrZXIiLCJlbGVtZW50Iiwib3B0aW9ucyIsImNiIiwicGFyZW50RWwiLCJzdGFydERhdGUiLCJzdGFydE9mIiwiZW5kRGF0ZSIsImVuZE9mIiwibWluRGF0ZSIsIm1heERhdGUiLCJtYXhTcGFuIiwiYXV0b0FwcGx5Iiwic2luZ2xlRGF0ZVBpY2tlciIsInNob3dEcm9wZG93bnMiLCJtaW5ZZWFyIiwic3VidHJhY3QiLCJmb3JtYXQiLCJtYXhZZWFyIiwiYWRkIiwic2hvd1dlZWtOdW1iZXJzIiwic2hvd0lTT1dlZWtOdW1iZXJzIiwic2hvd0N1c3RvbVJhbmdlTGFiZWwiLCJ0aW1lUGlja2VyIiwidGltZVBpY2tlcjI0SG91ciIsInRpbWVQaWNrZXJJbmNyZW1lbnQiLCJ0aW1lUGlja2VyU2Vjb25kcyIsImxpbmtlZENhbGVuZGFycyIsImF1dG9VcGRhdGVJbnB1dCIsImFsd2F5c1Nob3dDYWxlbmRhcnMiLCJyYW5nZXMiLCJvcGVucyIsImhhc0NsYXNzIiwiZHJvcHMiLCJidXR0b25DbGFzc2VzIiwiYXBwbHlCdXR0b25DbGFzc2VzIiwiY2FuY2VsQnV0dG9uQ2xhc3NlcyIsImxvY2FsZSIsImRpcmVjdGlvbiIsImxvY2FsZURhdGEiLCJsb25nRGF0ZUZvcm1hdCIsInNlcGFyYXRvciIsImFwcGx5TGFiZWwiLCJjYW5jZWxMYWJlbCIsIndlZWtMYWJlbCIsImN1c3RvbVJhbmdlTGFiZWwiLCJkYXlzT2ZXZWVrIiwid2Vla2RheXNNaW4iLCJtb250aE5hbWVzIiwibW9udGhzU2hvcnQiLCJmaXJzdERheSIsImZpcnN0RGF5T2ZXZWVrIiwiY2FsbGJhY2siLCJpc1Nob3dpbmciLCJsZWZ0Q2FsZW5kYXIiLCJyaWdodENhbGVuZGFyIiwiZXh0ZW5kIiwiZGF0YSIsInRlbXBsYXRlIiwibGVuZ3RoIiwiY29udGFpbmVyIiwiYXBwZW5kVG8iLCJzbGljZSIsImVsZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJyYW5nZUh0bWwiLCJ2YWx1ZSIsImFkZENsYXNzIiwiaXNCZWZvcmUiLCJjbG9uZSIsImlzQWZ0ZXIiLCJhcHBseUNsYXNzIiwiY2FuY2VsQ2xhc3MiLCJkYXRlTGltaXQiLCJqb2luIiwiaXNJbnZhbGlkRGF0ZSIsImlzQ3VzdG9tRGF0ZSIsIml0ZXJhdG9yIiwicHVzaCIsInNoaWZ0Iiwic3RhcnQiLCJlbmQiLCJyYW5nZSIsImlzIiwidmFsIiwic3BsaXQiLCJzZXRTdGFydERhdGUiLCJzZXRFbmREYXRlIiwidGltZXBpY2tlciIsImxpc3QiLCJmaW5kIiwicHJlcGVuZCIsImhpZGUiLCJzaG93IiwiaHRtbCIsIm9uIiwicHJveHkiLCJjbGlja1ByZXYiLCJjbGlja05leHQiLCJjbGlja0RhdGUiLCJob3ZlckRhdGUiLCJtb250aE9yWWVhckNoYW5nZWQiLCJ0aW1lQ2hhbmdlZCIsImNsaWNrUmFuZ2UiLCJjbGlja0FwcGx5IiwiY2xpY2tDYW5jZWwiLCJlbGVtZW50Q2hhbmdlZCIsImtleWRvd24iLCJ0b2dnbGUiLCJ1cGRhdGVFbGVtZW50IiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJtaW51dGUiLCJNYXRoIiwicm91bmQiLCJmbG9vciIsInVwZGF0ZU1vbnRoc0luVmlldyIsInByZXZpb3VzUmlnaHRUaW1lIiwidXBkYXRlVmlldyIsInJlbmRlclRpbWVQaWNrZXIiLCJwcm9wIiwicmVtb3ZlQ2xhc3MiLCJ1cGRhdGVDYWxlbmRhcnMiLCJ1cGRhdGVGb3JtSW5wdXRzIiwibW9udGgiLCJkYXRlIiwieWVhciIsImhvdXIiLCJzZWNvbmQiLCJwYXJzZUludCIsImlzTmFOIiwiYW1wbSIsInJlbmRlckNhbGVuZGFyIiwiY2FsY3VsYXRlQ2hvc2VuTGFiZWwiLCJzaWRlIiwiY2FsZW5kYXIiLCJkYXlzSW5Nb250aCIsImxhc3REYXkiLCJsYXN0TW9udGgiLCJsYXN0WWVhciIsImRheXNJbkxhc3RNb250aCIsImRheU9mV2VlayIsImRheSIsImkiLCJzdGFydERheSIsImN1ckRhdGUiLCJjb2wiLCJyb3ciLCJzZWxlY3RlZCIsImFycm93IiwibGVmdCIsInJpZ2h0IiwiZGF0ZUh0bWwiLCJjdXJyZW50TW9udGgiLCJjdXJyZW50WWVhciIsImluTWluWWVhciIsImluTWF4WWVhciIsIm1vbnRoSHRtbCIsIm0iLCJ5ZWFySHRtbCIsInkiLCJlYWNoIiwiaW5kZXgiLCJtYXhMaW1pdCIsIndlZWsiLCJpc29XZWVrIiwiY2xhc3NlcyIsImlzU2FtZSIsIkRhdGUiLCJpc29XZWVrZGF5IiwiaXNDdXN0b20iLCJBcnJheSIsImFwcGx5IiwiY25hbWUiLCJkaXNhYmxlZCIsInJlcGxhY2UiLCJ0aW1lU2VsZWN0b3IiLCJpX2luXzI0IiwidGltZSIsInBhZGRlZCIsImFtX2h0bWwiLCJwbV9odG1sIiwibW92ZSIsInBhcmVudE9mZnNldCIsInRvcCIsImNvbnRhaW5lclRvcCIsInBhcmVudFJpZ2h0RWRnZSIsIndpZHRoIiwib2Zmc2V0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImNsaWVudFdpZHRoIiwib3V0ZXJIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJjc3MiLCJjb250YWluZXJXaWR0aCIsIm91dGVyV2lkdGgiLCJ0b2dnbGVDbGFzcyIsImNvbnRhaW5lclJpZ2h0IiwiY29udGFpbmVyTGVmdCIsImUiLCJfb3V0c2lkZUNsaWNrUHJveHkiLCJvdXRzaWRlQ2xpY2siLCJvbGRTdGFydERhdGUiLCJvbGRFbmREYXRlIiwidHJpZ2dlciIsImNob3NlbkxhYmVsIiwib2ZmIiwidGFyZ2V0IiwidHlwZSIsImNsb3Nlc3QiLCJzaG93Q2FsZW5kYXJzIiwiaGlkZUNhbGVuZGFycyIsImxhYmVsIiwiZ2V0QXR0cmlidXRlIiwiZGF0ZXMiLCJjYWwiLCJwYXJlbnRzIiwidGl0bGUiLCJhdHRyIiwic3Vic3RyIiwiZWwiLCJkdCIsInN0b3BQcm9wYWdhdGlvbiIsImN1c3RvbVJhbmdlIiwiaXNMZWZ0IiwibGVmdE9yUmlnaHQiLCJkYXRlU3RyaW5nIiwiaXNWYWxpZCIsImtleUNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsIm5ld1ZhbHVlIiwicmVtb3ZlIiwicmVtb3ZlRGF0YSIsImRhdGVyYW5nZXBpY2tlciIsImltcGxlbWVudE9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0MsV0FBVUEsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDdEIsTUFBSSxJQUFKLEVBQWdEO0FBQzVDO0FBQ0FDLHFDQUFPLENBQUMsb0VBQUQsRUFBVyx5RUFBWCxDQUFELG1DQUF1QixVQUFVQyxNQUFWLEVBQWtCQyxNQUFsQixFQUEwQjtBQUNuRCxVQUFJLENBQUNBLE1BQU0sQ0FBQ0MsRUFBWixFQUFnQkQsTUFBTSxDQUFDQyxFQUFQLEdBQVksRUFBWixDQURtQyxDQUNuQjs7QUFDaEMsVUFBSSxPQUFPRixNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxNQUFNLENBQUNHLGNBQVAsQ0FBc0IsU0FBdEIsQ0FBcEMsRUFBc0VILE1BQU0sR0FBR0EsTUFBTSxDQUFDLFNBQUQsQ0FBZjtBQUN0RSxhQUFPRixPQUFPLENBQUNFLE1BQUQsRUFBU0MsTUFBVCxDQUFkO0FBQ0gsS0FKSztBQUFBLG9HQUFOO0FBS0gsR0FQRCxNQU9PLHVCQWFOO0FBQ0osQ0F0QkEsRUFzQkMsT0FBT0csTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsR0FBeUMsSUF0QjFDLEVBc0JnRCxVQUFTSixNQUFULEVBQWlCSyxDQUFqQixFQUFvQjtBQUNqRSxNQUFJQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQVNDLE9BQVQs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Q0FqaURBLENBQUQiLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGVtcGxhdGUvYWRtaW4vYXNzZXRzL3BsdWdpbnMvZGF0ZXJhbmdlcGlja2VyL2RhdGVyYW5nZXBpY2tlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4qIEB2ZXJzaW9uOiAzLjFcclxuKiBAYXV0aG9yOiBEYW4gR3Jvc3NtYW4gaHR0cDovL3d3dy5kYW5ncm9zc21hbi5pbmZvL1xyXG4qIEBjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAxMi0yMDE5IERhbiBHcm9zc21hbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuKiBAbGljZW5zZTogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuKiBAd2Vic2l0ZTogaHR0cDovL3d3dy5kYXRlcmFuZ2VwaWNrZXIuY29tL1xyXG4qL1xyXG4vLyBGb2xsb3dpbmcgdGhlIFVNRCB0ZW1wbGF0ZSBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3RlbXBsYXRlcy9yZXR1cm5FeHBvcnRzR2xvYmFsLmpzXHJcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIC8vIEFNRC4gTWFrZSBnbG9iYWx5IGF2YWlsYWJsZSBhcyB3ZWxsXHJcbiAgICAgICAgZGVmaW5lKFsnbW9tZW50JywgJ2pxdWVyeSddLCBmdW5jdGlvbiAobW9tZW50LCBqcXVlcnkpIHtcclxuICAgICAgICAgICAgaWYgKCFqcXVlcnkuZm4pIGpxdWVyeS5mbiA9IHt9OyAvLyB3ZWJwYWNrIHNlcnZlciByZW5kZXJpbmdcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtb21lbnQgIT09ICdmdW5jdGlvbicgJiYgbW9tZW50Lmhhc093blByb3BlcnR5KCdkZWZhdWx0JykpIG1vbWVudCA9IG1vbWVudFsnZGVmYXVsdCddXHJcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KG1vbWVudCwganF1ZXJ5KTtcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgICAgICAvLyBOb2RlIC8gQnJvd3NlcmlmeVxyXG4gICAgICAgIC8vaXNvbW9ycGhpYyBpc3N1ZVxyXG4gICAgICAgIHZhciBqUXVlcnkgPSAodHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJykgPyB3aW5kb3cualF1ZXJ5IDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICghalF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG4gICAgICAgICAgICBpZiAoIWpRdWVyeS5mbikgalF1ZXJ5LmZuID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtb21lbnQgPSAodHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93Lm1vbWVudCAhPSAndW5kZWZpbmVkJykgPyB3aW5kb3cubW9tZW50IDogcmVxdWlyZSgnbW9tZW50Jyk7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KG1vbWVudCwgalF1ZXJ5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXHJcbiAgICAgICAgcm9vdC5kYXRlcmFuZ2VwaWNrZXIgPSBmYWN0b3J5KHJvb3QubW9tZW50LCByb290LmpRdWVyeSk7XHJcbiAgICB9XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbihtb21lbnQsICQpIHtcclxuICAgIHZhciBEYXRlUmFuZ2VQaWNrZXIgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zLCBjYikge1xyXG5cclxuICAgICAgICAvL2RlZmF1bHQgc2V0dGluZ3MgZm9yIG9wdGlvbnNcclxuICAgICAgICB0aGlzLnBhcmVudEVsID0gJ2JvZHknO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5zdGFydERhdGUgPSBtb21lbnQoKS5zdGFydE9mKCdkYXknKTtcclxuICAgICAgICB0aGlzLmVuZERhdGUgPSBtb21lbnQoKS5lbmRPZignZGF5Jyk7XHJcbiAgICAgICAgdGhpcy5taW5EYXRlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tYXhEYXRlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tYXhTcGFuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5hdXRvQXBwbHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNpbmdsZURhdGVQaWNrZXIgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNob3dEcm9wZG93bnMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm1pblllYXIgPSBtb21lbnQoKS5zdWJ0cmFjdCgxMDAsICd5ZWFyJykuZm9ybWF0KCdZWVlZJyk7XHJcbiAgICAgICAgdGhpcy5tYXhZZWFyID0gbW9tZW50KCkuYWRkKDEwMCwgJ3llYXInKS5mb3JtYXQoJ1lZWVknKTtcclxuICAgICAgICB0aGlzLnNob3dXZWVrTnVtYmVycyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2hvd0lTT1dlZWtOdW1iZXJzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaG93Q3VzdG9tUmFuZ2VMYWJlbCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50aW1lUGlja2VyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50aW1lUGlja2VyMjRIb3VyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50aW1lUGlja2VySW5jcmVtZW50ID0gMTtcclxuICAgICAgICB0aGlzLnRpbWVQaWNrZXJTZWNvbmRzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5saW5rZWRDYWxlbmRhcnMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYXV0b1VwZGF0ZUlucHV0ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmFsd2F5c1Nob3dDYWxlbmRhcnMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJhbmdlcyA9IHt9O1xyXG5cclxuICAgICAgICB0aGlzLm9wZW5zID0gJ3JpZ2h0JztcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Lmhhc0NsYXNzKCdwdWxsLXJpZ2h0JykpXHJcbiAgICAgICAgICAgIHRoaXMub3BlbnMgPSAnbGVmdCc7XHJcblxyXG4gICAgICAgIHRoaXMuZHJvcHMgPSAnZG93bic7XHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5oYXNDbGFzcygnZHJvcHVwJykpXHJcbiAgICAgICAgICAgIHRoaXMuZHJvcHMgPSAndXAnO1xyXG5cclxuICAgICAgICB0aGlzLmJ1dHRvbkNsYXNzZXMgPSAnYnRuIGJ0bi1zbSc7XHJcbiAgICAgICAgdGhpcy5hcHBseUJ1dHRvbkNsYXNzZXMgPSAnYnRuLXByaW1hcnknO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsQnV0dG9uQ2xhc3NlcyA9ICdidG4tZGVmYXVsdCc7XHJcblxyXG4gICAgICAgIHRoaXMubG9jYWxlID0ge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb246ICdsdHInLFxyXG4gICAgICAgICAgICBmb3JtYXQ6IG1vbWVudC5sb2NhbGVEYXRhKCkubG9uZ0RhdGVGb3JtYXQoJ0wnKSxcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiAnIC0gJyxcclxuICAgICAgICAgICAgYXBwbHlMYWJlbDogJ0FwcGx5JyxcclxuICAgICAgICAgICAgY2FuY2VsTGFiZWw6ICdDYW5jZWwnLFxyXG4gICAgICAgICAgICB3ZWVrTGFiZWw6ICdXJyxcclxuICAgICAgICAgICAgY3VzdG9tUmFuZ2VMYWJlbDogJ0N1c3RvbSBSYW5nZScsXHJcbiAgICAgICAgICAgIGRheXNPZldlZWs6IG1vbWVudC53ZWVrZGF5c01pbigpLFxyXG4gICAgICAgICAgICBtb250aE5hbWVzOiBtb21lbnQubW9udGhzU2hvcnQoKSxcclxuICAgICAgICAgICAgZmlyc3REYXk6IG1vbWVudC5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBmdW5jdGlvbigpIHsgfTtcclxuXHJcbiAgICAgICAgLy9zb21lIHN0YXRlIGluZm9ybWF0aW9uXHJcbiAgICAgICAgdGhpcy5pc1Nob3dpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxlZnRDYWxlbmRhciA9IHt9O1xyXG4gICAgICAgIHRoaXMucmlnaHRDYWxlbmRhciA9IHt9O1xyXG5cclxuICAgICAgICAvL2N1c3RvbSBvcHRpb25zIGZyb20gdXNlclxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbClcclxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG5cclxuICAgICAgICAvL2FsbG93IHNldHRpbmcgb3B0aW9ucyB3aXRoIGRhdGEgYXR0cmlidXRlc1xyXG4gICAgICAgIC8vZGF0YS1hcGkgb3B0aW9ucyB3aWxsIGJlIG92ZXJ3cml0dGVuIHdpdGggY3VzdG9tIGphdmFzY3JpcHQgb3B0aW9uc1xyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0aGlzLmVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy9odG1sIHRlbXBsYXRlIGZvciB0aGUgcGlja2VyIFVJXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnRlbXBsYXRlICE9PSAnc3RyaW5nJyAmJiAhKG9wdGlvbnMudGVtcGxhdGUgaW5zdGFuY2VvZiAkKSlcclxuICAgICAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9XHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXJhbmdlcGlja2VyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInJhbmdlc1wiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkcnAtY2FsZW5kYXIgbGVmdFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY2FsZW5kYXItdGFibGVcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImNhbGVuZGFyLXRpbWVcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZHJwLWNhbGVuZGFyIHJpZ2h0XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjYWxlbmRhci10YWJsZVwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY2FsZW5kYXItdGltZVwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkcnAtYnV0dG9uc1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImRycC1zZWxlY3RlZFwiPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImNhbmNlbEJ0blwiIHR5cGU9XCJidXR0b25cIj48L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImFwcGx5QnRuXCIgZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIHR5cGU9XCJidXR0b25cIj48L2J1dHRvbj4gJyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICB0aGlzLnBhcmVudEVsID0gKG9wdGlvbnMucGFyZW50RWwgJiYgJChvcHRpb25zLnBhcmVudEVsKS5sZW5ndGgpID8gJChvcHRpb25zLnBhcmVudEVsKSA6ICQodGhpcy5wYXJlbnRFbCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSAkKG9wdGlvbnMudGVtcGxhdGUpLmFwcGVuZFRvKHRoaXMucGFyZW50RWwpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGhhbmRsZSBhbGwgdGhlIHBvc3NpYmxlIG9wdGlvbnMgb3ZlcnJpZGluZyBkZWZhdWx0c1xyXG4gICAgICAgIC8vXHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2NhbGUgPT09ICdvYmplY3QnKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlLmRpcmVjdGlvbiA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZS5kaXJlY3Rpb24gPSBvcHRpb25zLmxvY2FsZS5kaXJlY3Rpb247XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlLmZvcm1hdCA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZS5mb3JtYXQgPSBvcHRpb25zLmxvY2FsZS5mb3JtYXQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlLnNlcGFyYXRvciA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZS5zZXBhcmF0b3IgPSBvcHRpb25zLmxvY2FsZS5zZXBhcmF0b3I7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlLmRheXNPZldlZWsgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGUuZGF5c09mV2VlayA9IG9wdGlvbnMubG9jYWxlLmRheXNPZldlZWsuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2NhbGUubW9udGhOYW1lcyA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgICAgdGhpcy5sb2NhbGUubW9udGhOYW1lcyA9IG9wdGlvbnMubG9jYWxlLm1vbnRoTmFtZXMuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2NhbGUuZmlyc3REYXkgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgIHRoaXMubG9jYWxlLmZpcnN0RGF5ID0gb3B0aW9ucy5sb2NhbGUuZmlyc3REYXk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlLmFwcGx5TGFiZWwgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgIHRoaXMubG9jYWxlLmFwcGx5TGFiZWwgPSBvcHRpb25zLmxvY2FsZS5hcHBseUxhYmVsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxvY2FsZS5jYW5jZWxMYWJlbCA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgdGhpcy5sb2NhbGUuY2FuY2VsTGFiZWwgPSBvcHRpb25zLmxvY2FsZS5jYW5jZWxMYWJlbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2NhbGUud2Vla0xhYmVsID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICB0aGlzLmxvY2FsZS53ZWVrTGFiZWwgPSBvcHRpb25zLmxvY2FsZS53ZWVrTGFiZWw7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlLmN1c3RvbVJhbmdlTGFiZWwgPT09ICdzdHJpbmcnKXtcclxuICAgICAgICAgICAgICAgIC8vU3VwcG9ydCB1bmljb2RlIGNoYXJzIGluIHRoZSBjdXN0b20gcmFuZ2UgbmFtZS5cclxuICAgICAgICAgICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uaW5uZXJIVE1MID0gb3B0aW9ucy5sb2NhbGUuY3VzdG9tUmFuZ2VMYWJlbDtcclxuICAgICAgICAgICAgICAgIHZhciByYW5nZUh0bWwgPSBlbGVtLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGUuY3VzdG9tUmFuZ2VMYWJlbCA9IHJhbmdlSHRtbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLmxvY2FsZS5kaXJlY3Rpb24pO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc3RhcnREYXRlID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgdGhpcy5zdGFydERhdGUgPSBtb21lbnQob3B0aW9ucy5zdGFydERhdGUsIHRoaXMubG9jYWxlLmZvcm1hdCk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5lbmREYXRlID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gbW9tZW50KG9wdGlvbnMuZW5kRGF0ZSwgdGhpcy5sb2NhbGUuZm9ybWF0KTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1pbkRhdGUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICB0aGlzLm1pbkRhdGUgPSBtb21lbnQob3B0aW9ucy5taW5EYXRlLCB0aGlzLmxvY2FsZS5mb3JtYXQpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubWF4RGF0ZSA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHRoaXMubWF4RGF0ZSA9IG1vbWVudChvcHRpb25zLm1heERhdGUsIHRoaXMubG9jYWxlLmZvcm1hdCk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zdGFydERhdGUgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IG1vbWVudChvcHRpb25zLnN0YXJ0RGF0ZSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5lbmREYXRlID09PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gbW9tZW50KG9wdGlvbnMuZW5kRGF0ZSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5taW5EYXRlID09PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgdGhpcy5taW5EYXRlID0gbW9tZW50KG9wdGlvbnMubWluRGF0ZSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhEYXRlID09PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgdGhpcy5tYXhEYXRlID0gbW9tZW50KG9wdGlvbnMubWF4RGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIHNhbml0eSBjaGVjayBmb3IgYmFkIG9wdGlvbnNcclxuICAgICAgICBpZiAodGhpcy5taW5EYXRlICYmIHRoaXMuc3RhcnREYXRlLmlzQmVmb3JlKHRoaXMubWluRGF0ZSkpXHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gdGhpcy5taW5EYXRlLmNsb25lKCk7XHJcblxyXG4gICAgICAgIC8vIHNhbml0eSBjaGVjayBmb3IgYmFkIG9wdGlvbnNcclxuICAgICAgICBpZiAodGhpcy5tYXhEYXRlICYmIHRoaXMuZW5kRGF0ZS5pc0FmdGVyKHRoaXMubWF4RGF0ZSkpXHJcbiAgICAgICAgICAgIHRoaXMuZW5kRGF0ZSA9IHRoaXMubWF4RGF0ZS5jbG9uZSgpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYXBwbHlCdXR0b25DbGFzc2VzID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgdGhpcy5hcHBseUJ1dHRvbkNsYXNzZXMgPSBvcHRpb25zLmFwcGx5QnV0dG9uQ2xhc3NlcztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmFwcGx5Q2xhc3MgPT09ICdzdHJpbmcnKSAvL2JhY2t3YXJkcyBjb21wYXRcclxuICAgICAgICAgICAgdGhpcy5hcHBseUJ1dHRvbkNsYXNzZXMgPSBvcHRpb25zLmFwcGx5Q2xhc3M7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jYW5jZWxCdXR0b25DbGFzc2VzID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxCdXR0b25DbGFzc2VzID0gb3B0aW9ucy5jYW5jZWxCdXR0b25DbGFzc2VzO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2FuY2VsQ2xhc3MgPT09ICdzdHJpbmcnKSAvL2JhY2t3YXJkcyBjb21wYXRcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxCdXR0b25DbGFzc2VzID0gb3B0aW9ucy5jYW5jZWxDbGFzcztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFNwYW4gPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICB0aGlzLm1heFNwYW4gPSBvcHRpb25zLm1heFNwYW47XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kYXRlTGltaXQgPT09ICdvYmplY3QnKSAvL2JhY2t3YXJkcyBjb21wYXRcclxuICAgICAgICAgICAgdGhpcy5tYXhTcGFuID0gb3B0aW9ucy5kYXRlTGltaXQ7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5vcGVucyA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHRoaXMub3BlbnMgPSBvcHRpb25zLm9wZW5zO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZHJvcHMgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICB0aGlzLmRyb3BzID0gb3B0aW9ucy5kcm9wcztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnNob3dXZWVrTnVtYmVycyA9PT0gJ2Jvb2xlYW4nKVxyXG4gICAgICAgICAgICB0aGlzLnNob3dXZWVrTnVtYmVycyA9IG9wdGlvbnMuc2hvd1dlZWtOdW1iZXJzO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2hvd0lTT1dlZWtOdW1iZXJzID09PSAnYm9vbGVhbicpXHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0lTT1dlZWtOdW1iZXJzID0gb3B0aW9ucy5zaG93SVNPV2Vla051bWJlcnM7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5idXR0b25DbGFzc2VzID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgdGhpcy5idXR0b25DbGFzc2VzID0gb3B0aW9ucy5idXR0b25DbGFzc2VzO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYnV0dG9uQ2xhc3NlcyA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uQ2xhc3NlcyA9IG9wdGlvbnMuYnV0dG9uQ2xhc3Nlcy5qb2luKCcgJyk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zaG93RHJvcGRvd25zID09PSAnYm9vbGVhbicpXHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0Ryb3Bkb3ducyA9IG9wdGlvbnMuc2hvd0Ryb3Bkb3ducztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1pblllYXIgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICB0aGlzLm1pblllYXIgPSBvcHRpb25zLm1pblllYXI7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhZZWFyID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgdGhpcy5tYXhZZWFyID0gb3B0aW9ucy5tYXhZZWFyO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2hvd0N1c3RvbVJhbmdlTGFiZWwgPT09ICdib29sZWFuJylcclxuICAgICAgICAgICAgdGhpcy5zaG93Q3VzdG9tUmFuZ2VMYWJlbCA9IG9wdGlvbnMuc2hvd0N1c3RvbVJhbmdlTGFiZWw7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGVEYXRlUGlja2VyID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgdGhpcy5zaW5nbGVEYXRlUGlja2VyID0gb3B0aW9ucy5zaW5nbGVEYXRlUGlja2VyO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaW5nbGVEYXRlUGlja2VyKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gdGhpcy5zdGFydERhdGUuY2xvbmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50aW1lUGlja2VyID09PSAnYm9vbGVhbicpXHJcbiAgICAgICAgICAgIHRoaXMudGltZVBpY2tlciA9IG9wdGlvbnMudGltZVBpY2tlcjtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnRpbWVQaWNrZXJTZWNvbmRzID09PSAnYm9vbGVhbicpXHJcbiAgICAgICAgICAgIHRoaXMudGltZVBpY2tlclNlY29uZHMgPSBvcHRpb25zLnRpbWVQaWNrZXJTZWNvbmRzO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMudGltZVBpY2tlckluY3JlbWVudCA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgIHRoaXMudGltZVBpY2tlckluY3JlbWVudCA9IG9wdGlvbnMudGltZVBpY2tlckluY3JlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnRpbWVQaWNrZXIyNEhvdXIgPT09ICdib29sZWFuJylcclxuICAgICAgICAgICAgdGhpcy50aW1lUGlja2VyMjRIb3VyID0gb3B0aW9ucy50aW1lUGlja2VyMjRIb3VyO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYXV0b0FwcGx5ID09PSAnYm9vbGVhbicpXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b0FwcGx5ID0gb3B0aW9ucy5hdXRvQXBwbHk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hdXRvVXBkYXRlSW5wdXQgPT09ICdib29sZWFuJylcclxuICAgICAgICAgICAgdGhpcy5hdXRvVXBkYXRlSW5wdXQgPSBvcHRpb25zLmF1dG9VcGRhdGVJbnB1dDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbmtlZENhbGVuZGFycyA9PT0gJ2Jvb2xlYW4nKVxyXG4gICAgICAgICAgICB0aGlzLmxpbmtlZENhbGVuZGFycyA9IG9wdGlvbnMubGlua2VkQ2FsZW5kYXJzO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuaXNJbnZhbGlkRGF0ZSA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgICAgdGhpcy5pc0ludmFsaWREYXRlID0gb3B0aW9ucy5pc0ludmFsaWREYXRlO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuaXNDdXN0b21EYXRlID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgICB0aGlzLmlzQ3VzdG9tRGF0ZSA9IG9wdGlvbnMuaXNDdXN0b21EYXRlO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWx3YXlzU2hvd0NhbGVuZGFycyA9PT0gJ2Jvb2xlYW4nKVxyXG4gICAgICAgICAgICB0aGlzLmFsd2F5c1Nob3dDYWxlbmRhcnMgPSBvcHRpb25zLmFsd2F5c1Nob3dDYWxlbmRhcnM7XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSBkYXkgbmFtZXMgb3JkZXIgdG8gZmlyc3REYXlcclxuICAgICAgICBpZiAodGhpcy5sb2NhbGUuZmlyc3REYXkgIT0gMCkge1xyXG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLmxvY2FsZS5maXJzdERheTtcclxuICAgICAgICAgICAgd2hpbGUgKGl0ZXJhdG9yID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGUuZGF5c09mV2Vlay5wdXNoKHRoaXMubG9jYWxlLmRheXNPZldlZWsuc2hpZnQoKSk7XHJcbiAgICAgICAgICAgICAgICBpdGVyYXRvci0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc3RhcnQsIGVuZCwgcmFuZ2U7XHJcblxyXG4gICAgICAgIC8vaWYgbm8gc3RhcnQvZW5kIGRhdGVzIHNldCwgY2hlY2sgaWYgYW4gaW5wdXQgZWxlbWVudCBjb250YWlucyBpbml0aWFsIHZhbHVlc1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zdGFydERhdGUgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRpb25zLmVuZERhdGUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuaXMoJzp0ZXh0JykpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSAkKHRoaXMuZWxlbWVudCkudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgc3BsaXQgPSB2YWwuc3BsaXQodGhpcy5sb2NhbGUuc2VwYXJhdG9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydCA9IGVuZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBtb21lbnQoc3BsaXRbMF0sIHRoaXMubG9jYWxlLmZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gbW9tZW50KHNwbGl0WzFdLCB0aGlzLmxvY2FsZS5mb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNpbmdsZURhdGVQaWNrZXIgJiYgdmFsICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBtb21lbnQodmFsLCB0aGlzLmxvY2FsZS5mb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IG1vbWVudCh2YWwsIHRoaXMubG9jYWxlLmZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQgIT09IG51bGwgJiYgZW5kICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydERhdGUoc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kRGF0ZShlbmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucmFuZ2VzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBmb3IgKHJhbmdlIGluIG9wdGlvbnMucmFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnJhbmdlc1tyYW5nZV1bMF0gPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gbW9tZW50KG9wdGlvbnMucmFuZ2VzW3JhbmdlXVswXSwgdGhpcy5sb2NhbGUuZm9ybWF0KTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG1vbWVudChvcHRpb25zLnJhbmdlc1tyYW5nZV1bMF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yYW5nZXNbcmFuZ2VdWzFdID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBtb21lbnQob3B0aW9ucy5yYW5nZXNbcmFuZ2VdWzFdLCB0aGlzLmxvY2FsZS5mb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IG1vbWVudChvcHRpb25zLnJhbmdlc1tyYW5nZV1bMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzdGFydCBvciBlbmQgZGF0ZSBleGNlZWQgdGhvc2UgYWxsb3dlZCBieSB0aGUgbWluRGF0ZSBvciBtYXhTcGFuXHJcbiAgICAgICAgICAgICAgICAvLyBvcHRpb25zLCBzaG9ydGVuIHRoZSByYW5nZSB0byB0aGUgYWxsb3dhYmxlIHBlcmlvZC5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pbkRhdGUgJiYgc3RhcnQuaXNCZWZvcmUodGhpcy5taW5EYXRlKSlcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMubWluRGF0ZS5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBtYXhEYXRlID0gdGhpcy5tYXhEYXRlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWF4U3BhbiAmJiBtYXhEYXRlICYmIHN0YXJ0LmNsb25lKCkuYWRkKHRoaXMubWF4U3BhbikuaXNBZnRlcihtYXhEYXRlKSlcclxuICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0gc3RhcnQuY2xvbmUoKS5hZGQodGhpcy5tYXhTcGFuKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXhEYXRlICYmIGVuZC5pc0FmdGVyKG1heERhdGUpKVxyXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IG1heERhdGUuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZW5kIG9mIHRoZSByYW5nZSBpcyBiZWZvcmUgdGhlIG1pbmltdW0gb3IgdGhlIHN0YXJ0IG9mIHRoZSByYW5nZSBpc1xyXG4gICAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIG1heGltdW0sIGRvbid0IGRpc3BsYXkgdGhpcyByYW5nZSBvcHRpb24gYXQgYWxsLlxyXG4gICAgICAgICAgICAgICAgaWYgKCh0aGlzLm1pbkRhdGUgJiYgZW5kLmlzQmVmb3JlKHRoaXMubWluRGF0ZSwgdGhpcy50aW1lcGlja2VyID8gJ21pbnV0ZScgOiAnZGF5JykpXHJcbiAgICAgICAgICAgICAgICAgIHx8IChtYXhEYXRlICYmIHN0YXJ0LmlzQWZ0ZXIobWF4RGF0ZSwgdGhpcy50aW1lcGlja2VyID8gJ21pbnV0ZScgOiAnZGF5JykpKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vU3VwcG9ydCB1bmljb2RlIGNoYXJzIGluIHRoZSByYW5nZSBuYW1lcy5cclxuICAgICAgICAgICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uaW5uZXJIVE1MID0gcmFuZ2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2VIdG1sID0gZWxlbS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhbmdlc1tyYW5nZUh0bWxdID0gW3N0YXJ0LCBlbmRdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbGlzdCA9ICc8dWw+JztcclxuICAgICAgICAgICAgZm9yIChyYW5nZSBpbiB0aGlzLnJhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgbGlzdCArPSAnPGxpIGRhdGEtcmFuZ2Uta2V5PVwiJyArIHJhbmdlICsgJ1wiPicgKyByYW5nZSArICc8L2xpPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0N1c3RvbVJhbmdlTGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGxpc3QgKz0gJzxsaSBkYXRhLXJhbmdlLWtleT1cIicgKyB0aGlzLmxvY2FsZS5jdXN0b21SYW5nZUxhYmVsICsgJ1wiPicgKyB0aGlzLmxvY2FsZS5jdXN0b21SYW5nZUxhYmVsICsgJzwvbGk+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsaXN0ICs9ICc8L3VsPic7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJy5yYW5nZXMnKS5wcmVwZW5kKGxpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMudGltZVBpY2tlcikge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IHRoaXMuc3RhcnREYXRlLnN0YXJ0T2YoJ2RheScpO1xyXG4gICAgICAgICAgICB0aGlzLmVuZERhdGUgPSB0aGlzLmVuZERhdGUuZW5kT2YoJ2RheScpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCcuY2FsZW5kYXItdGltZScpLmhpZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vY2FuJ3QgYmUgdXNlZCB0b2dldGhlciBmb3Igbm93XHJcbiAgICAgICAgaWYgKHRoaXMudGltZVBpY2tlciAmJiB0aGlzLmF1dG9BcHBseSlcclxuICAgICAgICAgICAgdGhpcy5hdXRvQXBwbHkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0FwcGx5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCdhdXRvLWFwcGx5Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucmFuZ2VzID09PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3MoJ3Nob3ctcmFuZ2VzJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNpbmdsZURhdGVQaWNrZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3MoJ3NpbmdsZScpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCcuZHJwLWNhbGVuZGFyLmxlZnQnKS5hZGRDbGFzcygnc2luZ2xlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJy5kcnAtY2FsZW5kYXIubGVmdCcpLnNob3coKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZmluZCgnLmRycC1jYWxlbmRhci5yaWdodCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnRpbWVQaWNrZXIgJiYgdGhpcy5hdXRvQXBwbHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCdhdXRvLWFwcGx5Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgodHlwZW9mIG9wdGlvbnMucmFuZ2VzID09PSAndW5kZWZpbmVkJyAmJiAhdGhpcy5zaW5nbGVEYXRlUGlja2VyKSB8fCB0aGlzLmFsd2F5c1Nob3dDYWxlbmRhcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3MoJ3Nob3ctY2FsZW5kYXInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCdvcGVucycgKyB0aGlzLm9wZW5zKTtcclxuXHJcbiAgICAgICAgLy9hcHBseSBDU1MgY2xhc3NlcyBhbmQgbGFiZWxzIHRvIGJ1dHRvbnNcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCcuYXBwbHlCdG4sIC5jYW5jZWxCdG4nKS5hZGRDbGFzcyh0aGlzLmJ1dHRvbkNsYXNzZXMpO1xyXG4gICAgICAgIGlmICh0aGlzLmFwcGx5QnV0dG9uQ2xhc3Nlcy5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJy5hcHBseUJ0bicpLmFkZENsYXNzKHRoaXMuYXBwbHlCdXR0b25DbGFzc2VzKTtcclxuICAgICAgICBpZiAodGhpcy5jYW5jZWxCdXR0b25DbGFzc2VzLmxlbmd0aClcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZmluZCgnLmNhbmNlbEJ0bicpLmFkZENsYXNzKHRoaXMuY2FuY2VsQnV0dG9uQ2xhc3Nlcyk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZmluZCgnLmFwcGx5QnRuJykuaHRtbCh0aGlzLmxvY2FsZS5hcHBseUxhYmVsKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCcuY2FuY2VsQnRuJykuaHRtbCh0aGlzLmxvY2FsZS5jYW5jZWxMYWJlbCk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgICAgLy9cclxuXHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZmluZCgnLmRycC1jYWxlbmRhcicpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2suZGF0ZXJhbmdlcGlja2VyJywgJy5wcmV2JywgJC5wcm94eSh0aGlzLmNsaWNrUHJldiwgdGhpcykpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2suZGF0ZXJhbmdlcGlja2VyJywgJy5uZXh0JywgJC5wcm94eSh0aGlzLmNsaWNrTmV4dCwgdGhpcykpXHJcbiAgICAgICAgICAgIC5vbignbW91c2Vkb3duLmRhdGVyYW5nZXBpY2tlcicsICd0ZC5hdmFpbGFibGUnLCAkLnByb3h5KHRoaXMuY2xpY2tEYXRlLCB0aGlzKSlcclxuICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyLmRhdGVyYW5nZXBpY2tlcicsICd0ZC5hdmFpbGFibGUnLCAkLnByb3h5KHRoaXMuaG92ZXJEYXRlLCB0aGlzKSlcclxuICAgICAgICAgICAgLm9uKCdjaGFuZ2UuZGF0ZXJhbmdlcGlja2VyJywgJ3NlbGVjdC55ZWFyc2VsZWN0JywgJC5wcm94eSh0aGlzLm1vbnRoT3JZZWFyQ2hhbmdlZCwgdGhpcykpXHJcbiAgICAgICAgICAgIC5vbignY2hhbmdlLmRhdGVyYW5nZXBpY2tlcicsICdzZWxlY3QubW9udGhzZWxlY3QnLCAkLnByb3h5KHRoaXMubW9udGhPclllYXJDaGFuZ2VkLCB0aGlzKSlcclxuICAgICAgICAgICAgLm9uKCdjaGFuZ2UuZGF0ZXJhbmdlcGlja2VyJywgJ3NlbGVjdC5ob3Vyc2VsZWN0LHNlbGVjdC5taW51dGVzZWxlY3Qsc2VsZWN0LnNlY29uZHNlbGVjdCxzZWxlY3QuYW1wbXNlbGVjdCcsICQucHJveHkodGhpcy50aW1lQ2hhbmdlZCwgdGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCcucmFuZ2VzJylcclxuICAgICAgICAgICAgLm9uKCdjbGljay5kYXRlcmFuZ2VwaWNrZXInLCAnbGknLCAkLnByb3h5KHRoaXMuY2xpY2tSYW5nZSwgdGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCcuZHJwLWJ1dHRvbnMnKVxyXG4gICAgICAgICAgICAub24oJ2NsaWNrLmRhdGVyYW5nZXBpY2tlcicsICdidXR0b24uYXBwbHlCdG4nLCAkLnByb3h5KHRoaXMuY2xpY2tBcHBseSwgdGhpcykpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2suZGF0ZXJhbmdlcGlja2VyJywgJ2J1dHRvbi5jYW5jZWxCdG4nLCAkLnByb3h5KHRoaXMuY2xpY2tDYW5jZWwsIHRoaXMpKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5pcygnaW5wdXQnKSB8fCB0aGlzLmVsZW1lbnQuaXMoJ2J1dHRvbicpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbih7XHJcbiAgICAgICAgICAgICAgICAnY2xpY2suZGF0ZXJhbmdlcGlja2VyJzogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgJ2ZvY3VzLmRhdGVyYW5nZXBpY2tlcic6ICQucHJveHkodGhpcy5zaG93LCB0aGlzKSxcclxuICAgICAgICAgICAgICAgICdrZXl1cC5kYXRlcmFuZ2VwaWNrZXInOiAkLnByb3h5KHRoaXMuZWxlbWVudENoYW5nZWQsIHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgJ2tleWRvd24uZGF0ZXJhbmdlcGlja2VyJzogJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpIC8vSUUgMTEgY29tcGF0aWJpbGl0eVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQub24oJ2NsaWNrLmRhdGVyYW5nZXBpY2tlcicsICQucHJveHkodGhpcy50b2dnbGUsIHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm9uKCdrZXlkb3duLmRhdGVyYW5nZXBpY2tlcicsICQucHJveHkodGhpcy50b2dnbGUsIHRoaXMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gaWYgYXR0YWNoZWQgdG8gYSB0ZXh0IGlucHV0LCBzZXQgdGhlIGluaXRpYWwgdmFsdWVcclxuICAgICAgICAvL1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIERhdGVSYW5nZVBpY2tlci5wcm90b3R5cGUgPSB7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yOiBEYXRlUmFuZ2VQaWNrZXIsXHJcblxyXG4gICAgICAgIHNldFN0YXJ0RGF0ZTogZnVuY3Rpb24oc3RhcnREYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhcnREYXRlID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gbW9tZW50KHN0YXJ0RGF0ZSwgdGhpcy5sb2NhbGUuZm9ybWF0KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhcnREYXRlID09PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gbW9tZW50KHN0YXJ0RGF0ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMudGltZVBpY2tlcilcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gdGhpcy5zdGFydERhdGUuc3RhcnRPZignZGF5Jyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lUGlja2VyICYmIHRoaXMudGltZVBpY2tlckluY3JlbWVudClcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlLm1pbnV0ZShNYXRoLnJvdW5kKHRoaXMuc3RhcnREYXRlLm1pbnV0ZSgpIC8gdGhpcy50aW1lUGlja2VySW5jcmVtZW50KSAqIHRoaXMudGltZVBpY2tlckluY3JlbWVudCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5taW5EYXRlICYmIHRoaXMuc3RhcnREYXRlLmlzQmVmb3JlKHRoaXMubWluRGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gdGhpcy5taW5EYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lUGlja2VyICYmIHRoaXMudGltZVBpY2tlckluY3JlbWVudClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0RGF0ZS5taW51dGUoTWF0aC5yb3VuZCh0aGlzLnN0YXJ0RGF0ZS5taW51dGUoKSAvIHRoaXMudGltZVBpY2tlckluY3JlbWVudCkgKiB0aGlzLnRpbWVQaWNrZXJJbmNyZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXhEYXRlICYmIHRoaXMuc3RhcnREYXRlLmlzQWZ0ZXIodGhpcy5tYXhEYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydERhdGUgPSB0aGlzLm1heERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVQaWNrZXIgJiYgdGhpcy50aW1lUGlja2VySW5jcmVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlLm1pbnV0ZShNYXRoLmZsb29yKHRoaXMuc3RhcnREYXRlLm1pbnV0ZSgpIC8gdGhpcy50aW1lUGlja2VySW5jcmVtZW50KSAqIHRoaXMudGltZVBpY2tlckluY3JlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Nob3dpbmcpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTW9udGhzSW5WaWV3KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0RW5kRGF0ZTogZnVuY3Rpb24oZW5kRGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZERhdGUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gbW9tZW50KGVuZERhdGUsIHRoaXMubG9jYWxlLmZvcm1hdCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZERhdGUgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gbW9tZW50KGVuZERhdGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnRpbWVQaWNrZXIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSB0aGlzLmVuZERhdGUuZW5kT2YoJ2RheScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudGltZVBpY2tlciAmJiB0aGlzLnRpbWVQaWNrZXJJbmNyZW1lbnQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUubWludXRlKE1hdGgucm91bmQodGhpcy5lbmREYXRlLm1pbnV0ZSgpIC8gdGhpcy50aW1lUGlja2VySW5jcmVtZW50KSAqIHRoaXMudGltZVBpY2tlckluY3JlbWVudCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbmREYXRlLmlzQmVmb3JlKHRoaXMuc3RhcnREYXRlKSlcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kRGF0ZSA9IHRoaXMuc3RhcnREYXRlLmNsb25lKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXhEYXRlICYmIHRoaXMuZW5kRGF0ZS5pc0FmdGVyKHRoaXMubWF4RGF0ZSkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSB0aGlzLm1heERhdGUuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1heFNwYW4gJiYgdGhpcy5zdGFydERhdGUuY2xvbmUoKS5hZGQodGhpcy5tYXhTcGFuKS5pc0JlZm9yZSh0aGlzLmVuZERhdGUpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gdGhpcy5zdGFydERhdGUuY2xvbmUoKS5hZGQodGhpcy5tYXhTcGFuKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNSaWdodFRpbWUgPSB0aGlzLmVuZERhdGUuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJy5kcnAtc2VsZWN0ZWQnKS5odG1sKHRoaXMuc3RhcnREYXRlLmZvcm1hdCh0aGlzLmxvY2FsZS5mb3JtYXQpICsgdGhpcy5sb2NhbGUuc2VwYXJhdG9yICsgdGhpcy5lbmREYXRlLmZvcm1hdCh0aGlzLmxvY2FsZS5mb3JtYXQpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Nob3dpbmcpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTW9udGhzSW5WaWV3KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNJbnZhbGlkRGF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0N1c3RvbURhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlVmlldzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVQaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyVGltZVBpY2tlcignbGVmdCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJUaW1lUGlja2VyKCdyaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmVuZERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCcucmlnaHQgLmNhbGVuZGFyLXRpbWUgc2VsZWN0JykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZmluZCgnLnJpZ2h0IC5jYWxlbmRhci10aW1lIHNlbGVjdCcpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCcuZHJwLXNlbGVjdGVkJykuaHRtbCh0aGlzLnN0YXJ0RGF0ZS5mb3JtYXQodGhpcy5sb2NhbGUuZm9ybWF0KSArIHRoaXMubG9jYWxlLnNlcGFyYXRvciArIHRoaXMuZW5kRGF0ZS5mb3JtYXQodGhpcy5sb2NhbGUuZm9ybWF0KSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTW9udGhzSW5WaWV3KCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJzKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRm9ybUlucHV0cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZU1vbnRoc0luVmlldzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2lmIGJvdGggZGF0ZXMgYXJlIHZpc2libGUgYWxyZWFkeSwgZG8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNpbmdsZURhdGVQaWNrZXIgJiYgdGhpcy5sZWZ0Q2FsZW5kYXIubW9udGggJiYgdGhpcy5yaWdodENhbGVuZGFyLm1vbnRoICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuc3RhcnREYXRlLmZvcm1hdCgnWVlZWS1NTScpID09IHRoaXMubGVmdENhbGVuZGFyLm1vbnRoLmZvcm1hdCgnWVlZWS1NTScpIHx8IHRoaXMuc3RhcnREYXRlLmZvcm1hdCgnWVlZWS1NTScpID09IHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5mb3JtYXQoJ1lZWVktTU0nKSlcclxuICAgICAgICAgICAgICAgICAgICAmJlxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmVuZERhdGUuZm9ybWF0KCdZWVlZLU1NJykgPT0gdGhpcy5sZWZ0Q2FsZW5kYXIubW9udGguZm9ybWF0KCdZWVlZLU1NJykgfHwgdGhpcy5lbmREYXRlLmZvcm1hdCgnWVlZWS1NTScpID09IHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5mb3JtYXQoJ1lZWVktTU0nKSlcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0Q2FsZW5kYXIubW9udGggPSB0aGlzLnN0YXJ0RGF0ZS5jbG9uZSgpLmRhdGUoMik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubGlua2VkQ2FsZW5kYXJzICYmICh0aGlzLmVuZERhdGUubW9udGgoKSAhPSB0aGlzLnN0YXJ0RGF0ZS5tb250aCgpIHx8IHRoaXMuZW5kRGF0ZS55ZWFyKCkgIT0gdGhpcy5zdGFydERhdGUueWVhcigpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aCA9IHRoaXMuZW5kRGF0ZS5jbG9uZSgpLmRhdGUoMik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aCA9IHRoaXMuc3RhcnREYXRlLmNsb25lKCkuZGF0ZSgyKS5hZGQoMSwgJ21vbnRoJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdENhbGVuZGFyLm1vbnRoLmZvcm1hdCgnWVlZWS1NTScpICE9IHRoaXMuc3RhcnREYXRlLmZvcm1hdCgnWVlZWS1NTScpICYmIHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5mb3JtYXQoJ1lZWVktTU0nKSAhPSB0aGlzLnN0YXJ0RGF0ZS5mb3JtYXQoJ1lZWVktTU0nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdENhbGVuZGFyLm1vbnRoID0gdGhpcy5zdGFydERhdGUuY2xvbmUoKS5kYXRlKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aCA9IHRoaXMuc3RhcnREYXRlLmNsb25lKCkuZGF0ZSgyKS5hZGQoMSwgJ21vbnRoJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubWF4RGF0ZSAmJiB0aGlzLmxpbmtlZENhbGVuZGFycyAmJiAhdGhpcy5zaW5nbGVEYXRlUGlja2VyICYmIHRoaXMucmlnaHRDYWxlbmRhci5tb250aCA+IHRoaXMubWF4RGF0ZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aCA9IHRoaXMubWF4RGF0ZS5jbG9uZSgpLmRhdGUoMik7XHJcbiAgICAgICAgICAgICAgdGhpcy5sZWZ0Q2FsZW5kYXIubW9udGggPSB0aGlzLm1heERhdGUuY2xvbmUoKS5kYXRlKDIpLnN1YnRyYWN0KDEsICdtb250aCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlQ2FsZW5kYXJzOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVQaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBob3VyLCBtaW51dGUsIHNlY29uZDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBob3VyID0gcGFyc2VJbnQodGhpcy5jb250YWluZXIuZmluZCgnLmxlZnQgLmhvdXJzZWxlY3QnKS52YWwoKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZSA9IHBhcnNlSW50KHRoaXMuY29udGFpbmVyLmZpbmQoJy5sZWZ0IC5taW51dGVzZWxlY3QnKS52YWwoKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihtaW51dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZSA9IHBhcnNlSW50KHRoaXMuY29udGFpbmVyLmZpbmQoJy5sZWZ0IC5taW51dGVzZWxlY3Qgb3B0aW9uOmxhc3QnKS52YWwoKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzZWNvbmQgPSB0aGlzLnRpbWVQaWNrZXJTZWNvbmRzID8gcGFyc2VJbnQodGhpcy5jb250YWluZXIuZmluZCgnLmxlZnQgLnNlY29uZHNlbGVjdCcpLnZhbCgpLCAxMCkgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50aW1lUGlja2VyMjRIb3VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbXBtID0gdGhpcy5jb250YWluZXIuZmluZCgnLmxlZnQgLmFtcG1zZWxlY3QnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFtcG0gPT09ICdQTScgJiYgaG91ciA8IDEyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91ciArPSAxMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFtcG0gPT09ICdBTScgJiYgaG91ciA9PT0gMTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvdXIgPSBwYXJzZUludCh0aGlzLmNvbnRhaW5lci5maW5kKCcucmlnaHQgLmhvdXJzZWxlY3QnKS52YWwoKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZSA9IHBhcnNlSW50KHRoaXMuY29udGFpbmVyLmZpbmQoJy5yaWdodCAubWludXRlc2VsZWN0JykudmFsKCksIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4obWludXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW51dGUgPSBwYXJzZUludCh0aGlzLmNvbnRhaW5lci5maW5kKCcucmlnaHQgLm1pbnV0ZXNlbGVjdCBvcHRpb246bGFzdCcpLnZhbCgpLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZCA9IHRoaXMudGltZVBpY2tlclNlY29uZHMgPyBwYXJzZUludCh0aGlzLmNvbnRhaW5lci5maW5kKCcucmlnaHQgLnNlY29uZHNlbGVjdCcpLnZhbCgpLCAxMCkgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50aW1lUGlja2VyMjRIb3VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbXBtID0gdGhpcy5jb250YWluZXIuZmluZCgnLnJpZ2h0IC5hbXBtc2VsZWN0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbXBtID09PSAnUE0nICYmIGhvdXIgPCAxMilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbXBtID09PSAnQU0nICYmIGhvdXIgPT09IDEyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91ciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0Q2FsZW5kYXIubW9udGguaG91cihob3VyKS5taW51dGUobWludXRlKS5zZWNvbmQoc2Vjb25kKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5ob3VyKGhvdXIpLm1pbnV0ZShtaW51dGUpLnNlY29uZChzZWNvbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlckNhbGVuZGFyKCdsZWZ0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQ2FsZW5kYXIoJ3JpZ2h0Jyk7XHJcblxyXG4gICAgICAgICAgICAvL2hpZ2hsaWdodCBhbnkgcHJlZGVmaW5lZCByYW5nZSBtYXRjaGluZyB0aGUgY3VycmVudCBzdGFydCBhbmQgZW5kIGRhdGVzXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJy5yYW5nZXMgbGknKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVDaG9zZW5MYWJlbCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbmRlckNhbGVuZGFyOiBmdW5jdGlvbihzaWRlKSB7XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAvLyBCdWlsZCB0aGUgbWF0cml4IG9mIGRhdGVzIHRoYXQgd2lsbCBwb3B1bGF0ZSB0aGUgY2FsZW5kYXJcclxuICAgICAgICAgICAgLy9cclxuXHJcbiAgICAgICAgICAgIHZhciBjYWxlbmRhciA9IHNpZGUgPT0gJ2xlZnQnID8gdGhpcy5sZWZ0Q2FsZW5kYXIgOiB0aGlzLnJpZ2h0Q2FsZW5kYXI7XHJcbiAgICAgICAgICAgIHZhciBtb250aCA9IGNhbGVuZGFyLm1vbnRoLm1vbnRoKCk7XHJcbiAgICAgICAgICAgIHZhciB5ZWFyID0gY2FsZW5kYXIubW9udGgueWVhcigpO1xyXG4gICAgICAgICAgICB2YXIgaG91ciA9IGNhbGVuZGFyLm1vbnRoLmhvdXIoKTtcclxuICAgICAgICAgICAgdmFyIG1pbnV0ZSA9IGNhbGVuZGFyLm1vbnRoLm1pbnV0ZSgpO1xyXG4gICAgICAgICAgICB2YXIgc2Vjb25kID0gY2FsZW5kYXIubW9udGguc2Vjb25kKCk7XHJcbiAgICAgICAgICAgIHZhciBkYXlzSW5Nb250aCA9IG1vbWVudChbeWVhciwgbW9udGhdKS5kYXlzSW5Nb250aCgpO1xyXG4gICAgICAgICAgICB2YXIgZmlyc3REYXkgPSBtb21lbnQoW3llYXIsIG1vbnRoLCAxXSk7XHJcbiAgICAgICAgICAgIHZhciBsYXN0RGF5ID0gbW9tZW50KFt5ZWFyLCBtb250aCwgZGF5c0luTW9udGhdKTtcclxuICAgICAgICAgICAgdmFyIGxhc3RNb250aCA9IG1vbWVudChmaXJzdERheSkuc3VidHJhY3QoMSwgJ21vbnRoJykubW9udGgoKTtcclxuICAgICAgICAgICAgdmFyIGxhc3RZZWFyID0gbW9tZW50KGZpcnN0RGF5KS5zdWJ0cmFjdCgxLCAnbW9udGgnKS55ZWFyKCk7XHJcbiAgICAgICAgICAgIHZhciBkYXlzSW5MYXN0TW9udGggPSBtb21lbnQoW2xhc3RZZWFyLCBsYXN0TW9udGhdKS5kYXlzSW5Nb250aCgpO1xyXG4gICAgICAgICAgICB2YXIgZGF5T2ZXZWVrID0gZmlyc3REYXkuZGF5KCk7XHJcblxyXG4gICAgICAgICAgICAvL2luaXRpYWxpemUgYSA2IHJvd3MgeCA3IGNvbHVtbnMgYXJyYXkgZm9yIHRoZSBjYWxlbmRhclxyXG4gICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSBbXTtcclxuICAgICAgICAgICAgY2FsZW5kYXIuZmlyc3REYXkgPSBmaXJzdERheTtcclxuICAgICAgICAgICAgY2FsZW5kYXIubGFzdERheSA9IGxhc3REYXk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY2FsZW5kYXJbaV0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9wb3B1bGF0ZSB0aGUgY2FsZW5kYXIgd2l0aCBkYXRlIG9iamVjdHNcclxuICAgICAgICAgICAgdmFyIHN0YXJ0RGF5ID0gZGF5c0luTGFzdE1vbnRoIC0gZGF5T2ZXZWVrICsgdGhpcy5sb2NhbGUuZmlyc3REYXkgKyAxO1xyXG4gICAgICAgICAgICBpZiAoc3RhcnREYXkgPiBkYXlzSW5MYXN0TW9udGgpXHJcbiAgICAgICAgICAgICAgICBzdGFydERheSAtPSA3O1xyXG5cclxuICAgICAgICAgICAgaWYgKGRheU9mV2VlayA9PSB0aGlzLmxvY2FsZS5maXJzdERheSlcclxuICAgICAgICAgICAgICAgIHN0YXJ0RGF5ID0gZGF5c0luTGFzdE1vbnRoIC0gNjtcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJEYXRlID0gbW9tZW50KFtsYXN0WWVhciwgbGFzdE1vbnRoLCBzdGFydERheSwgMTIsIG1pbnV0ZSwgc2Vjb25kXSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY29sLCByb3c7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjb2wgPSAwLCByb3cgPSAwOyBpIDwgNDI7IGkrKywgY29sKyssIGN1ckRhdGUgPSBtb21lbnQoY3VyRGF0ZSkuYWRkKDI0LCAnaG91cicpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgY29sICUgNyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWxlbmRhcltyb3ddW2NvbF0gPSBjdXJEYXRlLmNsb25lKCkuaG91cihob3VyKS5taW51dGUobWludXRlKS5zZWNvbmQoc2Vjb25kKTtcclxuICAgICAgICAgICAgICAgIGN1ckRhdGUuaG91cigxMik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWluRGF0ZSAmJiBjYWxlbmRhcltyb3ddW2NvbF0uZm9ybWF0KCdZWVlZLU1NLUREJykgPT0gdGhpcy5taW5EYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpICYmIGNhbGVuZGFyW3Jvd11bY29sXS5pc0JlZm9yZSh0aGlzLm1pbkRhdGUpICYmIHNpZGUgPT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJbcm93XVtjb2xdID0gdGhpcy5taW5EYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWF4RGF0ZSAmJiBjYWxlbmRhcltyb3ddW2NvbF0uZm9ybWF0KCdZWVlZLU1NLUREJykgPT0gdGhpcy5tYXhEYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpICYmIGNhbGVuZGFyW3Jvd11bY29sXS5pc0FmdGVyKHRoaXMubWF4RGF0ZSkgJiYgc2lkZSA9PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJbcm93XVtjb2xdID0gdGhpcy5tYXhEYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL21ha2UgdGhlIGNhbGVuZGFyIG9iamVjdCBhdmFpbGFibGUgdG8gaG92ZXJEYXRlL2NsaWNrRGF0ZVxyXG4gICAgICAgICAgICBpZiAoc2lkZSA9PSAnbGVmdCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdENhbGVuZGFyLmNhbGVuZGFyID0gY2FsZW5kYXI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0Q2FsZW5kYXIuY2FsZW5kYXIgPSBjYWxlbmRhcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgLy8gRGlzcGxheSB0aGUgY2FsZW5kYXJcclxuICAgICAgICAgICAgLy9cclxuXHJcbiAgICAgICAgICAgIHZhciBtaW5EYXRlID0gc2lkZSA9PSAnbGVmdCcgPyB0aGlzLm1pbkRhdGUgOiB0aGlzLnN0YXJ0RGF0ZTtcclxuICAgICAgICAgICAgdmFyIG1heERhdGUgPSB0aGlzLm1heERhdGU7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHNpZGUgPT0gJ2xlZnQnID8gdGhpcy5zdGFydERhdGUgOiB0aGlzLmVuZERhdGU7XHJcbiAgICAgICAgICAgIHZhciBhcnJvdyA9IHRoaXMubG9jYWxlLmRpcmVjdGlvbiA9PSAnbHRyJyA/IHtsZWZ0OiAnY2hldnJvbi1sZWZ0JywgcmlnaHQ6ICdjaGV2cm9uLXJpZ2h0J30gOiB7bGVmdDogJ2NoZXZyb24tcmlnaHQnLCByaWdodDogJ2NoZXZyb24tbGVmdCd9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGh0bWwgPSAnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+JztcclxuICAgICAgICAgICAgaHRtbCArPSAnPHRoZWFkPic7XHJcbiAgICAgICAgICAgIGh0bWwgKz0gJzx0cj4nO1xyXG5cclxuICAgICAgICAgICAgLy8gYWRkIGVtcHR5IGNlbGwgZm9yIHdlZWsgbnVtYmVyXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dXZWVrTnVtYmVycyB8fCB0aGlzLnNob3dJU09XZWVrTnVtYmVycylcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzx0aD48L3RoPic7XHJcblxyXG4gICAgICAgICAgICBpZiAoKCFtaW5EYXRlIHx8IG1pbkRhdGUuaXNCZWZvcmUoY2FsZW5kYXIuZmlyc3REYXkpKSAmJiAoIXRoaXMubGlua2VkQ2FsZW5kYXJzIHx8IHNpZGUgPT0gJ2xlZnQnKSkge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPHRoIGNsYXNzPVwicHJldiBhdmFpbGFibGVcIj48c3Bhbj48L3NwYW4+PC90aD4nO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPHRoPjwvdGg+JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGRhdGVIdG1sID0gdGhpcy5sb2NhbGUubW9udGhOYW1lc1tjYWxlbmRhclsxXVsxXS5tb250aCgpXSArIGNhbGVuZGFyWzFdWzFdLmZvcm1hdChcIiBZWVlZXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0Ryb3Bkb3ducykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRNb250aCA9IGNhbGVuZGFyWzFdWzFdLm1vbnRoKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFllYXIgPSBjYWxlbmRhclsxXVsxXS55ZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWF4WWVhciA9IChtYXhEYXRlICYmIG1heERhdGUueWVhcigpKSB8fCAodGhpcy5tYXhZZWFyKTtcclxuICAgICAgICAgICAgICAgIHZhciBtaW5ZZWFyID0gKG1pbkRhdGUgJiYgbWluRGF0ZS55ZWFyKCkpIHx8ICh0aGlzLm1pblllYXIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluTWluWWVhciA9IGN1cnJlbnRZZWFyID09IG1pblllYXI7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5NYXhZZWFyID0gY3VycmVudFllYXIgPT0gbWF4WWVhcjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGhIdG1sID0gJzxzZWxlY3QgY2xhc3M9XCJtb250aHNlbGVjdFwiPic7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IDEyOyBtKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKCFpbk1pblllYXIgfHwgKG1pbkRhdGUgJiYgbSA+PSBtaW5EYXRlLm1vbnRoKCkpKSAmJiAoIWluTWF4WWVhciB8fCAobWF4RGF0ZSAmJiBtIDw9IG1heERhdGUubW9udGgoKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoSHRtbCArPSBcIjxvcHRpb24gdmFsdWU9J1wiICsgbSArIFwiJ1wiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtID09PSBjdXJyZW50TW9udGggPyBcIiBzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgOiBcIlwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIj5cIiArIHRoaXMubG9jYWxlLm1vbnRoTmFtZXNbbV0gKyBcIjwvb3B0aW9uPlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoSHRtbCArPSBcIjxvcHRpb24gdmFsdWU9J1wiICsgbSArIFwiJ1wiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtID09PSBjdXJyZW50TW9udGggPyBcIiBzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgOiBcIlwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBkaXNhYmxlZD0nZGlzYWJsZWQnPlwiICsgdGhpcy5sb2NhbGUubW9udGhOYW1lc1ttXSArIFwiPC9vcHRpb24+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbW9udGhIdG1sICs9IFwiPC9zZWxlY3Q+XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHllYXJIdG1sID0gJzxzZWxlY3QgY2xhc3M9XCJ5ZWFyc2VsZWN0XCI+JztcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSBtaW5ZZWFyOyB5IDw9IG1heFllYXI7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHllYXJIdG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIHkgKyAnXCInICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHkgPT09IGN1cnJlbnRZZWFyID8gJyBzZWxlY3RlZD1cInNlbGVjdGVkXCInIDogJycpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJz4nICsgeSArICc8L29wdGlvbj4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgeWVhckh0bWwgKz0gJzwvc2VsZWN0Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0ZUh0bWwgPSBtb250aEh0bWwgKyB5ZWFySHRtbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaHRtbCArPSAnPHRoIGNvbHNwYW49XCI1XCIgY2xhc3M9XCJtb250aFwiPicgKyBkYXRlSHRtbCArICc8L3RoPic7XHJcbiAgICAgICAgICAgIGlmICgoIW1heERhdGUgfHwgbWF4RGF0ZS5pc0FmdGVyKGNhbGVuZGFyLmxhc3REYXkpKSAmJiAoIXRoaXMubGlua2VkQ2FsZW5kYXJzIHx8IHNpZGUgPT0gJ3JpZ2h0JyB8fCB0aGlzLnNpbmdsZURhdGVQaWNrZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8dGggY2xhc3M9XCJuZXh0IGF2YWlsYWJsZVwiPjxzcGFuPjwvc3Bhbj48L3RoPic7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8dGg+PC90aD4nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sICs9ICc8L3RyPic7XHJcbiAgICAgICAgICAgIGh0bWwgKz0gJzx0cj4nO1xyXG5cclxuICAgICAgICAgICAgLy8gYWRkIHdlZWsgbnVtYmVyIGxhYmVsXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dXZWVrTnVtYmVycyB8fCB0aGlzLnNob3dJU09XZWVrTnVtYmVycylcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzx0aCBjbGFzcz1cIndlZWtcIj4nICsgdGhpcy5sb2NhbGUud2Vla0xhYmVsICsgJzwvdGg+JztcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLmxvY2FsZS5kYXlzT2ZXZWVrLCBmdW5jdGlvbihpbmRleCwgZGF5T2ZXZWVrKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8dGg+JyArIGRheU9mV2VlayArICc8L3RoPic7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaHRtbCArPSAnPC90cj4nO1xyXG4gICAgICAgICAgICBodG1sICs9ICc8L3RoZWFkPic7XHJcbiAgICAgICAgICAgIGh0bWwgKz0gJzx0Ym9keT4nO1xyXG5cclxuICAgICAgICAgICAgLy9hZGp1c3QgbWF4RGF0ZSB0byByZWZsZWN0IHRoZSBtYXhTcGFuIHNldHRpbmcgaW4gb3JkZXIgdG9cclxuICAgICAgICAgICAgLy9ncmV5IG91dCBlbmQgZGF0ZXMgYmV5b25kIHRoZSBtYXhTcGFuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgPT0gbnVsbCAmJiB0aGlzLm1heFNwYW4pIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXhMaW1pdCA9IHRoaXMuc3RhcnREYXRlLmNsb25lKCkuYWRkKHRoaXMubWF4U3BhbikuZW5kT2YoJ2RheScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXhEYXRlIHx8IG1heExpbWl0LmlzQmVmb3JlKG1heERhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4RGF0ZSA9IG1heExpbWl0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCA2OyByb3crKykge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPHRyPic7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYWRkIHdlZWsgbnVtYmVyXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93V2Vla051bWJlcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPHRkIGNsYXNzPVwid2Vla1wiPicgKyBjYWxlbmRhcltyb3ddWzBdLndlZWsoKSArICc8L3RkPic7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNob3dJU09XZWVrTnVtYmVycylcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8dGQgY2xhc3M9XCJ3ZWVrXCI+JyArIGNhbGVuZGFyW3Jvd11bMF0uaXNvV2VlaygpICsgJzwvdGQ+JztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCA3OyBjb2wrKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2hpZ2hsaWdodCB0b2RheSdzIGRhdGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsZW5kYXJbcm93XVtjb2xdLmlzU2FtZShuZXcgRGF0ZSgpLCBcImRheVwiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCd0b2RheScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2hpZ2hsaWdodCB3ZWVrZW5kc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxlbmRhcltyb3ddW2NvbF0uaXNvV2Vla2RheSgpID4gNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCd3ZWVrZW5kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ3JleSBvdXQgdGhlIGRhdGVzIGluIG90aGVyIG1vbnRocyBkaXNwbGF5ZWQgYXQgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhpcyBjYWxlbmRhclxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxlbmRhcltyb3ddW2NvbF0ubW9udGgoKSAhPSBjYWxlbmRhclsxXVsxXS5tb250aCgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ29mZicsICdlbmRzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZG9uJ3QgYWxsb3cgc2VsZWN0aW9uIG9mIGRhdGVzIGJlZm9yZSB0aGUgbWluaW11bSBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWluRGF0ZSAmJiBjYWxlbmRhcltyb3ddW2NvbF0uaXNCZWZvcmUodGhpcy5taW5EYXRlLCAnZGF5JykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnb2ZmJywgJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZG9uJ3QgYWxsb3cgc2VsZWN0aW9uIG9mIGRhdGVzIGFmdGVyIHRoZSBtYXhpbXVtIGRhdGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF4RGF0ZSAmJiBjYWxlbmRhcltyb3ddW2NvbF0uaXNBZnRlcihtYXhEYXRlLCAnZGF5JykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnb2ZmJywgJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZG9uJ3QgYWxsb3cgc2VsZWN0aW9uIG9mIGRhdGUgaWYgYSBjdXN0b20gZnVuY3Rpb24gZGVjaWRlcyBpdCdzIGludmFsaWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0ludmFsaWREYXRlKGNhbGVuZGFyW3Jvd11bY29sXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnb2ZmJywgJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vaGlnaGxpZ2h0IHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxlbmRhcltyb3ddW2NvbF0uZm9ybWF0KCdZWVlZLU1NLUREJykgPT0gdGhpcy5zdGFydERhdGUuZm9ybWF0KCdZWVlZLU1NLUREJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnYWN0aXZlJywgJ3N0YXJ0LWRhdGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9oaWdobGlnaHQgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbmQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgIT0gbnVsbCAmJiBjYWxlbmRhcltyb3ddW2NvbF0uZm9ybWF0KCdZWVlZLU1NLUREJykgPT0gdGhpcy5lbmREYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2FjdGl2ZScsICdlbmQtZGF0ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2hpZ2hsaWdodCBkYXRlcyBpbi1iZXR3ZWVuIHRoZSBzZWxlY3RlZCBkYXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgIT0gbnVsbCAmJiBjYWxlbmRhcltyb3ddW2NvbF0gPiB0aGlzLnN0YXJ0RGF0ZSAmJiBjYWxlbmRhcltyb3ddW2NvbF0gPCB0aGlzLmVuZERhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnaW4tcmFuZ2UnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9hcHBseSBjdXN0b20gY2xhc3NlcyBmb3IgdGhpcyBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ3VzdG9tID0gdGhpcy5pc0N1c3RvbURhdGUoY2FsZW5kYXJbcm93XVtjb2xdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDdXN0b20gIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXNDdXN0b20gPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKGlzQ3VzdG9tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY2xhc3NlcywgaXNDdXN0b20pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNuYW1lID0gJycsIGRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNuYW1lICs9IGNsYXNzZXNbaV0gKyAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc2VzW2ldID09ICdkaXNhYmxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzYWJsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNuYW1lICs9ICdhdmFpbGFibGUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8dGQgY2xhc3M9XCInICsgY25hbWUucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpICsgJ1wiIGRhdGEtdGl0bGU9XCInICsgJ3InICsgcm93ICsgJ2MnICsgY29sICsgJ1wiPicgKyBjYWxlbmRhcltyb3ddW2NvbF0uZGF0ZSgpICsgJzwvdGQ+JztcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8L3RyPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGh0bWwgKz0gJzwvdGJvZHk+JztcclxuICAgICAgICAgICAgaHRtbCArPSAnPC90YWJsZT4nO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZmluZCgnLmRycC1jYWxlbmRhci4nICsgc2lkZSArICcgLmNhbGVuZGFyLXRhYmxlJykuaHRtbChodG1sKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVuZGVyVGltZVBpY2tlcjogZnVuY3Rpb24oc2lkZSkge1xyXG5cclxuICAgICAgICAgICAgLy8gRG9uJ3QgYm90aGVyIHVwZGF0aW5nIHRoZSB0aW1lIHBpY2tlciBpZiBpdCdzIGN1cnJlbnRseSBkaXNhYmxlZFxyXG4gICAgICAgICAgICAvLyBiZWNhdXNlIGFuIGVuZCBkYXRlIGhhc24ndCBiZWVuIGNsaWNrZWQgeWV0XHJcbiAgICAgICAgICAgIGlmIChzaWRlID09ICdyaWdodCcgJiYgIXRoaXMuZW5kRGF0ZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIGh0bWwsIHNlbGVjdGVkLCBtaW5EYXRlLCBtYXhEYXRlID0gdGhpcy5tYXhEYXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWF4U3BhbiAmJiAoIXRoaXMubWF4RGF0ZSB8fCB0aGlzLnN0YXJ0RGF0ZS5jbG9uZSgpLmFkZCh0aGlzLm1heFNwYW4pLmlzQmVmb3JlKHRoaXMubWF4RGF0ZSkpKVxyXG4gICAgICAgICAgICAgICAgbWF4RGF0ZSA9IHRoaXMuc3RhcnREYXRlLmNsb25lKCkuYWRkKHRoaXMubWF4U3Bhbik7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2lkZSA9PSAnbGVmdCcpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gdGhpcy5zdGFydERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIG1pbkRhdGUgPSB0aGlzLm1pbkRhdGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2lkZSA9PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRoaXMuZW5kRGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgbWluRGF0ZSA9IHRoaXMuc3RhcnREYXRlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vUHJlc2VydmUgdGhlIHRpbWUgYWxyZWFkeSBzZWxlY3RlZFxyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVTZWxlY3RvciA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy5kcnAtY2FsZW5kYXIucmlnaHQgLmNhbGVuZGFyLXRpbWUnKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lU2VsZWN0b3IuaHRtbCgpICE9ICcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLmhvdXIoIWlzTmFOKHNlbGVjdGVkLmhvdXIoKSkgPyBzZWxlY3RlZC5ob3VyKCkgOiB0aW1lU2VsZWN0b3IuZmluZCgnLmhvdXJzZWxlY3Qgb3B0aW9uOnNlbGVjdGVkJykudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLm1pbnV0ZSghaXNOYU4oc2VsZWN0ZWQubWludXRlKCkpID8gc2VsZWN0ZWQubWludXRlKCkgOiB0aW1lU2VsZWN0b3IuZmluZCgnLm1pbnV0ZXNlbGVjdCBvcHRpb246c2VsZWN0ZWQnKS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQuc2Vjb25kKCFpc05hTihzZWxlY3RlZC5zZWNvbmQoKSkgPyBzZWxlY3RlZC5zZWNvbmQoKSA6IHRpbWVTZWxlY3Rvci5maW5kKCcuc2Vjb25kc2VsZWN0IG9wdGlvbjpzZWxlY3RlZCcpLnZhbCgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRpbWVQaWNrZXIyNEhvdXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFtcG0gPSB0aW1lU2VsZWN0b3IuZmluZCgnLmFtcG1zZWxlY3Qgb3B0aW9uOnNlbGVjdGVkJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbXBtID09PSAnUE0nICYmIHNlbGVjdGVkLmhvdXIoKSA8IDEyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQuaG91cihzZWxlY3RlZC5ob3VyKCkgKyAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbXBtID09PSAnQU0nICYmIHNlbGVjdGVkLmhvdXIoKSA9PT0gMTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZC5ob3VyKDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkLmlzQmVmb3JlKHRoaXMuc3RhcnREYXRlKSlcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRoaXMuc3RhcnREYXRlLmNsb25lKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1heERhdGUgJiYgc2VsZWN0ZWQuaXNBZnRlcihtYXhEYXRlKSlcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IG1heERhdGUuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vIGhvdXJzXHJcbiAgICAgICAgICAgIC8vXHJcblxyXG4gICAgICAgICAgICBodG1sID0gJzxzZWxlY3QgY2xhc3M9XCJob3Vyc2VsZWN0XCI+JztcclxuXHJcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMudGltZVBpY2tlcjI0SG91ciA/IDAgOiAxO1xyXG4gICAgICAgICAgICB2YXIgZW5kID0gdGhpcy50aW1lUGlja2VyMjRIb3VyID8gMjMgOiAxMjtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlfaW5fMjQgPSBpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRpbWVQaWNrZXIyNEhvdXIpXHJcbiAgICAgICAgICAgICAgICAgICAgaV9pbl8yNCA9IHNlbGVjdGVkLmhvdXIoKSA+PSAxMiA/IChpID09IDEyID8gMTIgOiBpICsgMTIpIDogKGkgPT0gMTIgPyAwIDogaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBzZWxlY3RlZC5jbG9uZSgpLmhvdXIoaV9pbl8yNCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChtaW5EYXRlICYmIHRpbWUubWludXRlKDU5KS5pc0JlZm9yZShtaW5EYXRlKSlcclxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4RGF0ZSAmJiB0aW1lLm1pbnV0ZSgwKS5pc0FmdGVyKG1heERhdGUpKVxyXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaV9pbl8yNCA9PSBzZWxlY3RlZC5ob3VyKCkgJiYgIWRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIicgKyBpICsgJ1wiIHNlbGVjdGVkPVwic2VsZWN0ZWRcIj4nICsgaSArICc8L29wdGlvbj4nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCInICsgaSArICdcIiBkaXNhYmxlZD1cImRpc2FibGVkXCIgY2xhc3M9XCJkaXNhYmxlZFwiPicgKyBpICsgJzwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCInICsgaSArICdcIj4nICsgaSArICc8L29wdGlvbj4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sICs9ICc8L3NlbGVjdD4gJztcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vIG1pbnV0ZXNcclxuICAgICAgICAgICAgLy9cclxuXHJcbiAgICAgICAgICAgIGh0bWwgKz0gJzogPHNlbGVjdCBjbGFzcz1cIm1pbnV0ZXNlbGVjdFwiPic7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDYwOyBpICs9IHRoaXMudGltZVBpY2tlckluY3JlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhZGRlZCA9IGkgPCAxMCA/ICcwJyArIGkgOiBpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBzZWxlY3RlZC5jbG9uZSgpLm1pbnV0ZShpKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChtaW5EYXRlICYmIHRpbWUuc2Vjb25kKDU5KS5pc0JlZm9yZShtaW5EYXRlKSlcclxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4RGF0ZSAmJiB0aW1lLnNlY29uZCgwKS5pc0FmdGVyKG1heERhdGUpKVxyXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWQubWludXRlKCkgPT0gaSAmJiAhZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIGkgKyAnXCIgc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPicgKyBwYWRkZWQgKyAnPC9vcHRpb24+JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIGkgKyAnXCIgZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIGNsYXNzPVwiZGlzYWJsZWRcIj4nICsgcGFkZGVkICsgJzwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCInICsgaSArICdcIj4nICsgcGFkZGVkICsgJzwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGh0bWwgKz0gJzwvc2VsZWN0PiAnO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgLy8gc2Vjb25kc1xyXG4gICAgICAgICAgICAvL1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudGltZVBpY2tlclNlY29uZHMpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzogPHNlbGVjdCBjbGFzcz1cInNlY29uZHNlbGVjdFwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2MDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZGRlZCA9IGkgPCAxMCA/ICcwJyArIGkgOiBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gc2VsZWN0ZWQuY2xvbmUoKS5zZWNvbmQoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtaW5EYXRlICYmIHRpbWUuaXNCZWZvcmUobWluRGF0ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF4RGF0ZSAmJiB0aW1lLmlzQWZ0ZXIobWF4RGF0ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkLnNlY29uZCgpID09IGkgJiYgIWRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCInICsgaSArICdcIiBzZWxlY3RlZD1cInNlbGVjdGVkXCI+JyArIHBhZGRlZCArICc8L29wdGlvbj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIicgKyBpICsgJ1wiIGRpc2FibGVkPVwiZGlzYWJsZWRcIiBjbGFzcz1cImRpc2FibGVkXCI+JyArIHBhZGRlZCArICc8L29wdGlvbj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCInICsgaSArICdcIj4nICsgcGFkZGVkICsgJzwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzwvc2VsZWN0PiAnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAvLyBBTS9QTVxyXG4gICAgICAgICAgICAvL1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnRpbWVQaWNrZXIyNEhvdXIpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxzZWxlY3QgY2xhc3M9XCJhbXBtc2VsZWN0XCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYW1faHRtbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBtX2h0bWwgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobWluRGF0ZSAmJiBzZWxlY3RlZC5jbG9uZSgpLmhvdXIoMTIpLm1pbnV0ZSgwKS5zZWNvbmQoMCkuaXNCZWZvcmUobWluRGF0ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgYW1faHRtbCA9ICcgZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIGNsYXNzPVwiZGlzYWJsZWRcIic7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1heERhdGUgJiYgc2VsZWN0ZWQuY2xvbmUoKS5ob3VyKDApLm1pbnV0ZSgwKS5zZWNvbmQoMCkuaXNBZnRlcihtYXhEYXRlKSlcclxuICAgICAgICAgICAgICAgICAgICBwbV9odG1sID0gJyBkaXNhYmxlZD1cImRpc2FibGVkXCIgY2xhc3M9XCJkaXNhYmxlZFwiJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWQuaG91cigpID49IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIkFNXCInICsgYW1faHRtbCArICc+QU08L29wdGlvbj48b3B0aW9uIHZhbHVlPVwiUE1cIiBzZWxlY3RlZD1cInNlbGVjdGVkXCInICsgcG1faHRtbCArICc+UE08L29wdGlvbj4nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiQU1cIiBzZWxlY3RlZD1cInNlbGVjdGVkXCInICsgYW1faHRtbCArICc+QU08L29wdGlvbj48b3B0aW9uIHZhbHVlPVwiUE1cIicgKyBwbV9odG1sICsgJz5QTTwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPC9zZWxlY3Q+JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZmluZCgnLmRycC1jYWxlbmRhci4nICsgc2lkZSArICcgLmNhbGVuZGFyLXRpbWUnKS5odG1sKGh0bWwpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGVGb3JtSW5wdXRzOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNpbmdsZURhdGVQaWNrZXIgfHwgKHRoaXMuZW5kRGF0ZSAmJiAodGhpcy5zdGFydERhdGUuaXNCZWZvcmUodGhpcy5lbmREYXRlKSB8fCB0aGlzLnN0YXJ0RGF0ZS5pc1NhbWUodGhpcy5lbmREYXRlKSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5maW5kKCdidXR0b24uYXBwbHlCdG4nKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJ2J1dHRvbi5hcHBseUJ0bicpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbW92ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyVG9wLFxyXG4gICAgICAgICAgICAgICAgZHJvcHMgPSB0aGlzLmRyb3BzO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBhcmVudFJpZ2h0RWRnZSA9ICQod2luZG93KS53aWR0aCgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50RWwuaXMoJ2JvZHknKSkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50T2Zmc2V0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGhpcy5wYXJlbnRFbC5vZmZzZXQoKS50b3AgLSB0aGlzLnBhcmVudEVsLnNjcm9sbFRvcCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMucGFyZW50RWwub2Zmc2V0KCkubGVmdCAtIHRoaXMucGFyZW50RWwuc2Nyb2xsTGVmdCgpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcGFyZW50UmlnaHRFZGdlID0gdGhpcy5wYXJlbnRFbFswXS5jbGllbnRXaWR0aCArIHRoaXMucGFyZW50RWwub2Zmc2V0KCkubGVmdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChkcm9wcykge1xyXG4gICAgICAgICAgICBjYXNlICdhdXRvJzpcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclRvcCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKS50b3AgKyB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKSAtIHBhcmVudE9mZnNldC50b3A7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyVG9wICsgdGhpcy5jb250YWluZXIub3V0ZXJIZWlnaHQoKSA+PSB0aGlzLnBhcmVudEVsWzBdLnNjcm9sbEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclRvcCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKS50b3AgLSB0aGlzLmNvbnRhaW5lci5vdXRlckhlaWdodCgpIC0gcGFyZW50T2Zmc2V0LnRvcDtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wcyA9ICd1cCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndXAnOlxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyVG9wID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpLnRvcCAtIHRoaXMuY29udGFpbmVyLm91dGVySGVpZ2h0KCkgLSBwYXJlbnRPZmZzZXQudG9wO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJUb3AgPSB0aGlzLmVsZW1lbnQub2Zmc2V0KCkudG9wICsgdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCkgLSBwYXJlbnRPZmZzZXQudG9wO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEZvcmNlIHRoZSBjb250YWluZXIgdG8gaXQncyBhY3R1YWwgd2lkdGhcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKHtcclxuICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICAgICAgICByaWdodDogJ2F1dG8nXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyV2lkdGggPSB0aGlzLmNvbnRhaW5lci5vdXRlcldpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci50b2dnbGVDbGFzcygnZHJvcC11cCcsIGRyb3BzID09ICd1cCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3BlbnMgPT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyUmlnaHQgPSBwYXJlbnRSaWdodEVkZ2UgLSB0aGlzLmVsZW1lbnQub2Zmc2V0KCkubGVmdCAtIHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyV2lkdGggKyBjb250YWluZXJSaWdodCA+ICQod2luZG93KS53aWR0aCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBjb250YWluZXJUb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAnYXV0bycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBjb250YWluZXJUb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBjb250YWluZXJSaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJ2F1dG8nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcGVucyA9PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckxlZnQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0KCkubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0ICsgdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSAvIDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gY29udGFpbmVyV2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lckxlZnQgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBjb250YWluZXJUb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAnYXV0bycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGFpbmVyTGVmdCArIGNvbnRhaW5lcldpZHRoID4gJCh3aW5kb3cpLndpZHRoKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGNvbnRhaW5lclRvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGNvbnRhaW5lclRvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogY29udGFpbmVyTGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICdhdXRvJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckxlZnQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0KCkubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lckxlZnQgKyBjb250YWluZXJXaWR0aCA+ICQod2luZG93KS53aWR0aCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBjb250YWluZXJUb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBjb250YWluZXJUb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGNvbnRhaW5lckxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAnYXV0bydcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTaG93aW5nKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBjbGljayBwcm94eSB0aGF0IGlzIHByaXZhdGUgdG8gdGhpcyBpbnN0YW5jZSBvZiBkYXRlcGlja2VyLCBmb3IgdW5iaW5kaW5nXHJcbiAgICAgICAgICAgIHRoaXMuX291dHNpZGVDbGlja1Byb3h5ID0gJC5wcm94eShmdW5jdGlvbihlKSB7IHRoaXMub3V0c2lkZUNsaWNrKGUpOyB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEJpbmQgZ2xvYmFsIGRhdGVwaWNrZXIgbW91c2Vkb3duIGZvciBoaWRpbmcgYW5kXHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpXHJcbiAgICAgICAgICAgICAgLm9uKCdtb3VzZWRvd24uZGF0ZXJhbmdlcGlja2VyJywgdGhpcy5fb3V0c2lkZUNsaWNrUHJveHkpXHJcbiAgICAgICAgICAgICAgLy8gYWxzbyBzdXBwb3J0IG1vYmlsZSBkZXZpY2VzXHJcbiAgICAgICAgICAgICAgLm9uKCd0b3VjaGVuZC5kYXRlcmFuZ2VwaWNrZXInLCB0aGlzLl9vdXRzaWRlQ2xpY2tQcm94eSlcclxuICAgICAgICAgICAgICAvLyBhbHNvIGV4cGxpY2l0bHkgcGxheSBuaWNlIHdpdGggQm9vdHN0cmFwIGRyb3Bkb3ducywgd2hpY2ggc3RvcFByb3BhZ2F0aW9uIHdoZW4gY2xpY2tpbmcgdGhlbVxyXG4gICAgICAgICAgICAgIC5vbignY2xpY2suZGF0ZXJhbmdlcGlja2VyJywgJ1tkYXRhLXRvZ2dsZT1kcm9wZG93bl0nLCB0aGlzLl9vdXRzaWRlQ2xpY2tQcm94eSlcclxuICAgICAgICAgICAgICAvLyBhbmQgYWxzbyBjbG9zZSB3aGVuIGZvY3VzIGNoYW5nZXMgdG8gb3V0c2lkZSB0aGUgcGlja2VyIChlZy4gdGFiYmluZyBiZXR3ZWVuIGNvbnRyb2xzKVxyXG4gICAgICAgICAgICAgIC5vbignZm9jdXNpbi5kYXRlcmFuZ2VwaWNrZXInLCB0aGlzLl9vdXRzaWRlQ2xpY2tQcm94eSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZXBvc2l0aW9uIHRoZSBwaWNrZXIgaWYgdGhlIHdpbmRvdyBpcyByZXNpemVkIHdoaWxlIGl0J3Mgb3BlblxyXG4gICAgICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5kYXRlcmFuZ2VwaWNrZXInLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHsgdGhpcy5tb3ZlKGUpOyB9LCB0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9sZFN0YXJ0RGF0ZSA9IHRoaXMuc3RhcnREYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgIHRoaXMub2xkRW5kRGF0ZSA9IHRoaXMuZW5kRGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzUmlnaHRUaW1lID0gdGhpcy5lbmREYXRlLmNsb25lKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc2hvdygpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoJ3Nob3cuZGF0ZXJhbmdlcGlja2VyJywgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTaG93aW5nID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Nob3dpbmcpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vaW5jb21wbGV0ZSBkYXRlIHNlbGVjdGlvbiwgcmV2ZXJ0IHRvIGxhc3QgdmFsdWVzXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lbmREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IHRoaXMub2xkU3RhcnREYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSB0aGlzLm9sZEVuZERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9pZiBhIG5ldyBkYXRlIHJhbmdlIHdhcyBzZWxlY3RlZCwgaW52b2tlIHRoZSB1c2VyIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGFydERhdGUuaXNTYW1lKHRoaXMub2xkU3RhcnREYXRlKSB8fCAhdGhpcy5lbmREYXRlLmlzU2FtZSh0aGlzLm9sZEVuZERhdGUpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLnN0YXJ0RGF0ZS5jbG9uZSgpLCB0aGlzLmVuZERhdGUuY2xvbmUoKSwgdGhpcy5jaG9zZW5MYWJlbCk7XHJcblxyXG4gICAgICAgICAgICAvL2lmIHBpY2tlciBpcyBhdHRhY2hlZCB0byBhIHRleHQgaW5wdXQsIHVwZGF0ZSBpdFxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoKTtcclxuXHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignLmRhdGVyYW5nZXBpY2tlcicpO1xyXG4gICAgICAgICAgICAkKHdpbmRvdykub2ZmKCcuZGF0ZXJhbmdlcGlja2VyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmhpZGUoKTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoJ2hpZGUuZGF0ZXJhbmdlcGlja2VyJywgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTaG93aW5nID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2hvd2luZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG91dHNpZGVDbGljazogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChlLnRhcmdldCk7XHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSBwYWdlIGlzIGNsaWNrZWQgYW55d2hlcmUgZXhjZXB0IHdpdGhpbiB0aGUgZGF0ZXJhbmdlcnBpY2tlci9idXR0b25cclxuICAgICAgICAgICAgLy8gaXRzZWxmIHRoZW4gY2FsbCB0aGlzLmhpZGUoKVxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAvLyBpZSBtb2RhbCBkaWFsb2cgZml4XHJcbiAgICAgICAgICAgICAgICBlLnR5cGUgPT0gXCJmb2N1c2luXCIgfHxcclxuICAgICAgICAgICAgICAgIHRhcmdldC5jbG9zZXN0KHRoaXMuZWxlbWVudCkubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQuY2xvc2VzdCh0aGlzLmNvbnRhaW5lcikubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQuY2xvc2VzdCgnLmNhbGVuZGFyLXRhYmxlJykubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICApIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKCdvdXRzaWRlQ2xpY2suZGF0ZXJhbmdlcGlja2VyJywgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvd0NhbGVuZGFyczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCdzaG93LWNhbGVuZGFyJyk7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcignc2hvd0NhbGVuZGFyLmRhdGVyYW5nZXBpY2tlcicsIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhpZGVDYWxlbmRhcnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnc2hvdy1jYWxlbmRhcicpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcignaGlkZUNhbGVuZGFyLmRhdGVyYW5nZXBpY2tlcicsIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsaWNrUmFuZ2U6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdmFyIGxhYmVsID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJhbmdlLWtleScpO1xyXG4gICAgICAgICAgICB0aGlzLmNob3NlbkxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgICAgIGlmIChsYWJlbCA9PSB0aGlzLmxvY2FsZS5jdXN0b21SYW5nZUxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dDYWxlbmRhcnMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRlcyA9IHRoaXMucmFuZ2VzW2xhYmVsXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gZGF0ZXNbMF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSBkYXRlc1sxXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGltZVBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlLnN0YXJ0T2YoJ2RheScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kRGF0ZS5lbmRPZignZGF5Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFsd2F5c1Nob3dDYWxlbmRhcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlQ2FsZW5kYXJzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrQXBwbHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsaWNrUHJldjogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB2YXIgY2FsID0gJChlLnRhcmdldCkucGFyZW50cygnLmRycC1jYWxlbmRhcicpO1xyXG4gICAgICAgICAgICBpZiAoY2FsLmhhc0NsYXNzKCdsZWZ0JykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdENhbGVuZGFyLm1vbnRoLnN1YnRyYWN0KDEsICdtb250aCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGlua2VkQ2FsZW5kYXJzKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNhbGVuZGFycygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsaWNrTmV4dDogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB2YXIgY2FsID0gJChlLnRhcmdldCkucGFyZW50cygnLmRycC1jYWxlbmRhcicpO1xyXG4gICAgICAgICAgICBpZiAoY2FsLmhhc0NsYXNzKCdsZWZ0JykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdENhbGVuZGFyLm1vbnRoLmFkZCgxLCAnbW9udGgnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5hZGQoMSwgJ21vbnRoJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5saW5rZWRDYWxlbmRhcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWZ0Q2FsZW5kYXIubW9udGguYWRkKDEsICdtb250aCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaG92ZXJEYXRlOiBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAvL2lnbm9yZSBkYXRlcyB0aGF0IGNhbid0IGJlIHNlbGVjdGVkXHJcbiAgICAgICAgICAgIGlmICghJChlLnRhcmdldCkuaGFzQ2xhc3MoJ2F2YWlsYWJsZScpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgdGl0bGUgPSAkKGUudGFyZ2V0KS5hdHRyKCdkYXRhLXRpdGxlJyk7XHJcbiAgICAgICAgICAgIHZhciByb3cgPSB0aXRsZS5zdWJzdHIoMSwgMSk7XHJcbiAgICAgICAgICAgIHZhciBjb2wgPSB0aXRsZS5zdWJzdHIoMywgMSk7XHJcbiAgICAgICAgICAgIHZhciBjYWwgPSAkKGUudGFyZ2V0KS5wYXJlbnRzKCcuZHJwLWNhbGVuZGFyJyk7XHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gY2FsLmhhc0NsYXNzKCdsZWZ0JykgPyB0aGlzLmxlZnRDYWxlbmRhci5jYWxlbmRhcltyb3ddW2NvbF0gOiB0aGlzLnJpZ2h0Q2FsZW5kYXIuY2FsZW5kYXJbcm93XVtjb2xdO1xyXG5cclxuICAgICAgICAgICAgLy9oaWdobGlnaHQgdGhlIGRhdGVzIGJldHdlZW4gdGhlIHN0YXJ0IGRhdGUgYW5kIHRoZSBkYXRlIGJlaW5nIGhvdmVyZWQgYXMgYSBwb3RlbnRpYWwgZW5kIGRhdGVcclxuICAgICAgICAgICAgdmFyIGxlZnRDYWxlbmRhciA9IHRoaXMubGVmdENhbGVuZGFyO1xyXG4gICAgICAgICAgICB2YXIgcmlnaHRDYWxlbmRhciA9IHRoaXMucmlnaHRDYWxlbmRhcjtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IHRoaXMuc3RhcnREYXRlO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZW5kRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZmluZCgnLmRycC1jYWxlbmRhciB0Ym9keSB0ZCcpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2tpcCB3ZWVrIG51bWJlcnMsIG9ubHkgbG9vayBhdCBkYXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKGVsKS5oYXNDbGFzcygnd2VlaycpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9ICQoZWwpLmF0dHIoJ2RhdGEtdGl0bGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gdGl0bGUuc3Vic3RyKDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2wgPSB0aXRsZS5zdWJzdHIoMywgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbCA9ICQoZWwpLnBhcmVudHMoJy5kcnAtY2FsZW5kYXInKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHQgPSBjYWwuaGFzQ2xhc3MoJ2xlZnQnKSA/IGxlZnRDYWxlbmRhci5jYWxlbmRhcltyb3ddW2NvbF0gOiByaWdodENhbGVuZGFyLmNhbGVuZGFyW3Jvd11bY29sXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChkdC5pc0FmdGVyKHN0YXJ0RGF0ZSkgJiYgZHQuaXNCZWZvcmUoZGF0ZSkpIHx8IGR0LmlzU2FtZShkYXRlLCAnZGF5JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChlbCkuYWRkQ2xhc3MoJ2luLXJhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChlbCkucmVtb3ZlQ2xhc3MoJ2luLXJhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsaWNrRGF0ZTogZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCEkKGUudGFyZ2V0KS5oYXNDbGFzcygnYXZhaWxhYmxlJykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aXRsZSA9ICQoZS50YXJnZXQpLmF0dHIoJ2RhdGEtdGl0bGUnKTtcclxuICAgICAgICAgICAgdmFyIHJvdyA9IHRpdGxlLnN1YnN0cigxLCAxKTtcclxuICAgICAgICAgICAgdmFyIGNvbCA9IHRpdGxlLnN1YnN0cigzLCAxKTtcclxuICAgICAgICAgICAgdmFyIGNhbCA9ICQoZS50YXJnZXQpLnBhcmVudHMoJy5kcnAtY2FsZW5kYXInKTtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBjYWwuaGFzQ2xhc3MoJ2xlZnQnKSA/IHRoaXMubGVmdENhbGVuZGFyLmNhbGVuZGFyW3Jvd11bY29sXSA6IHRoaXMucmlnaHRDYWxlbmRhci5jYWxlbmRhcltyb3ddW2NvbF07XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAvLyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGRvIGEgZmV3IHRoaW5nczpcclxuICAgICAgICAgICAgLy8gKiBhbHRlcm5hdGUgYmV0d2VlbiBzZWxlY3RpbmcgYSBzdGFydCBhbmQgZW5kIGRhdGUgZm9yIHRoZSByYW5nZSxcclxuICAgICAgICAgICAgLy8gKiBpZiB0aGUgdGltZSBwaWNrZXIgaXMgZW5hYmxlZCwgYXBwbHkgdGhlIGhvdXIvbWludXRlL3NlY29uZCBmcm9tIHRoZSBzZWxlY3QgYm94ZXMgdG8gdGhlIGNsaWNrZWQgZGF0ZVxyXG4gICAgICAgICAgICAvLyAqIGlmIGF1dG9hcHBseSBpcyBlbmFibGVkLCBhbmQgYW4gZW5kIGRhdGUgd2FzIGNob3NlbiwgYXBwbHkgdGhlIHNlbGVjdGlvblxyXG4gICAgICAgICAgICAvLyAqIGlmIHNpbmdsZSBkYXRlIHBpY2tlciBtb2RlLCBhbmQgdGltZSBwaWNrZXIgaXNuJ3QgZW5hYmxlZCwgYXBwbHkgdGhlIHNlbGVjdGlvbiBpbW1lZGlhdGVseVxyXG4gICAgICAgICAgICAvLyAqIGlmIG9uZSBvZiB0aGUgaW5wdXRzIGFib3ZlIHRoZSBjYWxlbmRhcnMgd2FzIGZvY3VzZWQsIGNhbmNlbCB0aGF0IG1hbnVhbCBpbnB1dFxyXG4gICAgICAgICAgICAvL1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5kRGF0ZSB8fCBkYXRlLmlzQmVmb3JlKHRoaXMuc3RhcnREYXRlLCAnZGF5JykpIHsgLy9waWNraW5nIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lUGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhvdXIgPSBwYXJzZUludCh0aGlzLmNvbnRhaW5lci5maW5kKCcubGVmdCAuaG91cnNlbGVjdCcpLnZhbCgpLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRpbWVQaWNrZXIyNEhvdXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFtcG0gPSB0aGlzLmNvbnRhaW5lci5maW5kKCcubGVmdCAuYW1wbXNlbGVjdCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW1wbSA9PT0gJ1BNJyAmJiBob3VyIDwgMTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW1wbSA9PT0gJ0FNJyAmJiBob3VyID09PSAxMilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWludXRlID0gcGFyc2VJbnQodGhpcy5jb250YWluZXIuZmluZCgnLmxlZnQgLm1pbnV0ZXNlbGVjdCcpLnZhbCgpLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG1pbnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlID0gcGFyc2VJbnQodGhpcy5jb250YWluZXIuZmluZCgnLmxlZnQgLm1pbnV0ZXNlbGVjdCBvcHRpb246bGFzdCcpLnZhbCgpLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWNvbmQgPSB0aGlzLnRpbWVQaWNrZXJTZWNvbmRzID8gcGFyc2VJbnQodGhpcy5jb250YWluZXIuZmluZCgnLmxlZnQgLnNlY29uZHNlbGVjdCcpLnZhbCgpLCAxMCkgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLmNsb25lKCkuaG91cihob3VyKS5taW51dGUobWludXRlKS5zZWNvbmQoc2Vjb25kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kRGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0RGF0ZShkYXRlLmNsb25lKCkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmVuZERhdGUgJiYgZGF0ZS5pc0JlZm9yZSh0aGlzLnN0YXJ0RGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlOiBjbGlja2luZyB0aGUgc2FtZSBkYXRlIGZvciBzdGFydC9lbmQsXHJcbiAgICAgICAgICAgICAgICAvL2J1dCB0aGUgdGltZSBvZiB0aGUgZW5kIGRhdGUgaXMgYmVmb3JlIHRoZSBzdGFydCBkYXRlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVuZERhdGUodGhpcy5zdGFydERhdGUuY2xvbmUoKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIHBpY2tpbmcgZW5kXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lUGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhvdXIgPSBwYXJzZUludCh0aGlzLmNvbnRhaW5lci5maW5kKCcucmlnaHQgLmhvdXJzZWxlY3QnKS52YWwoKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50aW1lUGlja2VyMjRIb3VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbXBtID0gdGhpcy5jb250YWluZXIuZmluZCgnLnJpZ2h0IC5hbXBtc2VsZWN0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbXBtID09PSAnUE0nICYmIGhvdXIgPCAxMilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbXBtID09PSAnQU0nICYmIGhvdXIgPT09IDEyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91ciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaW51dGUgPSBwYXJzZUludCh0aGlzLmNvbnRhaW5lci5maW5kKCcucmlnaHQgLm1pbnV0ZXNlbGVjdCcpLnZhbCgpLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG1pbnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlID0gcGFyc2VJbnQodGhpcy5jb250YWluZXIuZmluZCgnLnJpZ2h0IC5taW51dGVzZWxlY3Qgb3B0aW9uOmxhc3QnKS52YWwoKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vjb25kID0gdGhpcy50aW1lUGlja2VyU2Vjb25kcyA/IHBhcnNlSW50KHRoaXMuY29udGFpbmVyLmZpbmQoJy5yaWdodCAuc2Vjb25kc2VsZWN0JykudmFsKCksIDEwKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUuY2xvbmUoKS5ob3VyKGhvdXIpLm1pbnV0ZShtaW51dGUpLnNlY29uZChzZWNvbmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbmREYXRlKGRhdGUuY2xvbmUoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvQXBwbHkpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVDaG9zZW5MYWJlbCgpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNsaWNrQXBwbHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2luZ2xlRGF0ZVBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbmREYXRlKHRoaXMuc3RhcnREYXRlKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy50aW1lUGlja2VyICYmIHRoaXMuYXV0b0FwcGx5KVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tBcHBseSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuXHJcbiAgICAgICAgICAgIC8vVGhpcyBpcyB0byBjYW5jZWwgdGhlIGJsdXIgZXZlbnQgaGFuZGxlciBpZiB0aGUgbW91c2Ugd2FzIGluIG9uZSBvZiB0aGUgaW5wdXRzXHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNhbGN1bGF0ZUNob3NlbkxhYmVsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXN0b21SYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgcmFuZ2UgaW4gdGhpcy5yYW5nZXMpIHtcclxuICAgICAgICAgICAgICBpZiAodGhpcy50aW1lUGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMudGltZVBpY2tlclNlY29uZHMgPyBcIllZWVktTU0tREQgSEg6bW06c3NcIiA6IFwiWVlZWS1NTS1ERCBISDptbVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWdub3JlIHRpbWVzIHdoZW4gY29tcGFyaW5nIGRhdGVzIGlmIHRpbWUgcGlja2VyIHNlY29uZHMgaXMgbm90IGVuYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydERhdGUuZm9ybWF0KGZvcm1hdCkgPT0gdGhpcy5yYW5nZXNbcmFuZ2VdWzBdLmZvcm1hdChmb3JtYXQpICYmIHRoaXMuZW5kRGF0ZS5mb3JtYXQoZm9ybWF0KSA9PSB0aGlzLnJhbmdlc1tyYW5nZV1bMV0uZm9ybWF0KGZvcm1hdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9zZW5MYWJlbCA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy5yYW5nZXMgbGk6ZXEoJyArIGkgKyAnKScpLmFkZENsYXNzKCdhY3RpdmUnKS5hdHRyKCdkYXRhLXJhbmdlLWtleScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWdub3JlIHRpbWVzIHdoZW4gY29tcGFyaW5nIGRhdGVzIGlmIHRpbWUgcGlja2VyIGlzIG5vdCBlbmFibGVkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnREYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpID09IHRoaXMucmFuZ2VzW3JhbmdlXVswXS5mb3JtYXQoJ1lZWVktTU0tREQnKSAmJiB0aGlzLmVuZERhdGUuZm9ybWF0KCdZWVlZLU1NLUREJykgPT0gdGhpcy5yYW5nZXNbcmFuZ2VdWzFdLmZvcm1hdCgnWVlZWS1NTS1ERCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVJhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hvc2VuTGFiZWwgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcucmFuZ2VzIGxpOmVxKCcgKyBpICsgJyknKS5hZGRDbGFzcygnYWN0aXZlJykuYXR0cignZGF0YS1yYW5nZS1rZXknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdXN0b21SYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0N1c3RvbVJhbmdlTGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNob3NlbkxhYmVsID0gdGhpcy5jb250YWluZXIuZmluZCgnLnJhbmdlcyBsaTpsYXN0JykuYWRkQ2xhc3MoJ2FjdGl2ZScpLmF0dHIoJ2RhdGEtcmFuZ2Uta2V5Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hvc2VuTGFiZWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Q2FsZW5kYXJzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjbGlja0FwcGx5OiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcignYXBwbHkuZGF0ZXJhbmdlcGlja2VyJywgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2xpY2tDYW5jZWw6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydERhdGUgPSB0aGlzLm9sZFN0YXJ0RGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gdGhpcy5vbGRFbmREYXRlO1xyXG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoJ2NhbmNlbC5kYXRlcmFuZ2VwaWNrZXInLCB0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtb250aE9yWWVhckNoYW5nZWQ6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdmFyIGlzTGVmdCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5kcnAtY2FsZW5kYXInKS5oYXNDbGFzcygnbGVmdCcpLFxyXG4gICAgICAgICAgICAgICAgbGVmdE9yUmlnaHQgPSBpc0xlZnQgPyAnbGVmdCcgOiAncmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgY2FsID0gdGhpcy5jb250YWluZXIuZmluZCgnLmRycC1jYWxlbmRhci4nK2xlZnRPclJpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1vbnRoIG11c3QgYmUgTnVtYmVyIGZvciBuZXcgbW9tZW50IHZlcnNpb25zXHJcbiAgICAgICAgICAgIHZhciBtb250aCA9IHBhcnNlSW50KGNhbC5maW5kKCcubW9udGhzZWxlY3QnKS52YWwoKSwgMTApO1xyXG4gICAgICAgICAgICB2YXIgeWVhciA9IGNhbC5maW5kKCcueWVhcnNlbGVjdCcpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpc0xlZnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh5ZWFyIDwgdGhpcy5zdGFydERhdGUueWVhcigpIHx8ICh5ZWFyID09IHRoaXMuc3RhcnREYXRlLnllYXIoKSAmJiBtb250aCA8IHRoaXMuc3RhcnREYXRlLm1vbnRoKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGggPSB0aGlzLnN0YXJ0RGF0ZS5tb250aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHllYXIgPSB0aGlzLnN0YXJ0RGF0ZS55ZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1pbkRhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh5ZWFyIDwgdGhpcy5taW5EYXRlLnllYXIoKSB8fCAoeWVhciA9PSB0aGlzLm1pbkRhdGUueWVhcigpICYmIG1vbnRoIDwgdGhpcy5taW5EYXRlLm1vbnRoKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGggPSB0aGlzLm1pbkRhdGUubW9udGgoKTtcclxuICAgICAgICAgICAgICAgICAgICB5ZWFyID0gdGhpcy5taW5EYXRlLnllYXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWF4RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHllYXIgPiB0aGlzLm1heERhdGUueWVhcigpIHx8ICh5ZWFyID09IHRoaXMubWF4RGF0ZS55ZWFyKCkgJiYgbW9udGggPiB0aGlzLm1heERhdGUubW9udGgoKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb250aCA9IHRoaXMubWF4RGF0ZS5tb250aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHllYXIgPSB0aGlzLm1heERhdGUueWVhcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNMZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRDYWxlbmRhci5tb250aC5tb250aChtb250aCkueWVhcih5ZWFyKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmtlZENhbGVuZGFycylcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0Q2FsZW5kYXIubW9udGggPSB0aGlzLmxlZnRDYWxlbmRhci5tb250aC5jbG9uZSgpLmFkZCgxLCAnbW9udGgnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5tb250aChtb250aCkueWVhcih5ZWFyKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmtlZENhbGVuZGFycylcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRDYWxlbmRhci5tb250aCA9IHRoaXMucmlnaHRDYWxlbmRhci5tb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdGltZUNoYW5nZWQ6IGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYWwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuZHJwLWNhbGVuZGFyJyksXHJcbiAgICAgICAgICAgICAgICBpc0xlZnQgPSBjYWwuaGFzQ2xhc3MoJ2xlZnQnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBob3VyID0gcGFyc2VJbnQoY2FsLmZpbmQoJy5ob3Vyc2VsZWN0JykudmFsKCksIDEwKTtcclxuICAgICAgICAgICAgdmFyIG1pbnV0ZSA9IHBhcnNlSW50KGNhbC5maW5kKCcubWludXRlc2VsZWN0JykudmFsKCksIDEwKTtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKG1pbnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgIG1pbnV0ZSA9IHBhcnNlSW50KGNhbC5maW5kKCcubWludXRlc2VsZWN0IG9wdGlvbjpsYXN0JykudmFsKCksIDEwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2Vjb25kID0gdGhpcy50aW1lUGlja2VyU2Vjb25kcyA/IHBhcnNlSW50KGNhbC5maW5kKCcuc2Vjb25kc2VsZWN0JykudmFsKCksIDEwKSA6IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMudGltZVBpY2tlcjI0SG91cikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFtcG0gPSBjYWwuZmluZCgnLmFtcG1zZWxlY3QnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgIGlmIChhbXBtID09PSAnUE0nICYmIGhvdXIgPCAxMilcclxuICAgICAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFtcG0gPT09ICdBTScgJiYgaG91ciA9PT0gMTIpXHJcbiAgICAgICAgICAgICAgICAgICAgaG91ciA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpc0xlZnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnREYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5ob3VyKGhvdXIpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQubWludXRlKG1pbnV0ZSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zZWNvbmQoc2Vjb25kKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnREYXRlKHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNpbmdsZURhdGVQaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSB0aGlzLnN0YXJ0RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVuZERhdGUgJiYgdGhpcy5lbmREYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpID09IHN0YXJ0LmZvcm1hdCgnWVlZWS1NTS1ERCcpICYmIHRoaXMuZW5kRGF0ZS5pc0JlZm9yZShzdGFydCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVuZERhdGUoc3RhcnQuY2xvbmUoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbmREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5lbmREYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICBlbmQuaG91cihob3VyKTtcclxuICAgICAgICAgICAgICAgIGVuZC5taW51dGUobWludXRlKTtcclxuICAgICAgICAgICAgICAgIGVuZC5zZWNvbmQoc2Vjb25kKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kRGF0ZShlbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3VwZGF0ZSB0aGUgY2FsZW5kYXJzIHNvIGFsbCBjbGlja2FibGUgZGF0ZXMgcmVmbGVjdCB0aGUgbmV3IHRpbWUgY29tcG9uZW50XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJzKCk7XHJcblxyXG4gICAgICAgICAgICAvL3VwZGF0ZSB0aGUgZm9ybSBpbnB1dHMgYWJvdmUgdGhlIGNhbGVuZGFycyB3aXRoIHRoZSBuZXcgdGltZVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvcm1JbnB1dHMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vcmUtcmVuZGVyIHRoZSB0aW1lIHBpY2tlcnMgYmVjYXVzZSBjaGFuZ2luZyBvbmUgc2VsZWN0aW9uIGNhbiBhZmZlY3Qgd2hhdCdzIGVuYWJsZWQgaW4gYW5vdGhlclxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlclRpbWVQaWNrZXIoJ2xlZnQnKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJUaW1lUGlja2VyKCdyaWdodCcpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBlbGVtZW50Q2hhbmdlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lbGVtZW50LmlzKCdpbnB1dCcpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lbGVtZW50LnZhbCgpLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRhdGVTdHJpbmcgPSB0aGlzLmVsZW1lbnQudmFsKCkuc3BsaXQodGhpcy5sb2NhbGUuc2VwYXJhdG9yKSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIGVuZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0ZVN0cmluZy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gbW9tZW50KGRhdGVTdHJpbmdbMF0sIHRoaXMubG9jYWxlLmZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBtb21lbnQoZGF0ZVN0cmluZ1sxXSwgdGhpcy5sb2NhbGUuZm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2luZ2xlRGF0ZVBpY2tlciB8fCBzdGFydCA9PT0gbnVsbCB8fCBlbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gbW9tZW50KHRoaXMuZWxlbWVudC52YWwoKSwgdGhpcy5sb2NhbGUuZm9ybWF0KTtcclxuICAgICAgICAgICAgICAgIGVuZCA9IHN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXN0YXJ0LmlzVmFsaWQoKSB8fCAhZW5kLmlzVmFsaWQoKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGFydERhdGUoc3RhcnQpO1xyXG4gICAgICAgICAgICB0aGlzLnNldEVuZERhdGUoZW5kKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAga2V5ZG93bjogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAvL2hpZGUgb24gdGFiIG9yIGVudGVyXHJcbiAgICAgICAgICAgIGlmICgoZS5rZXlDb2RlID09PSA5KSB8fCAoZS5rZXlDb2RlID09PSAxMykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2hpZGUgb24gZXNjIGFuZCBwcmV2ZW50IHByb3BhZ2F0aW9uXHJcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlRWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnQuaXMoJ2lucHV0JykgJiYgdGhpcy5hdXRvVXBkYXRlSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuc3RhcnREYXRlLmZvcm1hdCh0aGlzLmxvY2FsZS5mb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNpbmdsZURhdGVQaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSArPSB0aGlzLmxvY2FsZS5zZXBhcmF0b3IgKyB0aGlzLmVuZERhdGUuZm9ybWF0KHRoaXMubG9jYWxlLmZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHRoaXMuZWxlbWVudC52YWwoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC52YWwobmV3VmFsdWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vZmYoJy5kYXRlcmFuZ2VwaWNrZXInKTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZURhdGEoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICAkLmZuLmRhdGVyYW5nZXBpY2tlciA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGltcGxlbWVudE9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgJC5mbi5kYXRlcmFuZ2VwaWNrZXIuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgaWYgKGVsLmRhdGEoJ2RhdGVyYW5nZXBpY2tlcicpKVxyXG4gICAgICAgICAgICAgICAgZWwuZGF0YSgnZGF0ZXJhbmdlcGlja2VyJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGVsLmRhdGEoJ2RhdGVyYW5nZXBpY2tlcicsIG5ldyBEYXRlUmFuZ2VQaWNrZXIoZWwsIGltcGxlbWVudE9wdGlvbnMsIGNhbGxiYWNrKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBEYXRlUmFuZ2VQaWNrZXI7XHJcblxyXG59KSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/template/admin/assets/plugins/daterangepicker/daterangepicker.js\n");

/***/ }),

/***/ "./resources/template/admin/assets/plugins/select2/dist/js/select2.full.min.js":
/*!*************************************************************************************!*\
  !*** ./resources/template/admin/assets/plugins/select2/dist/js/select2.full.min.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! Select2 4.0.5 | https://github.com/select2/select2/blob/master/LICENSE.md */\n!function (a) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(function (a) {\n  var b = function () {\n    if (a && a.fn && a.fn.select2 && a.fn.select2.amd) var b = a.fn.select2.amd;\n    var b;\n    return function () {\n      if (!b || !b.requirejs) {\n        b ? c = b : b = {};\n        var a, c, d;\n        !function (b) {\n          function e(a, b) {\n            return v.call(a, b);\n          }\n\n          function f(a, b) {\n            var c,\n                d,\n                e,\n                f,\n                g,\n                h,\n                i,\n                j,\n                k,\n                l,\n                m,\n                n,\n                o = b && b.split(\"/\"),\n                p = t.map,\n                q = p && p[\"*\"] || {};\n\n            if (a) {\n              for (a = a.split(\"/\"), g = a.length - 1, t.nodeIdCompat && x.test(a[g]) && (a[g] = a[g].replace(x, \"\")), \".\" === a[0].charAt(0) && o && (n = o.slice(0, o.length - 1), a = n.concat(a)), k = 0; k < a.length; k++) {\n                if (\".\" === (m = a[k])) a.splice(k, 1), k -= 1;else if (\"..\" === m) {\n                  if (0 === k || 1 === k && \"..\" === a[2] || \"..\" === a[k - 1]) continue;\n                  k > 0 && (a.splice(k - 1, 2), k -= 2);\n                }\n              }\n\n              a = a.join(\"/\");\n            }\n\n            if ((o || q) && p) {\n              for (c = a.split(\"/\"), k = c.length; k > 0; k -= 1) {\n                if (d = c.slice(0, k).join(\"/\"), o) for (l = o.length; l > 0; l -= 1) {\n                  if ((e = p[o.slice(0, l).join(\"/\")]) && (e = e[d])) {\n                    f = e, h = k;\n                    break;\n                  }\n                }\n                if (f) break;\n                !i && q && q[d] && (i = q[d], j = k);\n              }\n\n              !f && i && (f = i, h = j), f && (c.splice(0, h, f), a = c.join(\"/\"));\n            }\n\n            return a;\n          }\n\n          function g(a, c) {\n            return function () {\n              var d = w.call(arguments, 0);\n              return \"string\" != typeof d[0] && 1 === d.length && d.push(null), _o.apply(b, d.concat([a, c]));\n            };\n          }\n\n          function h(a) {\n            return function (b) {\n              return f(b, a);\n            };\n          }\n\n          function i(a) {\n            return function (b) {\n              r[a] = b;\n            };\n          }\n\n          function j(a) {\n            if (e(s, a)) {\n              var c = s[a];\n              delete s[a], u[a] = !0, n.apply(b, c);\n            }\n\n            if (!e(r, a) && !e(u, a)) throw new Error(\"No \" + a);\n            return r[a];\n          }\n\n          function k(a) {\n            var b,\n                c = a ? a.indexOf(\"!\") : -1;\n            return c > -1 && (b = a.substring(0, c), a = a.substring(c + 1, a.length)), [b, a];\n          }\n\n          function l(a) {\n            return a ? k(a) : [];\n          }\n\n          function m(a) {\n            return function () {\n              return t && t.config && t.config[a] || {};\n            };\n          }\n\n          var n,\n              _o,\n              p,\n              q,\n              r = {},\n              s = {},\n              t = {},\n              u = {},\n              v = Object.prototype.hasOwnProperty,\n              w = [].slice,\n              x = /\\.js$/;\n\n          p = function p(a, b) {\n            var c,\n                d = k(a),\n                e = d[0],\n                g = b[1];\n            return a = d[1], e && (e = f(e, g), c = j(e)), e ? a = c && c.normalize ? c.normalize(a, h(g)) : f(a, g) : (a = f(a, g), d = k(a), e = d[0], a = d[1], e && (c = j(e))), {\n              f: e ? e + \"!\" + a : a,\n              n: a,\n              pr: e,\n              p: c\n            };\n          }, q = {\n            require: function require(a) {\n              return g(a);\n            },\n            exports: function exports(a) {\n              var b = r[a];\n              return void 0 !== b ? b : r[a] = {};\n            },\n            module: function module(a) {\n              return {\n                id: a,\n                uri: \"\",\n                exports: r[a],\n                config: m(a)\n              };\n            }\n          }, n = function n(a, c, d, f) {\n            var h,\n                k,\n                m,\n                n,\n                o,\n                t,\n                v,\n                w = [],\n                x = _typeof(d);\n\n            if (f = f || a, t = l(f), \"undefined\" === x || \"function\" === x) {\n              for (c = !c.length && d.length ? [\"require\", \"exports\", \"module\"] : c, o = 0; o < c.length; o += 1) {\n                if (n = p(c[o], t), \"require\" === (k = n.f)) w[o] = q.require(a);else if (\"exports\" === k) w[o] = q.exports(a), v = !0;else if (\"module\" === k) h = w[o] = q.module(a);else if (e(r, k) || e(s, k) || e(u, k)) w[o] = j(k);else {\n                  if (!n.p) throw new Error(a + \" missing \" + k);\n                  n.p.load(n.n, g(f, !0), i(k), {}), w[o] = r[k];\n                }\n              }\n\n              m = d ? d.apply(r[a], w) : void 0, a && (h && h.exports !== b && h.exports !== r[a] ? r[a] = h.exports : m === b && v || (r[a] = m));\n            } else a && (r[a] = d);\n          }, a = c = _o = function o(a, c, d, e, f) {\n            if (\"string\" == typeof a) return q[a] ? q[a](c) : j(p(a, l(c)).f);\n\n            if (!a.splice) {\n              if (t = a, t.deps && _o(t.deps, t.callback), !c) return;\n              c.splice ? (a = c, c = d, d = null) : a = b;\n            }\n\n            return c = c || function () {}, \"function\" == typeof d && (d = e, e = f), e ? n(b, a, c, d) : setTimeout(function () {\n              n(b, a, c, d);\n            }, 4), _o;\n          }, _o.config = function (a) {\n            return _o(a);\n          }, a._defined = r, d = function d(a, b, c) {\n            if (\"string\" != typeof a) throw new Error(\"See almond README: incorrect module build, no module name\");\n            b.splice || (c = b, b = []), e(r, a) || e(s, a) || (s[a] = [a, b, c]);\n          }, d.amd = {\n            jQuery: !0\n          };\n        }(), b.requirejs = a, b.require = c, b.define = d;\n      }\n    }(), b.define(\"almond\", function () {}), b.define(\"jquery\", [], function () {\n      var b = a || $;\n      return null == b && console && console.error && console.error(\"Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page.\"), b;\n    }), b.define(\"select2/utils\", [\"jquery\"], function (a) {\n      function b(a) {\n        var b = a.prototype,\n            c = [];\n\n        for (var d in b) {\n          \"function\" == typeof b[d] && \"constructor\" !== d && c.push(d);\n        }\n\n        return c;\n      }\n\n      var c = {};\n      c.Extend = function (a, b) {\n        function c() {\n          this.constructor = a;\n        }\n\n        var d = {}.hasOwnProperty;\n\n        for (var e in b) {\n          d.call(b, e) && (a[e] = b[e]);\n        }\n\n        return c.prototype = b.prototype, a.prototype = new c(), a.__super__ = b.prototype, a;\n      }, c.Decorate = function (a, c) {\n        function d() {\n          var b = Array.prototype.unshift,\n              d = c.prototype.constructor.length,\n              e = a.prototype.constructor;\n          d > 0 && (b.call(arguments, a.prototype.constructor), e = c.prototype.constructor), e.apply(this, arguments);\n        }\n\n        function e() {\n          this.constructor = d;\n        }\n\n        var f = b(c),\n            g = b(a);\n        c.displayName = a.displayName, d.prototype = new e();\n\n        for (var h = 0; h < g.length; h++) {\n          var i = g[h];\n          d.prototype[i] = a.prototype[i];\n        }\n\n        for (var j = function j(a) {\n          var b = function b() {};\n\n          (a in d.prototype) && (b = d.prototype[a]);\n          var e = c.prototype[a];\n          return function () {\n            return Array.prototype.unshift.call(arguments, b), e.apply(this, arguments);\n          };\n        }, k = 0; k < f.length; k++) {\n          var l = f[k];\n          d.prototype[l] = j(l);\n        }\n\n        return d;\n      };\n\n      var d = function d() {\n        this.listeners = {};\n      };\n\n      return d.prototype.on = function (a, b) {\n        this.listeners = this.listeners || {}, a in this.listeners ? this.listeners[a].push(b) : this.listeners[a] = [b];\n      }, d.prototype.trigger = function (a) {\n        var b = Array.prototype.slice,\n            c = b.call(arguments, 1);\n        this.listeners = this.listeners || {}, null == c && (c = []), 0 === c.length && c.push({}), c[0]._type = a, a in this.listeners && this.invoke(this.listeners[a], b.call(arguments, 1)), \"*\" in this.listeners && this.invoke(this.listeners[\"*\"], arguments);\n      }, d.prototype.invoke = function (a, b) {\n        for (var c = 0, d = a.length; c < d; c++) {\n          a[c].apply(this, b);\n        }\n      }, c.Observable = d, c.generateChars = function (a) {\n        for (var b = \"\", c = 0; c < a; c++) {\n          b += Math.floor(36 * Math.random()).toString(36);\n        }\n\n        return b;\n      }, c.bind = function (a, b) {\n        return function () {\n          a.apply(b, arguments);\n        };\n      }, c._convertData = function (a) {\n        for (var b in a) {\n          var c = b.split(\"-\"),\n              d = a;\n\n          if (1 !== c.length) {\n            for (var e = 0; e < c.length; e++) {\n              var f = c[e];\n              f = f.substring(0, 1).toLowerCase() + f.substring(1), f in d || (d[f] = {}), e == c.length - 1 && (d[f] = a[b]), d = d[f];\n            }\n\n            delete a[b];\n          }\n        }\n\n        return a;\n      }, c.hasScroll = function (b, c) {\n        var d = a(c),\n            e = c.style.overflowX,\n            f = c.style.overflowY;\n        return (e !== f || \"hidden\" !== f && \"visible\" !== f) && (\"scroll\" === e || \"scroll\" === f || d.innerHeight() < c.scrollHeight || d.innerWidth() < c.scrollWidth);\n      }, c.escapeMarkup = function (a) {\n        var b = {\n          \"\\\\\": \"&#92;\",\n          \"&\": \"&amp;\",\n          \"<\": \"&lt;\",\n          \">\": \"&gt;\",\n          '\"': \"&quot;\",\n          \"'\": \"&#39;\",\n          \"/\": \"&#47;\"\n        };\n        return \"string\" != typeof a ? a : String(a).replace(/[&<>\"'\\/\\\\]/g, function (a) {\n          return b[a];\n        });\n      }, c.appendMany = function (b, c) {\n        if (\"1.7\" === a.fn.jquery.substr(0, 3)) {\n          var d = a();\n          a.map(c, function (a) {\n            d = d.add(a);\n          }), c = d;\n        }\n\n        b.append(c);\n      }, c;\n    }), b.define(\"select2/results\", [\"jquery\", \"./utils\"], function (a, b) {\n      function c(a, b, d) {\n        this.$element = a, this.data = d, this.options = b, c.__super__.constructor.call(this);\n      }\n\n      return b.Extend(c, b.Observable), c.prototype.render = function () {\n        var b = a('<ul class=\"select2-results__options\" role=\"tree\"></ul>');\n        return this.options.get(\"multiple\") && b.attr(\"aria-multiselectable\", \"true\"), this.$results = b, b;\n      }, c.prototype.clear = function () {\n        this.$results.empty();\n      }, c.prototype.displayMessage = function (b) {\n        var c = this.options.get(\"escapeMarkup\");\n        this.clear(), this.hideLoading();\n        var d = a('<li role=\"treeitem\" aria-live=\"assertive\" class=\"select2-results__option\"></li>'),\n            e = this.options.get(\"translations\").get(b.message);\n        d.append(c(e(b.args))), d[0].className += \" select2-results__message\", this.$results.append(d);\n      }, c.prototype.hideMessages = function () {\n        this.$results.find(\".select2-results__message\").remove();\n      }, c.prototype.append = function (a) {\n        this.hideLoading();\n        var b = [];\n        if (null == a.results || 0 === a.results.length) return void (0 === this.$results.children().length && this.trigger(\"results:message\", {\n          message: \"noResults\"\n        }));\n        a.results = this.sort(a.results);\n\n        for (var c = 0; c < a.results.length; c++) {\n          var d = a.results[c],\n              e = this.option(d);\n          b.push(e);\n        }\n\n        this.$results.append(b);\n      }, c.prototype.position = function (a, b) {\n        b.find(\".select2-results\").append(a);\n      }, c.prototype.sort = function (a) {\n        return this.options.get(\"sorter\")(a);\n      }, c.prototype.highlightFirstItem = function () {\n        var a = this.$results.find(\".select2-results__option[aria-selected]\"),\n            b = a.filter(\"[aria-selected=true]\");\n        b.length > 0 ? b.first().trigger(\"mouseenter\") : a.first().trigger(\"mouseenter\"), this.ensureHighlightVisible();\n      }, c.prototype.setClasses = function () {\n        var b = this;\n        this.data.current(function (c) {\n          var d = a.map(c, function (a) {\n            return a.id.toString();\n          });\n          b.$results.find(\".select2-results__option[aria-selected]\").each(function () {\n            var b = a(this),\n                c = a.data(this, \"data\"),\n                e = \"\" + c.id;\n            null != c.element && c.element.selected || null == c.element && a.inArray(e, d) > -1 ? b.attr(\"aria-selected\", \"true\") : b.attr(\"aria-selected\", \"false\");\n          });\n        });\n      }, c.prototype.showLoading = function (a) {\n        this.hideLoading();\n        var b = this.options.get(\"translations\").get(\"searching\"),\n            c = {\n          disabled: !0,\n          loading: !0,\n          text: b(a)\n        },\n            d = this.option(c);\n        d.className += \" loading-results\", this.$results.prepend(d);\n      }, c.prototype.hideLoading = function () {\n        this.$results.find(\".loading-results\").remove();\n      }, c.prototype.option = function (b) {\n        var c = document.createElement(\"li\");\n        c.className = \"select2-results__option\";\n        var d = {\n          role: \"treeitem\",\n          \"aria-selected\": \"false\"\n        };\n        b.disabled && (delete d[\"aria-selected\"], d[\"aria-disabled\"] = \"true\"), null == b.id && delete d[\"aria-selected\"], null != b._resultId && (c.id = b._resultId), b.title && (c.title = b.title), b.children && (d.role = \"group\", d[\"aria-label\"] = b.text, delete d[\"aria-selected\"]);\n\n        for (var e in d) {\n          var f = d[e];\n          c.setAttribute(e, f);\n        }\n\n        if (b.children) {\n          var g = a(c),\n              h = document.createElement(\"strong\");\n          h.className = \"select2-results__group\";\n          a(h);\n          this.template(b, h);\n\n          for (var i = [], j = 0; j < b.children.length; j++) {\n            var k = b.children[j],\n                l = this.option(k);\n            i.push(l);\n          }\n\n          var m = a(\"<ul></ul>\", {\n            \"class\": \"select2-results__options select2-results__options--nested\"\n          });\n          m.append(i), g.append(h), g.append(m);\n        } else this.template(b, c);\n\n        return a.data(c, \"data\", b), c;\n      }, c.prototype.bind = function (b, c) {\n        var d = this,\n            e = b.id + \"-results\";\n        this.$results.attr(\"id\", e), b.on(\"results:all\", function (a) {\n          d.clear(), d.append(a.data), b.isOpen() && (d.setClasses(), d.highlightFirstItem());\n        }), b.on(\"results:append\", function (a) {\n          d.append(a.data), b.isOpen() && d.setClasses();\n        }), b.on(\"query\", function (a) {\n          d.hideMessages(), d.showLoading(a);\n        }), b.on(\"select\", function () {\n          b.isOpen() && (d.setClasses(), d.highlightFirstItem());\n        }), b.on(\"unselect\", function () {\n          b.isOpen() && (d.setClasses(), d.highlightFirstItem());\n        }), b.on(\"open\", function () {\n          d.$results.attr(\"aria-expanded\", \"true\"), d.$results.attr(\"aria-hidden\", \"false\"), d.setClasses(), d.ensureHighlightVisible();\n        }), b.on(\"close\", function () {\n          d.$results.attr(\"aria-expanded\", \"false\"), d.$results.attr(\"aria-hidden\", \"true\"), d.$results.removeAttr(\"aria-activedescendant\");\n        }), b.on(\"results:toggle\", function () {\n          var a = d.getHighlightedResults();\n          0 !== a.length && a.trigger(\"mouseup\");\n        }), b.on(\"results:select\", function () {\n          var a = d.getHighlightedResults();\n\n          if (0 !== a.length) {\n            var b = a.data(\"data\");\n            \"true\" == a.attr(\"aria-selected\") ? d.trigger(\"close\", {}) : d.trigger(\"select\", {\n              data: b\n            });\n          }\n        }), b.on(\"results:previous\", function () {\n          var a = d.getHighlightedResults(),\n              b = d.$results.find(\"[aria-selected]\"),\n              c = b.index(a);\n\n          if (0 !== c) {\n            var e = c - 1;\n            0 === a.length && (e = 0);\n            var f = b.eq(e);\n            f.trigger(\"mouseenter\");\n            var g = d.$results.offset().top,\n                h = f.offset().top,\n                i = d.$results.scrollTop() + (h - g);\n            0 === e ? d.$results.scrollTop(0) : h - g < 0 && d.$results.scrollTop(i);\n          }\n        }), b.on(\"results:next\", function () {\n          var a = d.getHighlightedResults(),\n              b = d.$results.find(\"[aria-selected]\"),\n              c = b.index(a),\n              e = c + 1;\n\n          if (!(e >= b.length)) {\n            var f = b.eq(e);\n            f.trigger(\"mouseenter\");\n            var g = d.$results.offset().top + d.$results.outerHeight(!1),\n                h = f.offset().top + f.outerHeight(!1),\n                i = d.$results.scrollTop() + h - g;\n            0 === e ? d.$results.scrollTop(0) : h > g && d.$results.scrollTop(i);\n          }\n        }), b.on(\"results:focus\", function (a) {\n          a.element.addClass(\"select2-results__option--highlighted\");\n        }), b.on(\"results:message\", function (a) {\n          d.displayMessage(a);\n        }), a.fn.mousewheel && this.$results.on(\"mousewheel\", function (a) {\n          var b = d.$results.scrollTop(),\n              c = d.$results.get(0).scrollHeight - b + a.deltaY,\n              e = a.deltaY > 0 && b - a.deltaY <= 0,\n              f = a.deltaY < 0 && c <= d.$results.height();\n          e ? (d.$results.scrollTop(0), a.preventDefault(), a.stopPropagation()) : f && (d.$results.scrollTop(d.$results.get(0).scrollHeight - d.$results.height()), a.preventDefault(), a.stopPropagation());\n        }), this.$results.on(\"mouseup\", \".select2-results__option[aria-selected]\", function (b) {\n          var c = a(this),\n              e = c.data(\"data\");\n          if (\"true\" === c.attr(\"aria-selected\")) return void (d.options.get(\"multiple\") ? d.trigger(\"unselect\", {\n            originalEvent: b,\n            data: e\n          }) : d.trigger(\"close\", {}));\n          d.trigger(\"select\", {\n            originalEvent: b,\n            data: e\n          });\n        }), this.$results.on(\"mouseenter\", \".select2-results__option[aria-selected]\", function (b) {\n          var c = a(this).data(\"data\");\n          d.getHighlightedResults().removeClass(\"select2-results__option--highlighted\"), d.trigger(\"results:focus\", {\n            data: c,\n            element: a(this)\n          });\n        });\n      }, c.prototype.getHighlightedResults = function () {\n        return this.$results.find(\".select2-results__option--highlighted\");\n      }, c.prototype.destroy = function () {\n        this.$results.remove();\n      }, c.prototype.ensureHighlightVisible = function () {\n        var a = this.getHighlightedResults();\n\n        if (0 !== a.length) {\n          var b = this.$results.find(\"[aria-selected]\"),\n              c = b.index(a),\n              d = this.$results.offset().top,\n              e = a.offset().top,\n              f = this.$results.scrollTop() + (e - d),\n              g = e - d;\n          f -= 2 * a.outerHeight(!1), c <= 2 ? this.$results.scrollTop(0) : (g > this.$results.outerHeight() || g < 0) && this.$results.scrollTop(f);\n        }\n      }, c.prototype.template = function (b, c) {\n        var d = this.options.get(\"templateResult\"),\n            e = this.options.get(\"escapeMarkup\"),\n            f = d(b, c);\n        null == f ? c.style.display = \"none\" : \"string\" == typeof f ? c.innerHTML = e(f) : a(c).append(f);\n      }, c;\n    }), b.define(\"select2/keys\", [], function () {\n      return {\n        BACKSPACE: 8,\n        TAB: 9,\n        ENTER: 13,\n        SHIFT: 16,\n        CTRL: 17,\n        ALT: 18,\n        ESC: 27,\n        SPACE: 32,\n        PAGE_UP: 33,\n        PAGE_DOWN: 34,\n        END: 35,\n        HOME: 36,\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        DOWN: 40,\n        DELETE: 46\n      };\n    }), b.define(\"select2/selection/base\", [\"jquery\", \"../utils\", \"../keys\"], function (a, b, c) {\n      function d(a, b) {\n        this.$element = a, this.options = b, d.__super__.constructor.call(this);\n      }\n\n      return b.Extend(d, b.Observable), d.prototype.render = function () {\n        var b = a('<span class=\"select2-selection\" role=\"combobox\"  aria-haspopup=\"true\" aria-expanded=\"false\"></span>');\n        return this._tabindex = 0, null != this.$element.data(\"old-tabindex\") ? this._tabindex = this.$element.data(\"old-tabindex\") : null != this.$element.attr(\"tabindex\") && (this._tabindex = this.$element.attr(\"tabindex\")), b.attr(\"title\", this.$element.attr(\"title\")), b.attr(\"tabindex\", this._tabindex), this.$selection = b, b;\n      }, d.prototype.bind = function (a, b) {\n        var d = this,\n            e = (a.id, a.id + \"-results\");\n        this.container = a, this.$selection.on(\"focus\", function (a) {\n          d.trigger(\"focus\", a);\n        }), this.$selection.on(\"blur\", function (a) {\n          d._handleBlur(a);\n        }), this.$selection.on(\"keydown\", function (a) {\n          d.trigger(\"keypress\", a), a.which === c.SPACE && a.preventDefault();\n        }), a.on(\"results:focus\", function (a) {\n          d.$selection.attr(\"aria-activedescendant\", a.data._resultId);\n        }), a.on(\"selection:update\", function (a) {\n          d.update(a.data);\n        }), a.on(\"open\", function () {\n          d.$selection.attr(\"aria-expanded\", \"true\"), d.$selection.attr(\"aria-owns\", e), d._attachCloseHandler(a);\n        }), a.on(\"close\", function () {\n          d.$selection.attr(\"aria-expanded\", \"false\"), d.$selection.removeAttr(\"aria-activedescendant\"), d.$selection.removeAttr(\"aria-owns\"), d.$selection.focus(), d._detachCloseHandler(a);\n        }), a.on(\"enable\", function () {\n          d.$selection.attr(\"tabindex\", d._tabindex);\n        }), a.on(\"disable\", function () {\n          d.$selection.attr(\"tabindex\", \"-1\");\n        });\n      }, d.prototype._handleBlur = function (b) {\n        var c = this;\n        window.setTimeout(function () {\n          document.activeElement == c.$selection[0] || a.contains(c.$selection[0], document.activeElement) || c.trigger(\"blur\", b);\n        }, 1);\n      }, d.prototype._attachCloseHandler = function (b) {\n        a(document.body).on(\"mousedown.select2.\" + b.id, function (b) {\n          var c = a(b.target),\n              d = c.closest(\".select2\");\n          a(\".select2.select2-container--open\").each(function () {\n            var b = a(this);\n            this != d[0] && b.data(\"element\").select2(\"close\");\n          });\n        });\n      }, d.prototype._detachCloseHandler = function (b) {\n        a(document.body).off(\"mousedown.select2.\" + b.id);\n      }, d.prototype.position = function (a, b) {\n        b.find(\".selection\").append(a);\n      }, d.prototype.destroy = function () {\n        this._detachCloseHandler(this.container);\n      }, d.prototype.update = function (a) {\n        throw new Error(\"The `update` method must be defined in child classes.\");\n      }, d;\n    }), b.define(\"select2/selection/single\", [\"jquery\", \"./base\", \"../utils\", \"../keys\"], function (a, b, c, d) {\n      function e() {\n        e.__super__.constructor.apply(this, arguments);\n      }\n\n      return c.Extend(e, b), e.prototype.render = function () {\n        var a = e.__super__.render.call(this);\n\n        return a.addClass(\"select2-selection--single\"), a.html('<span class=\"select2-selection__rendered\"></span><span class=\"select2-selection__arrow\" role=\"presentation\"><b role=\"presentation\"></b></span>'), a;\n      }, e.prototype.bind = function (a, b) {\n        var c = this;\n\n        e.__super__.bind.apply(this, arguments);\n\n        var d = a.id + \"-container\";\n        this.$selection.find(\".select2-selection__rendered\").attr(\"id\", d), this.$selection.attr(\"aria-labelledby\", d), this.$selection.on(\"mousedown\", function (a) {\n          1 === a.which && c.trigger(\"toggle\", {\n            originalEvent: a\n          });\n        }), this.$selection.on(\"focus\", function (a) {}), this.$selection.on(\"blur\", function (a) {}), a.on(\"focus\", function (b) {\n          a.isOpen() || c.$selection.focus();\n        }), a.on(\"selection:update\", function (a) {\n          c.update(a.data);\n        });\n      }, e.prototype.clear = function () {\n        this.$selection.find(\".select2-selection__rendered\").empty();\n      }, e.prototype.display = function (a, b) {\n        var c = this.options.get(\"templateSelection\");\n        return this.options.get(\"escapeMarkup\")(c(a, b));\n      }, e.prototype.selectionContainer = function () {\n        return a(\"<span></span>\");\n      }, e.prototype.update = function (a) {\n        if (0 === a.length) return void this.clear();\n        var b = a[0],\n            c = this.$selection.find(\".select2-selection__rendered\"),\n            d = this.display(b, c);\n        c.empty().append(d), c.prop(\"title\", b.title || b.text);\n      }, e;\n    }), b.define(\"select2/selection/multiple\", [\"jquery\", \"./base\", \"../utils\"], function (a, b, c) {\n      function d(a, b) {\n        d.__super__.constructor.apply(this, arguments);\n      }\n\n      return c.Extend(d, b), d.prototype.render = function () {\n        var a = d.__super__.render.call(this);\n\n        return a.addClass(\"select2-selection--multiple\"), a.html('<ul class=\"select2-selection__rendered\"></ul>'), a;\n      }, d.prototype.bind = function (b, c) {\n        var e = this;\n        d.__super__.bind.apply(this, arguments), this.$selection.on(\"click\", function (a) {\n          e.trigger(\"toggle\", {\n            originalEvent: a\n          });\n        }), this.$selection.on(\"click\", \".select2-selection__choice__remove\", function (b) {\n          if (!e.options.get(\"disabled\")) {\n            var c = a(this),\n                d = c.parent(),\n                f = d.data(\"data\");\n            e.trigger(\"unselect\", {\n              originalEvent: b,\n              data: f\n            });\n          }\n        });\n      }, d.prototype.clear = function () {\n        this.$selection.find(\".select2-selection__rendered\").empty();\n      }, d.prototype.display = function (a, b) {\n        var c = this.options.get(\"templateSelection\");\n        return this.options.get(\"escapeMarkup\")(c(a, b));\n      }, d.prototype.selectionContainer = function () {\n        return a('<li class=\"select2-selection__choice\"><span class=\"select2-selection__choice__remove\" role=\"presentation\">&times;</span></li>');\n      }, d.prototype.update = function (a) {\n        if (this.clear(), 0 !== a.length) {\n          for (var b = [], d = 0; d < a.length; d++) {\n            var e = a[d],\n                f = this.selectionContainer(),\n                g = this.display(e, f);\n            f.append(g), f.prop(\"title\", e.title || e.text), f.data(\"data\", e), b.push(f);\n          }\n\n          var h = this.$selection.find(\".select2-selection__rendered\");\n          c.appendMany(h, b);\n        }\n      }, d;\n    }), b.define(\"select2/selection/placeholder\", [\"../utils\"], function (a) {\n      function b(a, b, c) {\n        this.placeholder = this.normalizePlaceholder(c.get(\"placeholder\")), a.call(this, b, c);\n      }\n\n      return b.prototype.normalizePlaceholder = function (a, b) {\n        return \"string\" == typeof b && (b = {\n          id: \"\",\n          text: b\n        }), b;\n      }, b.prototype.createPlaceholder = function (a, b) {\n        var c = this.selectionContainer();\n        return c.html(this.display(b)), c.addClass(\"select2-selection__placeholder\").removeClass(\"select2-selection__choice\"), c;\n      }, b.prototype.update = function (a, b) {\n        var c = 1 == b.length && b[0].id != this.placeholder.id;\n        if (b.length > 1 || c) return a.call(this, b);\n        this.clear();\n        var d = this.createPlaceholder(this.placeholder);\n        this.$selection.find(\".select2-selection__rendered\").append(d);\n      }, b;\n    }), b.define(\"select2/selection/allowClear\", [\"jquery\", \"../keys\"], function (a, b) {\n      function c() {}\n\n      return c.prototype.bind = function (a, b, c) {\n        var d = this;\n        a.call(this, b, c), null == this.placeholder && this.options.get(\"debug\") && window.console && console.error && console.error(\"Select2: The `allowClear` option should be used in combination with the `placeholder` option.\"), this.$selection.on(\"mousedown\", \".select2-selection__clear\", function (a) {\n          d._handleClear(a);\n        }), b.on(\"keypress\", function (a) {\n          d._handleKeyboardClear(a, b);\n        });\n      }, c.prototype._handleClear = function (a, b) {\n        if (!this.options.get(\"disabled\")) {\n          var c = this.$selection.find(\".select2-selection__clear\");\n\n          if (0 !== c.length) {\n            b.stopPropagation();\n\n            for (var d = c.data(\"data\"), e = 0; e < d.length; e++) {\n              var f = {\n                data: d[e]\n              };\n              if (this.trigger(\"unselect\", f), f.prevented) return;\n            }\n\n            this.$element.val(this.placeholder.id).trigger(\"change\"), this.trigger(\"toggle\", {});\n          }\n        }\n      }, c.prototype._handleKeyboardClear = function (a, c, d) {\n        d.isOpen() || c.which != b.DELETE && c.which != b.BACKSPACE || this._handleClear(c);\n      }, c.prototype.update = function (b, c) {\n        if (b.call(this, c), !(this.$selection.find(\".select2-selection__placeholder\").length > 0 || 0 === c.length)) {\n          var d = a('<span class=\"select2-selection__clear\">&times;</span>');\n          d.data(\"data\", c), this.$selection.find(\".select2-selection__rendered\").prepend(d);\n        }\n      }, c;\n    }), b.define(\"select2/selection/search\", [\"jquery\", \"../utils\", \"../keys\"], function (a, b, c) {\n      function d(a, b, c) {\n        a.call(this, b, c);\n      }\n\n      return d.prototype.render = function (b) {\n        var c = a('<li class=\"select2-search select2-search--inline\"><input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" role=\"textbox\" aria-autocomplete=\"list\" /></li>');\n        this.$searchContainer = c, this.$search = c.find(\"input\");\n        var d = b.call(this);\n        return this._transferTabIndex(), d;\n      }, d.prototype.bind = function (a, b, d) {\n        var e = this;\n        a.call(this, b, d), b.on(\"open\", function () {\n          e.$search.trigger(\"focus\");\n        }), b.on(\"close\", function () {\n          e.$search.val(\"\"), e.$search.removeAttr(\"aria-activedescendant\"), e.$search.trigger(\"focus\");\n        }), b.on(\"enable\", function () {\n          e.$search.prop(\"disabled\", !1), e._transferTabIndex();\n        }), b.on(\"disable\", function () {\n          e.$search.prop(\"disabled\", !0);\n        }), b.on(\"focus\", function (a) {\n          e.$search.trigger(\"focus\");\n        }), b.on(\"results:focus\", function (a) {\n          e.$search.attr(\"aria-activedescendant\", a.id);\n        }), this.$selection.on(\"focusin\", \".select2-search--inline\", function (a) {\n          e.trigger(\"focus\", a);\n        }), this.$selection.on(\"focusout\", \".select2-search--inline\", function (a) {\n          e._handleBlur(a);\n        }), this.$selection.on(\"keydown\", \".select2-search--inline\", function (a) {\n          if (a.stopPropagation(), e.trigger(\"keypress\", a), e._keyUpPrevented = a.isDefaultPrevented(), a.which === c.BACKSPACE && \"\" === e.$search.val()) {\n            var b = e.$searchContainer.prev(\".select2-selection__choice\");\n\n            if (b.length > 0) {\n              var d = b.data(\"data\");\n              e.searchRemoveChoice(d), a.preventDefault();\n            }\n          }\n        });\n        var f = document.documentMode,\n            g = f && f <= 11;\n        this.$selection.on(\"input.searchcheck\", \".select2-search--inline\", function (a) {\n          if (g) return void e.$selection.off(\"input.search input.searchcheck\");\n          e.$selection.off(\"keyup.search\");\n        }), this.$selection.on(\"keyup.search input.search\", \".select2-search--inline\", function (a) {\n          if (g && \"input\" === a.type) return void e.$selection.off(\"input.search input.searchcheck\");\n          var b = a.which;\n          b != c.SHIFT && b != c.CTRL && b != c.ALT && b != c.TAB && e.handleSearch(a);\n        });\n      }, d.prototype._transferTabIndex = function (a) {\n        this.$search.attr(\"tabindex\", this.$selection.attr(\"tabindex\")), this.$selection.attr(\"tabindex\", \"-1\");\n      }, d.prototype.createPlaceholder = function (a, b) {\n        this.$search.attr(\"placeholder\", b.text);\n      }, d.prototype.update = function (a, b) {\n        var c = this.$search[0] == document.activeElement;\n        this.$search.attr(\"placeholder\", \"\"), a.call(this, b), this.$selection.find(\".select2-selection__rendered\").append(this.$searchContainer), this.resizeSearch(), c && this.$search.focus();\n      }, d.prototype.handleSearch = function () {\n        if (this.resizeSearch(), !this._keyUpPrevented) {\n          var a = this.$search.val();\n          this.trigger(\"query\", {\n            term: a\n          });\n        }\n\n        this._keyUpPrevented = !1;\n      }, d.prototype.searchRemoveChoice = function (a, b) {\n        this.trigger(\"unselect\", {\n          data: b\n        }), this.$search.val(b.text), this.handleSearch();\n      }, d.prototype.resizeSearch = function () {\n        this.$search.css(\"width\", \"25px\");\n        var a = \"\";\n        if (\"\" !== this.$search.attr(\"placeholder\")) a = this.$selection.find(\".select2-selection__rendered\").innerWidth();else {\n          a = .75 * (this.$search.val().length + 1) + \"em\";\n        }\n        this.$search.css(\"width\", a);\n      }, d;\n    }), b.define(\"select2/selection/eventRelay\", [\"jquery\"], function (a) {\n      function b() {}\n\n      return b.prototype.bind = function (b, c, d) {\n        var e = this,\n            f = [\"open\", \"opening\", \"close\", \"closing\", \"select\", \"selecting\", \"unselect\", \"unselecting\"],\n            g = [\"opening\", \"closing\", \"selecting\", \"unselecting\"];\n        b.call(this, c, d), c.on(\"*\", function (b, c) {\n          if (-1 !== a.inArray(b, f)) {\n            c = c || {};\n            var d = a.Event(\"select2:\" + b, {\n              params: c\n            });\n            e.$element.trigger(d), -1 !== a.inArray(b, g) && (c.prevented = d.isDefaultPrevented());\n          }\n        });\n      }, b;\n    }), b.define(\"select2/translation\", [\"jquery\", \"require\"], function (a, b) {\n      function c(a) {\n        this.dict = a || {};\n      }\n\n      return c.prototype.all = function () {\n        return this.dict;\n      }, c.prototype.get = function (a) {\n        return this.dict[a];\n      }, c.prototype.extend = function (b) {\n        this.dict = a.extend({}, b.all(), this.dict);\n      }, c._cache = {}, c.loadPath = function (a) {\n        if (!(a in c._cache)) {\n          var d = b(a);\n          c._cache[a] = d;\n        }\n\n        return new c(c._cache[a]);\n      }, c;\n    }), b.define(\"select2/diacritics\", [], function () {\n      return {\n        \"Ⓐ\": \"A\",\n        \"Ａ\": \"A\",\n        \"À\": \"A\",\n        \"Á\": \"A\",\n        \"Â\": \"A\",\n        \"Ầ\": \"A\",\n        \"Ấ\": \"A\",\n        \"Ẫ\": \"A\",\n        \"Ẩ\": \"A\",\n        \"Ã\": \"A\",\n        \"Ā\": \"A\",\n        \"Ă\": \"A\",\n        \"Ằ\": \"A\",\n        \"Ắ\": \"A\",\n        \"Ẵ\": \"A\",\n        \"Ẳ\": \"A\",\n        \"Ȧ\": \"A\",\n        \"Ǡ\": \"A\",\n        \"Ä\": \"A\",\n        \"Ǟ\": \"A\",\n        \"Ả\": \"A\",\n        \"Å\": \"A\",\n        \"Ǻ\": \"A\",\n        \"Ǎ\": \"A\",\n        \"Ȁ\": \"A\",\n        \"Ȃ\": \"A\",\n        \"Ạ\": \"A\",\n        \"Ậ\": \"A\",\n        \"Ặ\": \"A\",\n        \"Ḁ\": \"A\",\n        \"Ą\": \"A\",\n        \"Ⱥ\": \"A\",\n        \"Ɐ\": \"A\",\n        \"Ꜳ\": \"AA\",\n        \"Æ\": \"AE\",\n        \"Ǽ\": \"AE\",\n        \"Ǣ\": \"AE\",\n        \"Ꜵ\": \"AO\",\n        \"Ꜷ\": \"AU\",\n        \"Ꜹ\": \"AV\",\n        \"Ꜻ\": \"AV\",\n        \"Ꜽ\": \"AY\",\n        \"Ⓑ\": \"B\",\n        \"Ｂ\": \"B\",\n        \"Ḃ\": \"B\",\n        \"Ḅ\": \"B\",\n        \"Ḇ\": \"B\",\n        \"Ƀ\": \"B\",\n        \"Ƃ\": \"B\",\n        \"Ɓ\": \"B\",\n        \"Ⓒ\": \"C\",\n        \"Ｃ\": \"C\",\n        \"Ć\": \"C\",\n        \"Ĉ\": \"C\",\n        \"Ċ\": \"C\",\n        \"Č\": \"C\",\n        \"Ç\": \"C\",\n        \"Ḉ\": \"C\",\n        \"Ƈ\": \"C\",\n        \"Ȼ\": \"C\",\n        \"Ꜿ\": \"C\",\n        \"Ⓓ\": \"D\",\n        \"Ｄ\": \"D\",\n        \"Ḋ\": \"D\",\n        \"Ď\": \"D\",\n        \"Ḍ\": \"D\",\n        \"Ḑ\": \"D\",\n        \"Ḓ\": \"D\",\n        \"Ḏ\": \"D\",\n        \"Đ\": \"D\",\n        \"Ƌ\": \"D\",\n        \"Ɗ\": \"D\",\n        \"Ɖ\": \"D\",\n        \"Ꝺ\": \"D\",\n        \"Ǳ\": \"DZ\",\n        \"Ǆ\": \"DZ\",\n        \"ǲ\": \"Dz\",\n        \"ǅ\": \"Dz\",\n        \"Ⓔ\": \"E\",\n        \"Ｅ\": \"E\",\n        \"È\": \"E\",\n        \"É\": \"E\",\n        \"Ê\": \"E\",\n        \"Ề\": \"E\",\n        \"Ế\": \"E\",\n        \"Ễ\": \"E\",\n        \"Ể\": \"E\",\n        \"Ẽ\": \"E\",\n        \"Ē\": \"E\",\n        \"Ḕ\": \"E\",\n        \"Ḗ\": \"E\",\n        \"Ĕ\": \"E\",\n        \"Ė\": \"E\",\n        \"Ë\": \"E\",\n        \"Ẻ\": \"E\",\n        \"Ě\": \"E\",\n        \"Ȅ\": \"E\",\n        \"Ȇ\": \"E\",\n        \"Ẹ\": \"E\",\n        \"Ệ\": \"E\",\n        \"Ȩ\": \"E\",\n        \"Ḝ\": \"E\",\n        \"Ę\": \"E\",\n        \"Ḙ\": \"E\",\n        \"Ḛ\": \"E\",\n        \"Ɛ\": \"E\",\n        \"Ǝ\": \"E\",\n        \"Ⓕ\": \"F\",\n        \"Ｆ\": \"F\",\n        \"Ḟ\": \"F\",\n        \"Ƒ\": \"F\",\n        \"Ꝼ\": \"F\",\n        \"Ⓖ\": \"G\",\n        \"Ｇ\": \"G\",\n        \"Ǵ\": \"G\",\n        \"Ĝ\": \"G\",\n        \"Ḡ\": \"G\",\n        \"Ğ\": \"G\",\n        \"Ġ\": \"G\",\n        \"Ǧ\": \"G\",\n        \"Ģ\": \"G\",\n        \"Ǥ\": \"G\",\n        \"Ɠ\": \"G\",\n        \"Ꞡ\": \"G\",\n        \"Ᵹ\": \"G\",\n        \"Ꝿ\": \"G\",\n        \"Ⓗ\": \"H\",\n        \"Ｈ\": \"H\",\n        \"Ĥ\": \"H\",\n        \"Ḣ\": \"H\",\n        \"Ḧ\": \"H\",\n        \"Ȟ\": \"H\",\n        \"Ḥ\": \"H\",\n        \"Ḩ\": \"H\",\n        \"Ḫ\": \"H\",\n        \"Ħ\": \"H\",\n        \"Ⱨ\": \"H\",\n        \"Ⱶ\": \"H\",\n        \"Ɥ\": \"H\",\n        \"Ⓘ\": \"I\",\n        \"Ｉ\": \"I\",\n        \"Ì\": \"I\",\n        \"Í\": \"I\",\n        \"Î\": \"I\",\n        \"Ĩ\": \"I\",\n        \"Ī\": \"I\",\n        \"Ĭ\": \"I\",\n        \"İ\": \"I\",\n        \"Ï\": \"I\",\n        \"Ḯ\": \"I\",\n        \"Ỉ\": \"I\",\n        \"Ǐ\": \"I\",\n        \"Ȉ\": \"I\",\n        \"Ȋ\": \"I\",\n        \"Ị\": \"I\",\n        \"Į\": \"I\",\n        \"Ḭ\": \"I\",\n        \"Ɨ\": \"I\",\n        \"Ⓙ\": \"J\",\n        \"Ｊ\": \"J\",\n        \"Ĵ\": \"J\",\n        \"Ɉ\": \"J\",\n        \"Ⓚ\": \"K\",\n        \"Ｋ\": \"K\",\n        \"Ḱ\": \"K\",\n        \"Ǩ\": \"K\",\n        \"Ḳ\": \"K\",\n        \"Ķ\": \"K\",\n        \"Ḵ\": \"K\",\n        \"Ƙ\": \"K\",\n        \"Ⱪ\": \"K\",\n        \"Ꝁ\": \"K\",\n        \"Ꝃ\": \"K\",\n        \"Ꝅ\": \"K\",\n        \"Ꞣ\": \"K\",\n        \"Ⓛ\": \"L\",\n        \"Ｌ\": \"L\",\n        \"Ŀ\": \"L\",\n        \"Ĺ\": \"L\",\n        \"Ľ\": \"L\",\n        \"Ḷ\": \"L\",\n        \"Ḹ\": \"L\",\n        \"Ļ\": \"L\",\n        \"Ḽ\": \"L\",\n        \"Ḻ\": \"L\",\n        \"Ł\": \"L\",\n        \"Ƚ\": \"L\",\n        \"Ɫ\": \"L\",\n        \"Ⱡ\": \"L\",\n        \"Ꝉ\": \"L\",\n        \"Ꝇ\": \"L\",\n        \"Ꞁ\": \"L\",\n        \"Ǉ\": \"LJ\",\n        \"ǈ\": \"Lj\",\n        \"Ⓜ\": \"M\",\n        \"Ｍ\": \"M\",\n        \"Ḿ\": \"M\",\n        \"Ṁ\": \"M\",\n        \"Ṃ\": \"M\",\n        \"Ɱ\": \"M\",\n        \"Ɯ\": \"M\",\n        \"Ⓝ\": \"N\",\n        \"Ｎ\": \"N\",\n        \"Ǹ\": \"N\",\n        \"Ń\": \"N\",\n        \"Ñ\": \"N\",\n        \"Ṅ\": \"N\",\n        \"Ň\": \"N\",\n        \"Ṇ\": \"N\",\n        \"Ņ\": \"N\",\n        \"Ṋ\": \"N\",\n        \"Ṉ\": \"N\",\n        \"Ƞ\": \"N\",\n        \"Ɲ\": \"N\",\n        \"Ꞑ\": \"N\",\n        \"Ꞥ\": \"N\",\n        \"Ǌ\": \"NJ\",\n        \"ǋ\": \"Nj\",\n        \"Ⓞ\": \"O\",\n        \"Ｏ\": \"O\",\n        \"Ò\": \"O\",\n        \"Ó\": \"O\",\n        \"Ô\": \"O\",\n        \"Ồ\": \"O\",\n        \"Ố\": \"O\",\n        \"Ỗ\": \"O\",\n        \"Ổ\": \"O\",\n        \"Õ\": \"O\",\n        \"Ṍ\": \"O\",\n        \"Ȭ\": \"O\",\n        \"Ṏ\": \"O\",\n        \"Ō\": \"O\",\n        \"Ṑ\": \"O\",\n        \"Ṓ\": \"O\",\n        \"Ŏ\": \"O\",\n        \"Ȯ\": \"O\",\n        \"Ȱ\": \"O\",\n        \"Ö\": \"O\",\n        \"Ȫ\": \"O\",\n        \"Ỏ\": \"O\",\n        \"Ő\": \"O\",\n        \"Ǒ\": \"O\",\n        \"Ȍ\": \"O\",\n        \"Ȏ\": \"O\",\n        \"Ơ\": \"O\",\n        \"Ờ\": \"O\",\n        \"Ớ\": \"O\",\n        \"Ỡ\": \"O\",\n        \"Ở\": \"O\",\n        \"Ợ\": \"O\",\n        \"Ọ\": \"O\",\n        \"Ộ\": \"O\",\n        \"Ǫ\": \"O\",\n        \"Ǭ\": \"O\",\n        \"Ø\": \"O\",\n        \"Ǿ\": \"O\",\n        \"Ɔ\": \"O\",\n        \"Ɵ\": \"O\",\n        \"Ꝋ\": \"O\",\n        \"Ꝍ\": \"O\",\n        \"Ƣ\": \"OI\",\n        \"Ꝏ\": \"OO\",\n        \"Ȣ\": \"OU\",\n        \"Ⓟ\": \"P\",\n        \"Ｐ\": \"P\",\n        \"Ṕ\": \"P\",\n        \"Ṗ\": \"P\",\n        \"Ƥ\": \"P\",\n        \"Ᵽ\": \"P\",\n        \"Ꝑ\": \"P\",\n        \"Ꝓ\": \"P\",\n        \"Ꝕ\": \"P\",\n        \"Ⓠ\": \"Q\",\n        \"Ｑ\": \"Q\",\n        \"Ꝗ\": \"Q\",\n        \"Ꝙ\": \"Q\",\n        \"Ɋ\": \"Q\",\n        \"Ⓡ\": \"R\",\n        \"Ｒ\": \"R\",\n        \"Ŕ\": \"R\",\n        \"Ṙ\": \"R\",\n        \"Ř\": \"R\",\n        \"Ȑ\": \"R\",\n        \"Ȓ\": \"R\",\n        \"Ṛ\": \"R\",\n        \"Ṝ\": \"R\",\n        \"Ŗ\": \"R\",\n        \"Ṟ\": \"R\",\n        \"Ɍ\": \"R\",\n        \"Ɽ\": \"R\",\n        \"Ꝛ\": \"R\",\n        \"Ꞧ\": \"R\",\n        \"Ꞃ\": \"R\",\n        \"Ⓢ\": \"S\",\n        \"Ｓ\": \"S\",\n        \"ẞ\": \"S\",\n        \"Ś\": \"S\",\n        \"Ṥ\": \"S\",\n        \"Ŝ\": \"S\",\n        \"Ṡ\": \"S\",\n        \"Š\": \"S\",\n        \"Ṧ\": \"S\",\n        \"Ṣ\": \"S\",\n        \"Ṩ\": \"S\",\n        \"Ș\": \"S\",\n        \"Ş\": \"S\",\n        \"Ȿ\": \"S\",\n        \"Ꞩ\": \"S\",\n        \"Ꞅ\": \"S\",\n        \"Ⓣ\": \"T\",\n        \"Ｔ\": \"T\",\n        \"Ṫ\": \"T\",\n        \"Ť\": \"T\",\n        \"Ṭ\": \"T\",\n        \"Ț\": \"T\",\n        \"Ţ\": \"T\",\n        \"Ṱ\": \"T\",\n        \"Ṯ\": \"T\",\n        \"Ŧ\": \"T\",\n        \"Ƭ\": \"T\",\n        \"Ʈ\": \"T\",\n        \"Ⱦ\": \"T\",\n        \"Ꞇ\": \"T\",\n        \"Ꜩ\": \"TZ\",\n        \"Ⓤ\": \"U\",\n        \"Ｕ\": \"U\",\n        \"Ù\": \"U\",\n        \"Ú\": \"U\",\n        \"Û\": \"U\",\n        \"Ũ\": \"U\",\n        \"Ṹ\": \"U\",\n        \"Ū\": \"U\",\n        \"Ṻ\": \"U\",\n        \"Ŭ\": \"U\",\n        \"Ü\": \"U\",\n        \"Ǜ\": \"U\",\n        \"Ǘ\": \"U\",\n        \"Ǖ\": \"U\",\n        \"Ǚ\": \"U\",\n        \"Ủ\": \"U\",\n        \"Ů\": \"U\",\n        \"Ű\": \"U\",\n        \"Ǔ\": \"U\",\n        \"Ȕ\": \"U\",\n        \"Ȗ\": \"U\",\n        \"Ư\": \"U\",\n        \"Ừ\": \"U\",\n        \"Ứ\": \"U\",\n        \"Ữ\": \"U\",\n        \"Ử\": \"U\",\n        \"Ự\": \"U\",\n        \"Ụ\": \"U\",\n        \"Ṳ\": \"U\",\n        \"Ų\": \"U\",\n        \"Ṷ\": \"U\",\n        \"Ṵ\": \"U\",\n        \"Ʉ\": \"U\",\n        \"Ⓥ\": \"V\",\n        \"Ｖ\": \"V\",\n        \"Ṽ\": \"V\",\n        \"Ṿ\": \"V\",\n        \"Ʋ\": \"V\",\n        \"Ꝟ\": \"V\",\n        \"Ʌ\": \"V\",\n        \"Ꝡ\": \"VY\",\n        \"Ⓦ\": \"W\",\n        \"Ｗ\": \"W\",\n        \"Ẁ\": \"W\",\n        \"Ẃ\": \"W\",\n        \"Ŵ\": \"W\",\n        \"Ẇ\": \"W\",\n        \"Ẅ\": \"W\",\n        \"Ẉ\": \"W\",\n        \"Ⱳ\": \"W\",\n        \"Ⓧ\": \"X\",\n        \"Ｘ\": \"X\",\n        \"Ẋ\": \"X\",\n        \"Ẍ\": \"X\",\n        \"Ⓨ\": \"Y\",\n        \"Ｙ\": \"Y\",\n        \"Ỳ\": \"Y\",\n        \"Ý\": \"Y\",\n        \"Ŷ\": \"Y\",\n        \"Ỹ\": \"Y\",\n        \"Ȳ\": \"Y\",\n        \"Ẏ\": \"Y\",\n        \"Ÿ\": \"Y\",\n        \"Ỷ\": \"Y\",\n        \"Ỵ\": \"Y\",\n        \"Ƴ\": \"Y\",\n        \"Ɏ\": \"Y\",\n        \"Ỿ\": \"Y\",\n        \"Ⓩ\": \"Z\",\n        \"Ｚ\": \"Z\",\n        \"Ź\": \"Z\",\n        \"Ẑ\": \"Z\",\n        \"Ż\": \"Z\",\n        \"Ž\": \"Z\",\n        \"Ẓ\": \"Z\",\n        \"Ẕ\": \"Z\",\n        \"Ƶ\": \"Z\",\n        \"Ȥ\": \"Z\",\n        \"Ɀ\": \"Z\",\n        \"Ⱬ\": \"Z\",\n        \"Ꝣ\": \"Z\",\n        \"ⓐ\": \"a\",\n        \"ａ\": \"a\",\n        \"ẚ\": \"a\",\n        \"à\": \"a\",\n        \"á\": \"a\",\n        \"â\": \"a\",\n        \"ầ\": \"a\",\n        \"ấ\": \"a\",\n        \"ẫ\": \"a\",\n        \"ẩ\": \"a\",\n        \"ã\": \"a\",\n        \"ā\": \"a\",\n        \"ă\": \"a\",\n        \"ằ\": \"a\",\n        \"ắ\": \"a\",\n        \"ẵ\": \"a\",\n        \"ẳ\": \"a\",\n        \"ȧ\": \"a\",\n        \"ǡ\": \"a\",\n        \"ä\": \"a\",\n        \"ǟ\": \"a\",\n        \"ả\": \"a\",\n        \"å\": \"a\",\n        \"ǻ\": \"a\",\n        \"ǎ\": \"a\",\n        \"ȁ\": \"a\",\n        \"ȃ\": \"a\",\n        \"ạ\": \"a\",\n        \"ậ\": \"a\",\n        \"ặ\": \"a\",\n        \"ḁ\": \"a\",\n        \"ą\": \"a\",\n        \"ⱥ\": \"a\",\n        \"ɐ\": \"a\",\n        \"ꜳ\": \"aa\",\n        \"æ\": \"ae\",\n        \"ǽ\": \"ae\",\n        \"ǣ\": \"ae\",\n        \"ꜵ\": \"ao\",\n        \"ꜷ\": \"au\",\n        \"ꜹ\": \"av\",\n        \"ꜻ\": \"av\",\n        \"ꜽ\": \"ay\",\n        \"ⓑ\": \"b\",\n        \"ｂ\": \"b\",\n        \"ḃ\": \"b\",\n        \"ḅ\": \"b\",\n        \"ḇ\": \"b\",\n        \"ƀ\": \"b\",\n        \"ƃ\": \"b\",\n        \"ɓ\": \"b\",\n        \"ⓒ\": \"c\",\n        \"ｃ\": \"c\",\n        \"ć\": \"c\",\n        \"ĉ\": \"c\",\n        \"ċ\": \"c\",\n        \"č\": \"c\",\n        \"ç\": \"c\",\n        \"ḉ\": \"c\",\n        \"ƈ\": \"c\",\n        \"ȼ\": \"c\",\n        \"ꜿ\": \"c\",\n        \"ↄ\": \"c\",\n        \"ⓓ\": \"d\",\n        \"ｄ\": \"d\",\n        \"ḋ\": \"d\",\n        \"ď\": \"d\",\n        \"ḍ\": \"d\",\n        \"ḑ\": \"d\",\n        \"ḓ\": \"d\",\n        \"ḏ\": \"d\",\n        \"đ\": \"d\",\n        \"ƌ\": \"d\",\n        \"ɖ\": \"d\",\n        \"ɗ\": \"d\",\n        \"ꝺ\": \"d\",\n        \"ǳ\": \"dz\",\n        \"ǆ\": \"dz\",\n        \"ⓔ\": \"e\",\n        \"ｅ\": \"e\",\n        \"è\": \"e\",\n        \"é\": \"e\",\n        \"ê\": \"e\",\n        \"ề\": \"e\",\n        \"ế\": \"e\",\n        \"ễ\": \"e\",\n        \"ể\": \"e\",\n        \"ẽ\": \"e\",\n        \"ē\": \"e\",\n        \"ḕ\": \"e\",\n        \"ḗ\": \"e\",\n        \"ĕ\": \"e\",\n        \"ė\": \"e\",\n        \"ë\": \"e\",\n        \"ẻ\": \"e\",\n        \"ě\": \"e\",\n        \"ȅ\": \"e\",\n        \"ȇ\": \"e\",\n        \"ẹ\": \"e\",\n        \"ệ\": \"e\",\n        \"ȩ\": \"e\",\n        \"ḝ\": \"e\",\n        \"ę\": \"e\",\n        \"ḙ\": \"e\",\n        \"ḛ\": \"e\",\n        \"ɇ\": \"e\",\n        \"ɛ\": \"e\",\n        \"ǝ\": \"e\",\n        \"ⓕ\": \"f\",\n        \"ｆ\": \"f\",\n        \"ḟ\": \"f\",\n        \"ƒ\": \"f\",\n        \"ꝼ\": \"f\",\n        \"ⓖ\": \"g\",\n        \"ｇ\": \"g\",\n        \"ǵ\": \"g\",\n        \"ĝ\": \"g\",\n        \"ḡ\": \"g\",\n        \"ğ\": \"g\",\n        \"ġ\": \"g\",\n        \"ǧ\": \"g\",\n        \"ģ\": \"g\",\n        \"ǥ\": \"g\",\n        \"ɠ\": \"g\",\n        \"ꞡ\": \"g\",\n        \"ᵹ\": \"g\",\n        \"ꝿ\": \"g\",\n        \"ⓗ\": \"h\",\n        \"ｈ\": \"h\",\n        \"ĥ\": \"h\",\n        \"ḣ\": \"h\",\n        \"ḧ\": \"h\",\n        \"ȟ\": \"h\",\n        \"ḥ\": \"h\",\n        \"ḩ\": \"h\",\n        \"ḫ\": \"h\",\n        \"ẖ\": \"h\",\n        \"ħ\": \"h\",\n        \"ⱨ\": \"h\",\n        \"ⱶ\": \"h\",\n        \"ɥ\": \"h\",\n        \"ƕ\": \"hv\",\n        \"ⓘ\": \"i\",\n        \"ｉ\": \"i\",\n        \"ì\": \"i\",\n        \"í\": \"i\",\n        \"î\": \"i\",\n        \"ĩ\": \"i\",\n        \"ī\": \"i\",\n        \"ĭ\": \"i\",\n        \"ï\": \"i\",\n        \"ḯ\": \"i\",\n        \"ỉ\": \"i\",\n        \"ǐ\": \"i\",\n        \"ȉ\": \"i\",\n        \"ȋ\": \"i\",\n        \"ị\": \"i\",\n        \"į\": \"i\",\n        \"ḭ\": \"i\",\n        \"ɨ\": \"i\",\n        \"ı\": \"i\",\n        \"ⓙ\": \"j\",\n        \"ｊ\": \"j\",\n        \"ĵ\": \"j\",\n        \"ǰ\": \"j\",\n        \"ɉ\": \"j\",\n        \"ⓚ\": \"k\",\n        \"ｋ\": \"k\",\n        \"ḱ\": \"k\",\n        \"ǩ\": \"k\",\n        \"ḳ\": \"k\",\n        \"ķ\": \"k\",\n        \"ḵ\": \"k\",\n        \"ƙ\": \"k\",\n        \"ⱪ\": \"k\",\n        \"ꝁ\": \"k\",\n        \"ꝃ\": \"k\",\n        \"ꝅ\": \"k\",\n        \"ꞣ\": \"k\",\n        \"ⓛ\": \"l\",\n        \"ｌ\": \"l\",\n        \"ŀ\": \"l\",\n        \"ĺ\": \"l\",\n        \"ľ\": \"l\",\n        \"ḷ\": \"l\",\n        \"ḹ\": \"l\",\n        \"ļ\": \"l\",\n        \"ḽ\": \"l\",\n        \"ḻ\": \"l\",\n        \"ſ\": \"l\",\n        \"ł\": \"l\",\n        \"ƚ\": \"l\",\n        \"ɫ\": \"l\",\n        \"ⱡ\": \"l\",\n        \"ꝉ\": \"l\",\n        \"ꞁ\": \"l\",\n        \"ꝇ\": \"l\",\n        \"ǉ\": \"lj\",\n        \"ⓜ\": \"m\",\n        \"ｍ\": \"m\",\n        \"ḿ\": \"m\",\n        \"ṁ\": \"m\",\n        \"ṃ\": \"m\",\n        \"ɱ\": \"m\",\n        \"ɯ\": \"m\",\n        \"ⓝ\": \"n\",\n        \"ｎ\": \"n\",\n        \"ǹ\": \"n\",\n        \"ń\": \"n\",\n        \"ñ\": \"n\",\n        \"ṅ\": \"n\",\n        \"ň\": \"n\",\n        \"ṇ\": \"n\",\n        \"ņ\": \"n\",\n        \"ṋ\": \"n\",\n        \"ṉ\": \"n\",\n        \"ƞ\": \"n\",\n        \"ɲ\": \"n\",\n        \"ŉ\": \"n\",\n        \"ꞑ\": \"n\",\n        \"ꞥ\": \"n\",\n        \"ǌ\": \"nj\",\n        \"ⓞ\": \"o\",\n        \"ｏ\": \"o\",\n        \"ò\": \"o\",\n        \"ó\": \"o\",\n        \"ô\": \"o\",\n        \"ồ\": \"o\",\n        \"ố\": \"o\",\n        \"ỗ\": \"o\",\n        \"ổ\": \"o\",\n        \"õ\": \"o\",\n        \"ṍ\": \"o\",\n        \"ȭ\": \"o\",\n        \"ṏ\": \"o\",\n        \"ō\": \"o\",\n        \"ṑ\": \"o\",\n        \"ṓ\": \"o\",\n        \"ŏ\": \"o\",\n        \"ȯ\": \"o\",\n        \"ȱ\": \"o\",\n        \"ö\": \"o\",\n        \"ȫ\": \"o\",\n        \"ỏ\": \"o\",\n        \"ő\": \"o\",\n        \"ǒ\": \"o\",\n        \"ȍ\": \"o\",\n        \"ȏ\": \"o\",\n        \"ơ\": \"o\",\n        \"ờ\": \"o\",\n        \"ớ\": \"o\",\n        \"ỡ\": \"o\",\n        \"ở\": \"o\",\n        \"ợ\": \"o\",\n        \"ọ\": \"o\",\n        \"ộ\": \"o\",\n        \"ǫ\": \"o\",\n        \"ǭ\": \"o\",\n        \"ø\": \"o\",\n        \"ǿ\": \"o\",\n        \"ɔ\": \"o\",\n        \"ꝋ\": \"o\",\n        \"ꝍ\": \"o\",\n        \"ɵ\": \"o\",\n        \"ƣ\": \"oi\",\n        \"ȣ\": \"ou\",\n        \"ꝏ\": \"oo\",\n        \"ⓟ\": \"p\",\n        \"ｐ\": \"p\",\n        \"ṕ\": \"p\",\n        \"ṗ\": \"p\",\n        \"ƥ\": \"p\",\n        \"ᵽ\": \"p\",\n        \"ꝑ\": \"p\",\n        \"ꝓ\": \"p\",\n        \"ꝕ\": \"p\",\n        \"ⓠ\": \"q\",\n        \"ｑ\": \"q\",\n        \"ɋ\": \"q\",\n        \"ꝗ\": \"q\",\n        \"ꝙ\": \"q\",\n        \"ⓡ\": \"r\",\n        \"ｒ\": \"r\",\n        \"ŕ\": \"r\",\n        \"ṙ\": \"r\",\n        \"ř\": \"r\",\n        \"ȑ\": \"r\",\n        \"ȓ\": \"r\",\n        \"ṛ\": \"r\",\n        \"ṝ\": \"r\",\n        \"ŗ\": \"r\",\n        \"ṟ\": \"r\",\n        \"ɍ\": \"r\",\n        \"ɽ\": \"r\",\n        \"ꝛ\": \"r\",\n        \"ꞧ\": \"r\",\n        \"ꞃ\": \"r\",\n        \"ⓢ\": \"s\",\n        \"ｓ\": \"s\",\n        \"ß\": \"s\",\n        \"ś\": \"s\",\n        \"ṥ\": \"s\",\n        \"ŝ\": \"s\",\n        \"ṡ\": \"s\",\n        \"š\": \"s\",\n        \"ṧ\": \"s\",\n        \"ṣ\": \"s\",\n        \"ṩ\": \"s\",\n        \"ș\": \"s\",\n        \"ş\": \"s\",\n        \"ȿ\": \"s\",\n        \"ꞩ\": \"s\",\n        \"ꞅ\": \"s\",\n        \"ẛ\": \"s\",\n        \"ⓣ\": \"t\",\n        \"ｔ\": \"t\",\n        \"ṫ\": \"t\",\n        \"ẗ\": \"t\",\n        \"ť\": \"t\",\n        \"ṭ\": \"t\",\n        \"ț\": \"t\",\n        \"ţ\": \"t\",\n        \"ṱ\": \"t\",\n        \"ṯ\": \"t\",\n        \"ŧ\": \"t\",\n        \"ƭ\": \"t\",\n        \"ʈ\": \"t\",\n        \"ⱦ\": \"t\",\n        \"ꞇ\": \"t\",\n        \"ꜩ\": \"tz\",\n        \"ⓤ\": \"u\",\n        \"ｕ\": \"u\",\n        \"ù\": \"u\",\n        \"ú\": \"u\",\n        \"û\": \"u\",\n        \"ũ\": \"u\",\n        \"ṹ\": \"u\",\n        \"ū\": \"u\",\n        \"ṻ\": \"u\",\n        \"ŭ\": \"u\",\n        \"ü\": \"u\",\n        \"ǜ\": \"u\",\n        \"ǘ\": \"u\",\n        \"ǖ\": \"u\",\n        \"ǚ\": \"u\",\n        \"ủ\": \"u\",\n        \"ů\": \"u\",\n        \"ű\": \"u\",\n        \"ǔ\": \"u\",\n        \"ȕ\": \"u\",\n        \"ȗ\": \"u\",\n        \"ư\": \"u\",\n        \"ừ\": \"u\",\n        \"ứ\": \"u\",\n        \"ữ\": \"u\",\n        \"ử\": \"u\",\n        \"ự\": \"u\",\n        \"ụ\": \"u\",\n        \"ṳ\": \"u\",\n        \"ų\": \"u\",\n        \"ṷ\": \"u\",\n        \"ṵ\": \"u\",\n        \"ʉ\": \"u\",\n        \"ⓥ\": \"v\",\n        \"ｖ\": \"v\",\n        \"ṽ\": \"v\",\n        \"ṿ\": \"v\",\n        \"ʋ\": \"v\",\n        \"ꝟ\": \"v\",\n        \"ʌ\": \"v\",\n        \"ꝡ\": \"vy\",\n        \"ⓦ\": \"w\",\n        \"ｗ\": \"w\",\n        \"ẁ\": \"w\",\n        \"ẃ\": \"w\",\n        \"ŵ\": \"w\",\n        \"ẇ\": \"w\",\n        \"ẅ\": \"w\",\n        \"ẘ\": \"w\",\n        \"ẉ\": \"w\",\n        \"ⱳ\": \"w\",\n        \"ⓧ\": \"x\",\n        \"ｘ\": \"x\",\n        \"ẋ\": \"x\",\n        \"ẍ\": \"x\",\n        \"ⓨ\": \"y\",\n        \"ｙ\": \"y\",\n        \"ỳ\": \"y\",\n        \"ý\": \"y\",\n        \"ŷ\": \"y\",\n        \"ỹ\": \"y\",\n        \"ȳ\": \"y\",\n        \"ẏ\": \"y\",\n        \"ÿ\": \"y\",\n        \"ỷ\": \"y\",\n        \"ẙ\": \"y\",\n        \"ỵ\": \"y\",\n        \"ƴ\": \"y\",\n        \"ɏ\": \"y\",\n        \"ỿ\": \"y\",\n        \"ⓩ\": \"z\",\n        \"ｚ\": \"z\",\n        \"ź\": \"z\",\n        \"ẑ\": \"z\",\n        \"ż\": \"z\",\n        \"ž\": \"z\",\n        \"ẓ\": \"z\",\n        \"ẕ\": \"z\",\n        \"ƶ\": \"z\",\n        \"ȥ\": \"z\",\n        \"ɀ\": \"z\",\n        \"ⱬ\": \"z\",\n        \"ꝣ\": \"z\",\n        \"Ά\": \"Α\",\n        \"Έ\": \"Ε\",\n        \"Ή\": \"Η\",\n        \"Ί\": \"Ι\",\n        \"Ϊ\": \"Ι\",\n        \"Ό\": \"Ο\",\n        \"Ύ\": \"Υ\",\n        \"Ϋ\": \"Υ\",\n        \"Ώ\": \"Ω\",\n        \"ά\": \"α\",\n        \"έ\": \"ε\",\n        \"ή\": \"η\",\n        \"ί\": \"ι\",\n        \"ϊ\": \"ι\",\n        \"ΐ\": \"ι\",\n        \"ό\": \"ο\",\n        \"ύ\": \"υ\",\n        \"ϋ\": \"υ\",\n        \"ΰ\": \"υ\",\n        \"ω\": \"ω\",\n        \"ς\": \"σ\"\n      };\n    }), b.define(\"select2/data/base\", [\"../utils\"], function (a) {\n      function b(a, c) {\n        b.__super__.constructor.call(this);\n      }\n\n      return a.Extend(b, a.Observable), b.prototype.current = function (a) {\n        throw new Error(\"The `current` method must be defined in child classes.\");\n      }, b.prototype.query = function (a, b) {\n        throw new Error(\"The `query` method must be defined in child classes.\");\n      }, b.prototype.bind = function (a, b) {}, b.prototype.destroy = function () {}, b.prototype.generateResultId = function (b, c) {\n        var d = b.id + \"-result-\";\n        return d += a.generateChars(4), null != c.id ? d += \"-\" + c.id.toString() : d += \"-\" + a.generateChars(4), d;\n      }, b;\n    }), b.define(\"select2/data/select\", [\"./base\", \"../utils\", \"jquery\"], function (a, b, c) {\n      function d(a, b) {\n        this.$element = a, this.options = b, d.__super__.constructor.call(this);\n      }\n\n      return b.Extend(d, a), d.prototype.current = function (a) {\n        var b = [],\n            d = this;\n        this.$element.find(\":selected\").each(function () {\n          var a = c(this),\n              e = d.item(a);\n          b.push(e);\n        }), a(b);\n      }, d.prototype.select = function (a) {\n        var b = this;\n        if (a.selected = !0, c(a.element).is(\"option\")) return a.element.selected = !0, void this.$element.trigger(\"change\");\n        if (this.$element.prop(\"multiple\")) this.current(function (d) {\n          var e = [];\n          a = [a], a.push.apply(a, d);\n\n          for (var f = 0; f < a.length; f++) {\n            var g = a[f].id;\n            -1 === c.inArray(g, e) && e.push(g);\n          }\n\n          b.$element.val(e), b.$element.trigger(\"change\");\n        });else {\n          var d = a.id;\n          this.$element.val(d), this.$element.trigger(\"change\");\n        }\n      }, d.prototype.unselect = function (a) {\n        var b = this;\n\n        if (this.$element.prop(\"multiple\")) {\n          if (a.selected = !1, c(a.element).is(\"option\")) return a.element.selected = !1, void this.$element.trigger(\"change\");\n          this.current(function (d) {\n            for (var e = [], f = 0; f < d.length; f++) {\n              var g = d[f].id;\n              g !== a.id && -1 === c.inArray(g, e) && e.push(g);\n            }\n\n            b.$element.val(e), b.$element.trigger(\"change\");\n          });\n        }\n      }, d.prototype.bind = function (a, b) {\n        var c = this;\n        this.container = a, a.on(\"select\", function (a) {\n          c.select(a.data);\n        }), a.on(\"unselect\", function (a) {\n          c.unselect(a.data);\n        });\n      }, d.prototype.destroy = function () {\n        this.$element.find(\"*\").each(function () {\n          c.removeData(this, \"data\");\n        });\n      }, d.prototype.query = function (a, b) {\n        var d = [],\n            e = this;\n        this.$element.children().each(function () {\n          var b = c(this);\n\n          if (b.is(\"option\") || b.is(\"optgroup\")) {\n            var f = e.item(b),\n                g = e.matches(a, f);\n            null !== g && d.push(g);\n          }\n        }), b({\n          results: d\n        });\n      }, d.prototype.addOptions = function (a) {\n        b.appendMany(this.$element, a);\n      }, d.prototype.option = function (a) {\n        var b;\n        a.children ? (b = document.createElement(\"optgroup\"), b.label = a.text) : (b = document.createElement(\"option\"), void 0 !== b.textContent ? b.textContent = a.text : b.innerText = a.text), void 0 !== a.id && (b.value = a.id), a.disabled && (b.disabled = !0), a.selected && (b.selected = !0), a.title && (b.title = a.title);\n\n        var d = c(b),\n            e = this._normalizeItem(a);\n\n        return e.element = b, c.data(b, \"data\", e), d;\n      }, d.prototype.item = function (a) {\n        var b = {};\n        if (null != (b = c.data(a[0], \"data\"))) return b;\n        if (a.is(\"option\")) b = {\n          id: a.val(),\n          text: a.text(),\n          disabled: a.prop(\"disabled\"),\n          selected: a.prop(\"selected\"),\n          title: a.prop(\"title\")\n        };else if (a.is(\"optgroup\")) {\n          b = {\n            text: a.prop(\"label\"),\n            children: [],\n            title: a.prop(\"title\")\n          };\n\n          for (var d = a.children(\"option\"), e = [], f = 0; f < d.length; f++) {\n            var g = c(d[f]),\n                h = this.item(g);\n            e.push(h);\n          }\n\n          b.children = e;\n        }\n        return b = this._normalizeItem(b), b.element = a[0], c.data(a[0], \"data\", b), b;\n      }, d.prototype._normalizeItem = function (a) {\n        c.isPlainObject(a) || (a = {\n          id: a,\n          text: a\n        }), a = c.extend({}, {\n          text: \"\"\n        }, a);\n        var b = {\n          selected: !1,\n          disabled: !1\n        };\n        return null != a.id && (a.id = a.id.toString()), null != a.text && (a.text = a.text.toString()), null == a._resultId && a.id && null != this.container && (a._resultId = this.generateResultId(this.container, a)), c.extend({}, b, a);\n      }, d.prototype.matches = function (a, b) {\n        return this.options.get(\"matcher\")(a, b);\n      }, d;\n    }), b.define(\"select2/data/array\", [\"./select\", \"../utils\", \"jquery\"], function (a, b, c) {\n      function d(a, b) {\n        var c = b.get(\"data\") || [];\n        d.__super__.constructor.call(this, a, b), this.addOptions(this.convertToOptions(c));\n      }\n\n      return b.Extend(d, a), d.prototype.select = function (a) {\n        var b = this.$element.find(\"option\").filter(function (b, c) {\n          return c.value == a.id.toString();\n        });\n        0 === b.length && (b = this.option(a), this.addOptions(b)), d.__super__.select.call(this, a);\n      }, d.prototype.convertToOptions = function (a) {\n        function d(a) {\n          return function () {\n            return c(this).val() == a.id;\n          };\n        }\n\n        for (var e = this, f = this.$element.find(\"option\"), g = f.map(function () {\n          return e.item(c(this)).id;\n        }).get(), h = [], i = 0; i < a.length; i++) {\n          var j = this._normalizeItem(a[i]);\n\n          if (c.inArray(j.id, g) >= 0) {\n            var k = f.filter(d(j)),\n                l = this.item(k),\n                m = c.extend(!0, {}, j, l),\n                n = this.option(m);\n            k.replaceWith(n);\n          } else {\n            var o = this.option(j);\n\n            if (j.children) {\n              var p = this.convertToOptions(j.children);\n              b.appendMany(o, p);\n            }\n\n            h.push(o);\n          }\n        }\n\n        return h;\n      }, d;\n    }), b.define(\"select2/data/ajax\", [\"./array\", \"../utils\", \"jquery\"], function (a, b, c) {\n      function d(a, b) {\n        this.ajaxOptions = this._applyDefaults(b.get(\"ajax\")), null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults), d.__super__.constructor.call(this, a, b);\n      }\n\n      return b.Extend(d, a), d.prototype._applyDefaults = function (a) {\n        var b = {\n          data: function data(a) {\n            return c.extend({}, a, {\n              q: a.term\n            });\n          },\n          transport: function transport(a, b, d) {\n            var e = c.ajax(a);\n            return e.then(b), e.fail(d), e;\n          }\n        };\n        return c.extend({}, b, a, !0);\n      }, d.prototype.processResults = function (a) {\n        return a;\n      }, d.prototype.query = function (a, b) {\n        function d() {\n          var d = f.transport(f, function (d) {\n            var f = e.processResults(d, a);\n            e.options.get(\"debug\") && window.console && console.error && (f && f.results && c.isArray(f.results) || console.error(\"Select2: The AJAX results did not return an array in the `results` key of the response.\")), b(f);\n          }, function () {\n            d.status && \"0\" === d.status || e.trigger(\"results:message\", {\n              message: \"errorLoading\"\n            });\n          });\n          e._request = d;\n        }\n\n        var e = this;\n        null != this._request && (c.isFunction(this._request.abort) && this._request.abort(), this._request = null);\n        var f = c.extend({\n          type: \"GET\"\n        }, this.ajaxOptions);\n        \"function\" == typeof f.url && (f.url = f.url.call(this.$element, a)), \"function\" == typeof f.data && (f.data = f.data.call(this.$element, a)), this.ajaxOptions.delay && null != a.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), this._queryTimeout = window.setTimeout(d, this.ajaxOptions.delay)) : d();\n      }, d;\n    }), b.define(\"select2/data/tags\", [\"jquery\"], function (a) {\n      function b(b, c, d) {\n        var e = d.get(\"tags\"),\n            f = d.get(\"createTag\");\n        void 0 !== f && (this.createTag = f);\n        var g = d.get(\"insertTag\");\n        if (void 0 !== g && (this.insertTag = g), b.call(this, c, d), a.isArray(e)) for (var h = 0; h < e.length; h++) {\n          var i = e[h],\n              j = this._normalizeItem(i),\n              k = this.option(j);\n\n          this.$element.append(k);\n        }\n      }\n\n      return b.prototype.query = function (a, b, c) {\n        function d(a, f) {\n          for (var g = a.results, h = 0; h < g.length; h++) {\n            var i = g[h],\n                j = null != i.children && !d({\n              results: i.children\n            }, !0);\n            if ((i.text || \"\").toUpperCase() === (b.term || \"\").toUpperCase() || j) return !f && (a.data = g, void c(a));\n          }\n\n          if (f) return !0;\n          var k = e.createTag(b);\n\n          if (null != k) {\n            var l = e.option(k);\n            l.attr(\"data-select2-tag\", !0), e.addOptions([l]), e.insertTag(g, k);\n          }\n\n          a.results = g, c(a);\n        }\n\n        var e = this;\n        if (this._removeOldTags(), null == b.term || null != b.page) return void a.call(this, b, c);\n        a.call(this, b, d);\n      }, b.prototype.createTag = function (b, c) {\n        var d = a.trim(c.term);\n        return \"\" === d ? null : {\n          id: d,\n          text: d\n        };\n      }, b.prototype.insertTag = function (a, b, c) {\n        b.unshift(c);\n      }, b.prototype._removeOldTags = function (b) {\n        this._lastTag;\n        this.$element.find(\"option[data-select2-tag]\").each(function () {\n          this.selected || a(this).remove();\n        });\n      }, b;\n    }), b.define(\"select2/data/tokenizer\", [\"jquery\"], function (a) {\n      function b(a, b, c) {\n        var d = c.get(\"tokenizer\");\n        void 0 !== d && (this.tokenizer = d), a.call(this, b, c);\n      }\n\n      return b.prototype.bind = function (a, b, c) {\n        a.call(this, b, c), this.$search = b.dropdown.$search || b.selection.$search || c.find(\".select2-search__field\");\n      }, b.prototype.query = function (b, c, d) {\n        function e(b) {\n          var c = g._normalizeItem(b);\n\n          if (!g.$element.find(\"option\").filter(function () {\n            return a(this).val() === c.id;\n          }).length) {\n            var d = g.option(c);\n            d.attr(\"data-select2-tag\", !0), g._removeOldTags(), g.addOptions([d]);\n          }\n\n          f(c);\n        }\n\n        function f(a) {\n          g.trigger(\"select\", {\n            data: a\n          });\n        }\n\n        var g = this;\n        c.term = c.term || \"\";\n        var h = this.tokenizer(c, this.options, e);\n        h.term !== c.term && (this.$search.length && (this.$search.val(h.term), this.$search.focus()), c.term = h.term), b.call(this, c, d);\n      }, b.prototype.tokenizer = function (b, c, d, e) {\n        for (var f = d.get(\"tokenSeparators\") || [], g = c.term, h = 0, i = this.createTag || function (a) {\n          return {\n            id: a.term,\n            text: a.term\n          };\n        }; h < g.length;) {\n          var j = g[h];\n\n          if (-1 !== a.inArray(j, f)) {\n            var k = g.substr(0, h),\n                l = a.extend({}, c, {\n              term: k\n            }),\n                m = i(l);\n            null != m ? (e(m), g = g.substr(h + 1) || \"\", h = 0) : h++;\n          } else h++;\n        }\n\n        return {\n          term: g\n        };\n      }, b;\n    }), b.define(\"select2/data/minimumInputLength\", [], function () {\n      function a(a, b, c) {\n        this.minimumInputLength = c.get(\"minimumInputLength\"), a.call(this, b, c);\n      }\n\n      return a.prototype.query = function (a, b, c) {\n        if (b.term = b.term || \"\", b.term.length < this.minimumInputLength) return void this.trigger(\"results:message\", {\n          message: \"inputTooShort\",\n          args: {\n            minimum: this.minimumInputLength,\n            input: b.term,\n            params: b\n          }\n        });\n        a.call(this, b, c);\n      }, a;\n    }), b.define(\"select2/data/maximumInputLength\", [], function () {\n      function a(a, b, c) {\n        this.maximumInputLength = c.get(\"maximumInputLength\"), a.call(this, b, c);\n      }\n\n      return a.prototype.query = function (a, b, c) {\n        if (b.term = b.term || \"\", this.maximumInputLength > 0 && b.term.length > this.maximumInputLength) return void this.trigger(\"results:message\", {\n          message: \"inputTooLong\",\n          args: {\n            maximum: this.maximumInputLength,\n            input: b.term,\n            params: b\n          }\n        });\n        a.call(this, b, c);\n      }, a;\n    }), b.define(\"select2/data/maximumSelectionLength\", [], function () {\n      function a(a, b, c) {\n        this.maximumSelectionLength = c.get(\"maximumSelectionLength\"), a.call(this, b, c);\n      }\n\n      return a.prototype.query = function (a, b, c) {\n        var d = this;\n        this.current(function (e) {\n          var f = null != e ? e.length : 0;\n          if (d.maximumSelectionLength > 0 && f >= d.maximumSelectionLength) return void d.trigger(\"results:message\", {\n            message: \"maximumSelected\",\n            args: {\n              maximum: d.maximumSelectionLength\n            }\n          });\n          a.call(d, b, c);\n        });\n      }, a;\n    }), b.define(\"select2/dropdown\", [\"jquery\", \"./utils\"], function (a, b) {\n      function c(a, b) {\n        this.$element = a, this.options = b, c.__super__.constructor.call(this);\n      }\n\n      return b.Extend(c, b.Observable), c.prototype.render = function () {\n        var b = a('<span class=\"select2-dropdown\"><span class=\"select2-results\"></span></span>');\n        return b.attr(\"dir\", this.options.get(\"dir\")), this.$dropdown = b, b;\n      }, c.prototype.bind = function () {}, c.prototype.position = function (a, b) {}, c.prototype.destroy = function () {\n        this.$dropdown.remove();\n      }, c;\n    }), b.define(\"select2/dropdown/search\", [\"jquery\", \"../utils\"], function (a, b) {\n      function c() {}\n\n      return c.prototype.render = function (b) {\n        var c = b.call(this),\n            d = a('<span class=\"select2-search select2-search--dropdown\"><input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" role=\"textbox\" /></span>');\n        return this.$searchContainer = d, this.$search = d.find(\"input\"), c.prepend(d), c;\n      }, c.prototype.bind = function (b, c, d) {\n        var e = this;\n        b.call(this, c, d), this.$search.on(\"keydown\", function (a) {\n          e.trigger(\"keypress\", a), e._keyUpPrevented = a.isDefaultPrevented();\n        }), this.$search.on(\"input\", function (b) {\n          a(this).off(\"keyup\");\n        }), this.$search.on(\"keyup input\", function (a) {\n          e.handleSearch(a);\n        }), c.on(\"open\", function () {\n          e.$search.attr(\"tabindex\", 0), e.$search.focus(), window.setTimeout(function () {\n            e.$search.focus();\n          }, 0);\n        }), c.on(\"close\", function () {\n          e.$search.attr(\"tabindex\", -1), e.$search.val(\"\");\n        }), c.on(\"focus\", function () {\n          c.isOpen() || e.$search.focus();\n        }), c.on(\"results:all\", function (a) {\n          if (null == a.query.term || \"\" === a.query.term) {\n            e.showSearch(a) ? e.$searchContainer.removeClass(\"select2-search--hide\") : e.$searchContainer.addClass(\"select2-search--hide\");\n          }\n        });\n      }, c.prototype.handleSearch = function (a) {\n        if (!this._keyUpPrevented) {\n          var b = this.$search.val();\n          this.trigger(\"query\", {\n            term: b\n          });\n        }\n\n        this._keyUpPrevented = !1;\n      }, c.prototype.showSearch = function (a, b) {\n        return !0;\n      }, c;\n    }), b.define(\"select2/dropdown/hidePlaceholder\", [], function () {\n      function a(a, b, c, d) {\n        this.placeholder = this.normalizePlaceholder(c.get(\"placeholder\")), a.call(this, b, c, d);\n      }\n\n      return a.prototype.append = function (a, b) {\n        b.results = this.removePlaceholder(b.results), a.call(this, b);\n      }, a.prototype.normalizePlaceholder = function (a, b) {\n        return \"string\" == typeof b && (b = {\n          id: \"\",\n          text: b\n        }), b;\n      }, a.prototype.removePlaceholder = function (a, b) {\n        for (var c = b.slice(0), d = b.length - 1; d >= 0; d--) {\n          var e = b[d];\n          this.placeholder.id === e.id && c.splice(d, 1);\n        }\n\n        return c;\n      }, a;\n    }), b.define(\"select2/dropdown/infiniteScroll\", [\"jquery\"], function (a) {\n      function b(a, b, c, d) {\n        this.lastParams = {}, a.call(this, b, c, d), this.$loadingMore = this.createLoadingMore(), this.loading = !1;\n      }\n\n      return b.prototype.append = function (a, b) {\n        this.$loadingMore.remove(), this.loading = !1, a.call(this, b), this.showLoadingMore(b) && this.$results.append(this.$loadingMore);\n      }, b.prototype.bind = function (b, c, d) {\n        var e = this;\n        b.call(this, c, d), c.on(\"query\", function (a) {\n          e.lastParams = a, e.loading = !0;\n        }), c.on(\"query:append\", function (a) {\n          e.lastParams = a, e.loading = !0;\n        }), this.$results.on(\"scroll\", function () {\n          var b = a.contains(document.documentElement, e.$loadingMore[0]);\n\n          if (!e.loading && b) {\n            e.$results.offset().top + e.$results.outerHeight(!1) + 50 >= e.$loadingMore.offset().top + e.$loadingMore.outerHeight(!1) && e.loadMore();\n          }\n        });\n      }, b.prototype.loadMore = function () {\n        this.loading = !0;\n        var b = a.extend({}, {\n          page: 1\n        }, this.lastParams);\n        b.page++, this.trigger(\"query:append\", b);\n      }, b.prototype.showLoadingMore = function (a, b) {\n        return b.pagination && b.pagination.more;\n      }, b.prototype.createLoadingMore = function () {\n        var b = a('<li class=\"select2-results__option select2-results__option--load-more\"role=\"treeitem\" aria-disabled=\"true\"></li>'),\n            c = this.options.get(\"translations\").get(\"loadingMore\");\n        return b.html(c(this.lastParams)), b;\n      }, b;\n    }), b.define(\"select2/dropdown/attachBody\", [\"jquery\", \"../utils\"], function (a, b) {\n      function c(b, c, d) {\n        this.$dropdownParent = d.get(\"dropdownParent\") || a(document.body), b.call(this, c, d);\n      }\n\n      return c.prototype.bind = function (a, b, c) {\n        var d = this,\n            e = !1;\n        a.call(this, b, c), b.on(\"open\", function () {\n          d._showDropdown(), d._attachPositioningHandler(b), e || (e = !0, b.on(\"results:all\", function () {\n            d._positionDropdown(), d._resizeDropdown();\n          }), b.on(\"results:append\", function () {\n            d._positionDropdown(), d._resizeDropdown();\n          }));\n        }), b.on(\"close\", function () {\n          d._hideDropdown(), d._detachPositioningHandler(b);\n        }), this.$dropdownContainer.on(\"mousedown\", function (a) {\n          a.stopPropagation();\n        });\n      }, c.prototype.destroy = function (a) {\n        a.call(this), this.$dropdownContainer.remove();\n      }, c.prototype.position = function (a, b, c) {\n        b.attr(\"class\", c.attr(\"class\")), b.removeClass(\"select2\"), b.addClass(\"select2-container--open\"), b.css({\n          position: \"absolute\",\n          top: -999999\n        }), this.$container = c;\n      }, c.prototype.render = function (b) {\n        var c = a(\"<span></span>\"),\n            d = b.call(this);\n        return c.append(d), this.$dropdownContainer = c, c;\n      }, c.prototype._hideDropdown = function (a) {\n        this.$dropdownContainer.detach();\n      }, c.prototype._attachPositioningHandler = function (c, d) {\n        var e = this,\n            f = \"scroll.select2.\" + d.id,\n            g = \"resize.select2.\" + d.id,\n            h = \"orientationchange.select2.\" + d.id,\n            i = this.$container.parents().filter(b.hasScroll);\n        i.each(function () {\n          a(this).data(\"select2-scroll-position\", {\n            x: a(this).scrollLeft(),\n            y: a(this).scrollTop()\n          });\n        }), i.on(f, function (b) {\n          var c = a(this).data(\"select2-scroll-position\");\n          a(this).scrollTop(c.y);\n        }), a(window).on(f + \" \" + g + \" \" + h, function (a) {\n          e._positionDropdown(), e._resizeDropdown();\n        });\n      }, c.prototype._detachPositioningHandler = function (c, d) {\n        var e = \"scroll.select2.\" + d.id,\n            f = \"resize.select2.\" + d.id,\n            g = \"orientationchange.select2.\" + d.id;\n        this.$container.parents().filter(b.hasScroll).off(e), a(window).off(e + \" \" + f + \" \" + g);\n      }, c.prototype._positionDropdown = function () {\n        var b = a(window),\n            c = this.$dropdown.hasClass(\"select2-dropdown--above\"),\n            d = this.$dropdown.hasClass(\"select2-dropdown--below\"),\n            e = null,\n            f = this.$container.offset();\n        f.bottom = f.top + this.$container.outerHeight(!1);\n        var g = {\n          height: this.$container.outerHeight(!1)\n        };\n        g.top = f.top, g.bottom = f.top + g.height;\n        var h = {\n          height: this.$dropdown.outerHeight(!1)\n        },\n            i = {\n          top: b.scrollTop(),\n          bottom: b.scrollTop() + b.height()\n        },\n            j = i.top < f.top - h.height,\n            k = i.bottom > f.bottom + h.height,\n            l = {\n          left: f.left,\n          top: g.bottom\n        },\n            m = this.$dropdownParent;\n        \"static\" === m.css(\"position\") && (m = m.offsetParent());\n        var n = m.offset();\n        l.top -= n.top, l.left -= n.left, c || d || (e = \"below\"), k || !j || c ? !j && k && c && (e = \"below\") : e = \"above\", (\"above\" == e || c && \"below\" !== e) && (l.top = g.top - n.top - h.height), null != e && (this.$dropdown.removeClass(\"select2-dropdown--below select2-dropdown--above\").addClass(\"select2-dropdown--\" + e), this.$container.removeClass(\"select2-container--below select2-container--above\").addClass(\"select2-container--\" + e)), this.$dropdownContainer.css(l);\n      }, c.prototype._resizeDropdown = function () {\n        var a = {\n          width: this.$container.outerWidth(!1) + \"px\"\n        };\n        this.options.get(\"dropdownAutoWidth\") && (a.minWidth = a.width, a.position = \"relative\", a.width = \"auto\"), this.$dropdown.css(a);\n      }, c.prototype._showDropdown = function (a) {\n        this.$dropdownContainer.appendTo(this.$dropdownParent), this._positionDropdown(), this._resizeDropdown();\n      }, c;\n    }), b.define(\"select2/dropdown/minimumResultsForSearch\", [], function () {\n      function a(b) {\n        for (var c = 0, d = 0; d < b.length; d++) {\n          var e = b[d];\n          e.children ? c += a(e.children) : c++;\n        }\n\n        return c;\n      }\n\n      function b(a, b, c, d) {\n        this.minimumResultsForSearch = c.get(\"minimumResultsForSearch\"), this.minimumResultsForSearch < 0 && (this.minimumResultsForSearch = 1 / 0), a.call(this, b, c, d);\n      }\n\n      return b.prototype.showSearch = function (b, c) {\n        return !(a(c.data.results) < this.minimumResultsForSearch) && b.call(this, c);\n      }, b;\n    }), b.define(\"select2/dropdown/selectOnClose\", [], function () {\n      function a() {}\n\n      return a.prototype.bind = function (a, b, c) {\n        var d = this;\n        a.call(this, b, c), b.on(\"close\", function (a) {\n          d._handleSelectOnClose(a);\n        });\n      }, a.prototype._handleSelectOnClose = function (a, b) {\n        if (b && null != b.originalSelect2Event) {\n          var c = b.originalSelect2Event;\n          if (\"select\" === c._type || \"unselect\" === c._type) return;\n        }\n\n        var d = this.getHighlightedResults();\n\n        if (!(d.length < 1)) {\n          var e = d.data(\"data\");\n          null != e.element && e.element.selected || null == e.element && e.selected || this.trigger(\"select\", {\n            data: e\n          });\n        }\n      }, a;\n    }), b.define(\"select2/dropdown/closeOnSelect\", [], function () {\n      function a() {}\n\n      return a.prototype.bind = function (a, b, c) {\n        var d = this;\n        a.call(this, b, c), b.on(\"select\", function (a) {\n          d._selectTriggered(a);\n        }), b.on(\"unselect\", function (a) {\n          d._selectTriggered(a);\n        });\n      }, a.prototype._selectTriggered = function (a, b) {\n        var c = b.originalEvent;\n        c && c.ctrlKey || this.trigger(\"close\", {\n          originalEvent: c,\n          originalSelect2Event: b\n        });\n      }, a;\n    }), b.define(\"select2/i18n/en\", [], function () {\n      return {\n        errorLoading: function errorLoading() {\n          return \"The results could not be loaded.\";\n        },\n        inputTooLong: function inputTooLong(a) {\n          var b = a.input.length - a.maximum,\n              c = \"Please delete \" + b + \" character\";\n          return 1 != b && (c += \"s\"), c;\n        },\n        inputTooShort: function inputTooShort(a) {\n          return \"Please enter \" + (a.minimum - a.input.length) + \" or more characters\";\n        },\n        loadingMore: function loadingMore() {\n          return \"Loading more results…\";\n        },\n        maximumSelected: function maximumSelected(a) {\n          var b = \"You can only select \" + a.maximum + \" item\";\n          return 1 != a.maximum && (b += \"s\"), b;\n        },\n        noResults: function noResults() {\n          return \"No results found\";\n        },\n        searching: function searching() {\n          return \"Searching…\";\n        }\n      };\n    }), b.define(\"select2/defaults\", [\"jquery\", \"require\", \"./results\", \"./selection/single\", \"./selection/multiple\", \"./selection/placeholder\", \"./selection/allowClear\", \"./selection/search\", \"./selection/eventRelay\", \"./utils\", \"./translation\", \"./diacritics\", \"./data/select\", \"./data/array\", \"./data/ajax\", \"./data/tags\", \"./data/tokenizer\", \"./data/minimumInputLength\", \"./data/maximumInputLength\", \"./data/maximumSelectionLength\", \"./dropdown\", \"./dropdown/search\", \"./dropdown/hidePlaceholder\", \"./dropdown/infiniteScroll\", \"./dropdown/attachBody\", \"./dropdown/minimumResultsForSearch\", \"./dropdown/selectOnClose\", \"./dropdown/closeOnSelect\", \"./i18n/en\"], function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C) {\n      function D() {\n        this.reset();\n      }\n\n      return D.prototype.apply = function (l) {\n        if (l = a.extend(!0, {}, this.defaults, l), null == l.dataAdapter) {\n          if (null != l.ajax ? l.dataAdapter = o : null != l.data ? l.dataAdapter = n : l.dataAdapter = m, l.minimumInputLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, r)), l.maximumInputLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, s)), l.maximumSelectionLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, t)), l.tags && (l.dataAdapter = j.Decorate(l.dataAdapter, p)), null == l.tokenSeparators && null == l.tokenizer || (l.dataAdapter = j.Decorate(l.dataAdapter, q)), null != l.query) {\n            var C = b(l.amdBase + \"compat/query\");\n            l.dataAdapter = j.Decorate(l.dataAdapter, C);\n          }\n\n          if (null != l.initSelection) {\n            var D = b(l.amdBase + \"compat/initSelection\");\n            l.dataAdapter = j.Decorate(l.dataAdapter, D);\n          }\n        }\n\n        if (null == l.resultsAdapter && (l.resultsAdapter = c, null != l.ajax && (l.resultsAdapter = j.Decorate(l.resultsAdapter, x)), null != l.placeholder && (l.resultsAdapter = j.Decorate(l.resultsAdapter, w)), l.selectOnClose && (l.resultsAdapter = j.Decorate(l.resultsAdapter, A))), null == l.dropdownAdapter) {\n          if (l.multiple) l.dropdownAdapter = u;else {\n            var E = j.Decorate(u, v);\n            l.dropdownAdapter = E;\n          }\n\n          if (0 !== l.minimumResultsForSearch && (l.dropdownAdapter = j.Decorate(l.dropdownAdapter, z)), l.closeOnSelect && (l.dropdownAdapter = j.Decorate(l.dropdownAdapter, B)), null != l.dropdownCssClass || null != l.dropdownCss || null != l.adaptDropdownCssClass) {\n            var F = b(l.amdBase + \"compat/dropdownCss\");\n            l.dropdownAdapter = j.Decorate(l.dropdownAdapter, F);\n          }\n\n          l.dropdownAdapter = j.Decorate(l.dropdownAdapter, y);\n        }\n\n        if (null == l.selectionAdapter) {\n          if (l.multiple ? l.selectionAdapter = e : l.selectionAdapter = d, null != l.placeholder && (l.selectionAdapter = j.Decorate(l.selectionAdapter, f)), l.allowClear && (l.selectionAdapter = j.Decorate(l.selectionAdapter, g)), l.multiple && (l.selectionAdapter = j.Decorate(l.selectionAdapter, h)), null != l.containerCssClass || null != l.containerCss || null != l.adaptContainerCssClass) {\n            var G = b(l.amdBase + \"compat/containerCss\");\n            l.selectionAdapter = j.Decorate(l.selectionAdapter, G);\n          }\n\n          l.selectionAdapter = j.Decorate(l.selectionAdapter, i);\n        }\n\n        if (\"string\" == typeof l.language) if (l.language.indexOf(\"-\") > 0) {\n          var H = l.language.split(\"-\"),\n              I = H[0];\n          l.language = [l.language, I];\n        } else l.language = [l.language];\n\n        if (a.isArray(l.language)) {\n          var J = new k();\n          l.language.push(\"en\");\n\n          for (var K = l.language, L = 0; L < K.length; L++) {\n            var M = K[L],\n                N = {};\n\n            try {\n              N = k.loadPath(M);\n            } catch (a) {\n              try {\n                M = this.defaults.amdLanguageBase + M, N = k.loadPath(M);\n              } catch (a) {\n                l.debug && window.console && console.warn && console.warn('Select2: The language file for \"' + M + '\" could not be automatically loaded. A fallback will be used instead.');\n                continue;\n              }\n            }\n\n            J.extend(N);\n          }\n\n          l.translations = J;\n        } else {\n          var O = k.loadPath(this.defaults.amdLanguageBase + \"en\"),\n              P = new k(l.language);\n          P.extend(O), l.translations = P;\n        }\n\n        return l;\n      }, D.prototype.reset = function () {\n        function b(a) {\n          function b(a) {\n            return l[a] || a;\n          }\n\n          return a.replace(/[^\\u0000-\\u007E]/g, b);\n        }\n\n        function c(d, e) {\n          if (\"\" === a.trim(d.term)) return e;\n\n          if (e.children && e.children.length > 0) {\n            for (var f = a.extend(!0, {}, e), g = e.children.length - 1; g >= 0; g--) {\n              null == c(d, e.children[g]) && f.children.splice(g, 1);\n            }\n\n            return f.children.length > 0 ? f : c(d, f);\n          }\n\n          var h = b(e.text).toUpperCase(),\n              i = b(d.term).toUpperCase();\n          return h.indexOf(i) > -1 ? e : null;\n        }\n\n        this.defaults = {\n          amdBase: \"./\",\n          amdLanguageBase: \"./i18n/\",\n          closeOnSelect: !0,\n          debug: !1,\n          dropdownAutoWidth: !1,\n          escapeMarkup: j.escapeMarkup,\n          language: C,\n          matcher: c,\n          minimumInputLength: 0,\n          maximumInputLength: 0,\n          maximumSelectionLength: 0,\n          minimumResultsForSearch: 0,\n          selectOnClose: !1,\n          sorter: function sorter(a) {\n            return a;\n          },\n          templateResult: function templateResult(a) {\n            return a.text;\n          },\n          templateSelection: function templateSelection(a) {\n            return a.text;\n          },\n          theme: \"default\",\n          width: \"resolve\"\n        };\n      }, D.prototype.set = function (b, c) {\n        var d = a.camelCase(b),\n            e = {};\n        e[d] = c;\n\n        var f = j._convertData(e);\n\n        a.extend(this.defaults, f);\n      }, new D();\n    }), b.define(\"select2/options\", [\"require\", \"jquery\", \"./defaults\", \"./utils\"], function (a, b, c, d) {\n      function e(b, e) {\n        if (this.options = b, null != e && this.fromElement(e), this.options = c.apply(this.options), e && e.is(\"input\")) {\n          var f = a(this.get(\"amdBase\") + \"compat/inputData\");\n          this.options.dataAdapter = d.Decorate(this.options.dataAdapter, f);\n        }\n      }\n\n      return e.prototype.fromElement = function (a) {\n        var c = [\"select2\"];\n        null == this.options.multiple && (this.options.multiple = a.prop(\"multiple\")), null == this.options.disabled && (this.options.disabled = a.prop(\"disabled\")), null == this.options.language && (a.prop(\"lang\") ? this.options.language = a.prop(\"lang\").toLowerCase() : a.closest(\"[lang]\").prop(\"lang\") && (this.options.language = a.closest(\"[lang]\").prop(\"lang\"))), null == this.options.dir && (a.prop(\"dir\") ? this.options.dir = a.prop(\"dir\") : a.closest(\"[dir]\").prop(\"dir\") ? this.options.dir = a.closest(\"[dir]\").prop(\"dir\") : this.options.dir = \"ltr\"), a.prop(\"disabled\", this.options.disabled), a.prop(\"multiple\", this.options.multiple), a.data(\"select2Tags\") && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags=\"true\"` attributes and will be removed in future versions of Select2.'), a.data(\"data\", a.data(\"select2Tags\")), a.data(\"tags\", !0)), a.data(\"ajaxUrl\") && (this.options.debug && window.console && console.warn && console.warn(\"Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2.\"), a.attr(\"ajax--url\", a.data(\"ajaxUrl\")), a.data(\"ajax--url\", a.data(\"ajaxUrl\")));\n        var e = {};\n        e = b.fn.jquery && \"1.\" == b.fn.jquery.substr(0, 2) && a[0].dataset ? b.extend(!0, {}, a[0].dataset, a.data()) : a.data();\n        var f = b.extend(!0, {}, e);\n        f = d._convertData(f);\n\n        for (var g in f) {\n          b.inArray(g, c) > -1 || (b.isPlainObject(this.options[g]) ? b.extend(this.options[g], f[g]) : this.options[g] = f[g]);\n        }\n\n        return this;\n      }, e.prototype.get = function (a) {\n        return this.options[a];\n      }, e.prototype.set = function (a, b) {\n        this.options[a] = b;\n      }, e;\n    }), b.define(\"select2/core\", [\"jquery\", \"./options\", \"./utils\", \"./keys\"], function (a, b, c, d) {\n      var e = function e(a, c) {\n        null != a.data(\"select2\") && a.data(\"select2\").destroy(), this.$element = a, this.id = this._generateId(a), c = c || {}, this.options = new b(c, a), e.__super__.constructor.call(this);\n        var d = a.attr(\"tabindex\") || 0;\n        a.data(\"old-tabindex\", d), a.attr(\"tabindex\", \"-1\");\n        var f = this.options.get(\"dataAdapter\");\n        this.dataAdapter = new f(a, this.options);\n        var g = this.render();\n\n        this._placeContainer(g);\n\n        var h = this.options.get(\"selectionAdapter\");\n        this.selection = new h(a, this.options), this.$selection = this.selection.render(), this.selection.position(this.$selection, g);\n        var i = this.options.get(\"dropdownAdapter\");\n        this.dropdown = new i(a, this.options), this.$dropdown = this.dropdown.render(), this.dropdown.position(this.$dropdown, g);\n        var j = this.options.get(\"resultsAdapter\");\n        this.results = new j(a, this.options, this.dataAdapter), this.$results = this.results.render(), this.results.position(this.$results, this.$dropdown);\n        var k = this;\n        this._bindAdapters(), this._registerDomEvents(), this._registerDataEvents(), this._registerSelectionEvents(), this._registerDropdownEvents(), this._registerResultsEvents(), this._registerEvents(), this.dataAdapter.current(function (a) {\n          k.trigger(\"selection:update\", {\n            data: a\n          });\n        }), a.addClass(\"select2-hidden-accessible\"), a.attr(\"aria-hidden\", \"true\"), this._syncAttributes(), a.data(\"select2\", this);\n      };\n\n      return c.Extend(e, c.Observable), e.prototype._generateId = function (a) {\n        var b = \"\";\n        return b = null != a.attr(\"id\") ? a.attr(\"id\") : null != a.attr(\"name\") ? a.attr(\"name\") + \"-\" + c.generateChars(2) : c.generateChars(4), b = b.replace(/(:|\\.|\\[|\\]|,)/g, \"\"), b = \"select2-\" + b;\n      }, e.prototype._placeContainer = function (a) {\n        a.insertAfter(this.$element);\n\n        var b = this._resolveWidth(this.$element, this.options.get(\"width\"));\n\n        null != b && a.css(\"width\", b);\n      }, e.prototype._resolveWidth = function (a, b) {\n        var c = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n\n        if (\"resolve\" == b) {\n          var d = this._resolveWidth(a, \"style\");\n\n          return null != d ? d : this._resolveWidth(a, \"element\");\n        }\n\n        if (\"element\" == b) {\n          var e = a.outerWidth(!1);\n          return e <= 0 ? \"auto\" : e + \"px\";\n        }\n\n        if (\"style\" == b) {\n          var f = a.attr(\"style\");\n          if (\"string\" != typeof f) return null;\n\n          for (var g = f.split(\";\"), h = 0, i = g.length; h < i; h += 1) {\n            var j = g[h].replace(/\\s/g, \"\"),\n                k = j.match(c);\n            if (null !== k && k.length >= 1) return k[1];\n          }\n\n          return null;\n        }\n\n        return b;\n      }, e.prototype._bindAdapters = function () {\n        this.dataAdapter.bind(this, this.$container), this.selection.bind(this, this.$container), this.dropdown.bind(this, this.$container), this.results.bind(this, this.$container);\n      }, e.prototype._registerDomEvents = function () {\n        var b = this;\n        this.$element.on(\"change.select2\", function () {\n          b.dataAdapter.current(function (a) {\n            b.trigger(\"selection:update\", {\n              data: a\n            });\n          });\n        }), this.$element.on(\"focus.select2\", function (a) {\n          b.trigger(\"focus\", a);\n        }), this._syncA = c.bind(this._syncAttributes, this), this._syncS = c.bind(this._syncSubtree, this), this.$element[0].attachEvent && this.$element[0].attachEvent(\"onpropertychange\", this._syncA);\n        var d = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n        null != d ? (this._observer = new d(function (c) {\n          a.each(c, b._syncA), a.each(c, b._syncS);\n        }), this._observer.observe(this.$element[0], {\n          attributes: !0,\n          childList: !0,\n          subtree: !1\n        })) : this.$element[0].addEventListener && (this.$element[0].addEventListener(\"DOMAttrModified\", b._syncA, !1), this.$element[0].addEventListener(\"DOMNodeInserted\", b._syncS, !1), this.$element[0].addEventListener(\"DOMNodeRemoved\", b._syncS, !1));\n      }, e.prototype._registerDataEvents = function () {\n        var a = this;\n        this.dataAdapter.on(\"*\", function (b, c) {\n          a.trigger(b, c);\n        });\n      }, e.prototype._registerSelectionEvents = function () {\n        var b = this,\n            c = [\"toggle\", \"focus\"];\n        this.selection.on(\"toggle\", function () {\n          b.toggleDropdown();\n        }), this.selection.on(\"focus\", function (a) {\n          b.focus(a);\n        }), this.selection.on(\"*\", function (d, e) {\n          -1 === a.inArray(d, c) && b.trigger(d, e);\n        });\n      }, e.prototype._registerDropdownEvents = function () {\n        var a = this;\n        this.dropdown.on(\"*\", function (b, c) {\n          a.trigger(b, c);\n        });\n      }, e.prototype._registerResultsEvents = function () {\n        var a = this;\n        this.results.on(\"*\", function (b, c) {\n          a.trigger(b, c);\n        });\n      }, e.prototype._registerEvents = function () {\n        var a = this;\n        this.on(\"open\", function () {\n          a.$container.addClass(\"select2-container--open\");\n        }), this.on(\"close\", function () {\n          a.$container.removeClass(\"select2-container--open\");\n        }), this.on(\"enable\", function () {\n          a.$container.removeClass(\"select2-container--disabled\");\n        }), this.on(\"disable\", function () {\n          a.$container.addClass(\"select2-container--disabled\");\n        }), this.on(\"blur\", function () {\n          a.$container.removeClass(\"select2-container--focus\");\n        }), this.on(\"query\", function (b) {\n          a.isOpen() || a.trigger(\"open\", {}), this.dataAdapter.query(b, function (c) {\n            a.trigger(\"results:all\", {\n              data: c,\n              query: b\n            });\n          });\n        }), this.on(\"query:append\", function (b) {\n          this.dataAdapter.query(b, function (c) {\n            a.trigger(\"results:append\", {\n              data: c,\n              query: b\n            });\n          });\n        }), this.on(\"keypress\", function (b) {\n          var c = b.which;\n          a.isOpen() ? c === d.ESC || c === d.TAB || c === d.UP && b.altKey ? (a.close(), b.preventDefault()) : c === d.ENTER ? (a.trigger(\"results:select\", {}), b.preventDefault()) : c === d.SPACE && b.ctrlKey ? (a.trigger(\"results:toggle\", {}), b.preventDefault()) : c === d.UP ? (a.trigger(\"results:previous\", {}), b.preventDefault()) : c === d.DOWN && (a.trigger(\"results:next\", {}), b.preventDefault()) : (c === d.ENTER || c === d.SPACE || c === d.DOWN && b.altKey) && (a.open(), b.preventDefault());\n        });\n      }, e.prototype._syncAttributes = function () {\n        this.options.set(\"disabled\", this.$element.prop(\"disabled\")), this.options.get(\"disabled\") ? (this.isOpen() && this.close(), this.trigger(\"disable\", {})) : this.trigger(\"enable\", {});\n      }, e.prototype._syncSubtree = function (a, b) {\n        var c = !1,\n            d = this;\n\n        if (!a || !a.target || \"OPTION\" === a.target.nodeName || \"OPTGROUP\" === a.target.nodeName) {\n          if (b) {\n            if (b.addedNodes && b.addedNodes.length > 0) for (var e = 0; e < b.addedNodes.length; e++) {\n              var f = b.addedNodes[e];\n              f.selected && (c = !0);\n            } else b.removedNodes && b.removedNodes.length > 0 && (c = !0);\n          } else c = !0;\n          c && this.dataAdapter.current(function (a) {\n            d.trigger(\"selection:update\", {\n              data: a\n            });\n          });\n        }\n      }, e.prototype.trigger = function (a, b) {\n        var c = e.__super__.trigger,\n            d = {\n          open: \"opening\",\n          close: \"closing\",\n          select: \"selecting\",\n          unselect: \"unselecting\"\n        };\n\n        if (void 0 === b && (b = {}), a in d) {\n          var f = d[a],\n              g = {\n            prevented: !1,\n            name: a,\n            args: b\n          };\n          if (c.call(this, f, g), g.prevented) return void (b.prevented = !0);\n        }\n\n        c.call(this, a, b);\n      }, e.prototype.toggleDropdown = function () {\n        this.options.get(\"disabled\") || (this.isOpen() ? this.close() : this.open());\n      }, e.prototype.open = function () {\n        this.isOpen() || this.trigger(\"query\", {});\n      }, e.prototype.close = function () {\n        this.isOpen() && this.trigger(\"close\", {});\n      }, e.prototype.isOpen = function () {\n        return this.$container.hasClass(\"select2-container--open\");\n      }, e.prototype.hasFocus = function () {\n        return this.$container.hasClass(\"select2-container--focus\");\n      }, e.prototype.focus = function (a) {\n        this.hasFocus() || (this.$container.addClass(\"select2-container--focus\"), this.trigger(\"focus\", {}));\n      }, e.prototype.enable = function (a) {\n        this.options.get(\"debug\") && window.console && console.warn && console.warn('Select2: The `select2(\"enable\")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop(\"disabled\") instead.'), null != a && 0 !== a.length || (a = [!0]);\n        var b = !a[0];\n        this.$element.prop(\"disabled\", b);\n      }, e.prototype.data = function () {\n        this.options.get(\"debug\") && arguments.length > 0 && window.console && console.warn && console.warn('Select2: Data can no longer be set using `select2(\"data\")`. You should consider setting the value instead using `$element.val()`.');\n        var a = [];\n        return this.dataAdapter.current(function (b) {\n          a = b;\n        }), a;\n      }, e.prototype.val = function (b) {\n        if (this.options.get(\"debug\") && window.console && console.warn && console.warn('Select2: The `select2(\"val\")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'), null == b || 0 === b.length) return this.$element.val();\n        var c = b[0];\n        a.isArray(c) && (c = a.map(c, function (a) {\n          return a.toString();\n        })), this.$element.val(c).trigger(\"change\");\n      }, e.prototype.destroy = function () {\n        this.$container.remove(), this.$element[0].detachEvent && this.$element[0].detachEvent(\"onpropertychange\", this._syncA), null != this._observer ? (this._observer.disconnect(), this._observer = null) : this.$element[0].removeEventListener && (this.$element[0].removeEventListener(\"DOMAttrModified\", this._syncA, !1), this.$element[0].removeEventListener(\"DOMNodeInserted\", this._syncS, !1), this.$element[0].removeEventListener(\"DOMNodeRemoved\", this._syncS, !1)), this._syncA = null, this._syncS = null, this.$element.off(\".select2\"), this.$element.attr(\"tabindex\", this.$element.data(\"old-tabindex\")), this.$element.removeClass(\"select2-hidden-accessible\"), this.$element.attr(\"aria-hidden\", \"false\"), this.$element.removeData(\"select2\"), this.dataAdapter.destroy(), this.selection.destroy(), this.dropdown.destroy(), this.results.destroy(), this.dataAdapter = null, this.selection = null, this.dropdown = null, this.results = null;\n      }, e.prototype.render = function () {\n        var b = a('<span class=\"select2 select2-container\"><span class=\"selection\"></span><span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span></span>');\n        return b.attr(\"dir\", this.options.get(\"dir\")), this.$container = b, this.$container.addClass(\"select2-container--\" + this.options.get(\"theme\")), b.data(\"element\", this.$element), b;\n      }, e;\n    }), b.define(\"select2/compat/utils\", [\"jquery\"], function (a) {\n      function b(b, c, d) {\n        var e,\n            f,\n            g = [];\n        e = a.trim(b.attr(\"class\")), e && (e = \"\" + e, a(e.split(/\\s+/)).each(function () {\n          0 === this.indexOf(\"select2-\") && g.push(this);\n        })), e = a.trim(c.attr(\"class\")), e && (e = \"\" + e, a(e.split(/\\s+/)).each(function () {\n          0 !== this.indexOf(\"select2-\") && null != (f = d(this)) && g.push(f);\n        })), b.attr(\"class\", g.join(\" \"));\n      }\n\n      return {\n        syncCssClasses: b\n      };\n    }), b.define(\"select2/compat/containerCss\", [\"jquery\", \"./utils\"], function (a, b) {\n      function c(a) {\n        return null;\n      }\n\n      function d() {}\n\n      return d.prototype.render = function (d) {\n        var e = d.call(this),\n            f = this.options.get(\"containerCssClass\") || \"\";\n        a.isFunction(f) && (f = f(this.$element));\n        var g = this.options.get(\"adaptContainerCssClass\");\n\n        if (g = g || c, -1 !== f.indexOf(\":all:\")) {\n          f = f.replace(\":all:\", \"\");\n          var h = g;\n\n          g = function g(a) {\n            var b = h(a);\n            return null != b ? b + \" \" + a : a;\n          };\n        }\n\n        var i = this.options.get(\"containerCss\") || {};\n        return a.isFunction(i) && (i = i(this.$element)), b.syncCssClasses(e, this.$element, g), e.css(i), e.addClass(f), e;\n      }, d;\n    }), b.define(\"select2/compat/dropdownCss\", [\"jquery\", \"./utils\"], function (a, b) {\n      function c(a) {\n        return null;\n      }\n\n      function d() {}\n\n      return d.prototype.render = function (d) {\n        var e = d.call(this),\n            f = this.options.get(\"dropdownCssClass\") || \"\";\n        a.isFunction(f) && (f = f(this.$element));\n        var g = this.options.get(\"adaptDropdownCssClass\");\n\n        if (g = g || c, -1 !== f.indexOf(\":all:\")) {\n          f = f.replace(\":all:\", \"\");\n          var h = g;\n\n          g = function g(a) {\n            var b = h(a);\n            return null != b ? b + \" \" + a : a;\n          };\n        }\n\n        var i = this.options.get(\"dropdownCss\") || {};\n        return a.isFunction(i) && (i = i(this.$element)), b.syncCssClasses(e, this.$element, g), e.css(i), e.addClass(f), e;\n      }, d;\n    }), b.define(\"select2/compat/initSelection\", [\"jquery\"], function (a) {\n      function b(a, b, c) {\n        c.get(\"debug\") && window.console && console.warn && console.warn(\"Select2: The `initSelection` option has been deprecated in favor of a custom data adapter that overrides the `current` method. This method is now called multiple times instead of a single time when the instance is initialized. Support will be removed for the `initSelection` option in future versions of Select2\"), this.initSelection = c.get(\"initSelection\"), this._isInitialized = !1, a.call(this, b, c);\n      }\n\n      return b.prototype.current = function (b, c) {\n        var d = this;\n        if (this._isInitialized) return void b.call(this, c);\n        this.initSelection.call(null, this.$element, function (b) {\n          d._isInitialized = !0, a.isArray(b) || (b = [b]), c(b);\n        });\n      }, b;\n    }), b.define(\"select2/compat/inputData\", [\"jquery\"], function (a) {\n      function b(a, b, c) {\n        this._currentData = [], this._valueSeparator = c.get(\"valueSeparator\") || \",\", \"hidden\" === b.prop(\"type\") && c.get(\"debug\") && console && console.warn && console.warn(\"Select2: Using a hidden input with Select2 is no longer supported and may stop working in the future. It is recommended to use a `<select>` element instead.\"), a.call(this, b, c);\n      }\n\n      return b.prototype.current = function (b, c) {\n        function d(b, c) {\n          var e = [];\n          return b.selected || -1 !== a.inArray(b.id, c) ? (b.selected = !0, e.push(b)) : b.selected = !1, b.children && e.push.apply(e, d(b.children, c)), e;\n        }\n\n        for (var e = [], f = 0; f < this._currentData.length; f++) {\n          var g = this._currentData[f];\n          e.push.apply(e, d(g, this.$element.val().split(this._valueSeparator)));\n        }\n\n        c(e);\n      }, b.prototype.select = function (b, c) {\n        if (this.options.get(\"multiple\")) {\n          var d = this.$element.val();\n          d += this._valueSeparator + c.id, this.$element.val(d), this.$element.trigger(\"change\");\n        } else this.current(function (b) {\n          a.map(b, function (a) {\n            a.selected = !1;\n          });\n        }), this.$element.val(c.id), this.$element.trigger(\"change\");\n      }, b.prototype.unselect = function (a, b) {\n        var c = this;\n        b.selected = !1, this.current(function (a) {\n          for (var d = [], e = 0; e < a.length; e++) {\n            var f = a[e];\n            b.id != f.id && d.push(f.id);\n          }\n\n          c.$element.val(d.join(c._valueSeparator)), c.$element.trigger(\"change\");\n        });\n      }, b.prototype.query = function (a, b, c) {\n        for (var d = [], e = 0; e < this._currentData.length; e++) {\n          var f = this._currentData[e],\n              g = this.matches(b, f);\n          null !== g && d.push(g);\n        }\n\n        c({\n          results: d\n        });\n      }, b.prototype.addOptions = function (b, c) {\n        var d = a.map(c, function (b) {\n          return a.data(b[0], \"data\");\n        });\n\n        this._currentData.push.apply(this._currentData, d);\n      }, b;\n    }), b.define(\"select2/compat/matcher\", [\"jquery\"], function (a) {\n      function b(b) {\n        function c(c, d) {\n          var e = a.extend(!0, {}, d);\n          if (null == c.term || \"\" === a.trim(c.term)) return e;\n\n          if (d.children) {\n            for (var f = d.children.length - 1; f >= 0; f--) {\n              var g = d.children[f];\n              b(c.term, g.text, g) || e.children.splice(f, 1);\n            }\n\n            if (e.children.length > 0) return e;\n          }\n\n          return b(c.term, d.text, d) ? e : null;\n        }\n\n        return c;\n      }\n\n      return b;\n    }), b.define(\"select2/compat/query\", [], function () {\n      function a(a, b, c) {\n        c.get(\"debug\") && window.console && console.warn && console.warn(\"Select2: The `query` option has been deprecated in favor of a custom data adapter that overrides the `query` method. Support will be removed for the `query` option in future versions of Select2.\"), a.call(this, b, c);\n      }\n\n      return a.prototype.query = function (a, b, c) {\n        b.callback = c, this.options.get(\"query\").call(null, b);\n      }, a;\n    }), b.define(\"select2/dropdown/attachContainer\", [], function () {\n      function a(a, b, c) {\n        a.call(this, b, c);\n      }\n\n      return a.prototype.position = function (a, b, c) {\n        c.find(\".dropdown-wrapper\").append(b), b.addClass(\"select2-dropdown--below\"), c.addClass(\"select2-container--below\");\n      }, a;\n    }), b.define(\"select2/dropdown/stopPropagation\", [], function () {\n      function a() {}\n\n      return a.prototype.bind = function (a, b, c) {\n        a.call(this, b, c);\n        var d = [\"blur\", \"change\", \"click\", \"dblclick\", \"focus\", \"focusin\", \"focusout\", \"input\", \"keydown\", \"keyup\", \"keypress\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseover\", \"mouseup\", \"search\", \"touchend\", \"touchstart\"];\n        this.$dropdown.on(d.join(\" \"), function (a) {\n          a.stopPropagation();\n        });\n      }, a;\n    }), b.define(\"select2/selection/stopPropagation\", [], function () {\n      function a() {}\n\n      return a.prototype.bind = function (a, b, c) {\n        a.call(this, b, c);\n        var d = [\"blur\", \"change\", \"click\", \"dblclick\", \"focus\", \"focusin\", \"focusout\", \"input\", \"keydown\", \"keyup\", \"keypress\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseover\", \"mouseup\", \"search\", \"touchend\", \"touchstart\"];\n        this.$selection.on(d.join(\" \"), function (a) {\n          a.stopPropagation();\n        });\n      }, a;\n    }), function (c) {\n      \"function\" == typeof b.define && b.define.amd ? b.define(\"jquery-mousewheel\", [\"jquery\"], c) : \"object\" == ( false ? undefined : _typeof(exports)) ? module.exports = c : c(a);\n    }(function (a) {\n      function b(b) {\n        var g = b || window.event,\n            h = i.call(arguments, 1),\n            j = 0,\n            l = 0,\n            m = 0,\n            n = 0,\n            o = 0,\n            p = 0;\n\n        if (b = a.event.fix(g), b.type = \"mousewheel\", \"detail\" in g && (m = -1 * g.detail), \"wheelDelta\" in g && (m = g.wheelDelta), \"wheelDeltaY\" in g && (m = g.wheelDeltaY), \"wheelDeltaX\" in g && (l = -1 * g.wheelDeltaX), \"axis\" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, m = 0), j = 0 === m ? l : m, \"deltaY\" in g && (m = -1 * g.deltaY, j = m), \"deltaX\" in g && (l = g.deltaX, 0 === m && (j = -1 * l)), 0 !== m || 0 !== l) {\n          if (1 === g.deltaMode) {\n            var q = a.data(this, \"mousewheel-line-height\");\n            j *= q, m *= q, l *= q;\n          } else if (2 === g.deltaMode) {\n            var r = a.data(this, \"mousewheel-page-height\");\n            j *= r, m *= r, l *= r;\n          }\n\n          if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || n < f) && (f = n, d(g, n) && (f /= 40)), d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? \"floor\" : \"ceil\"](j / f), l = Math[l >= 1 ? \"floor\" : \"ceil\"](l / f), m = Math[m >= 1 ? \"floor\" : \"ceil\"](m / f), k.settings.normalizeOffset && this.getBoundingClientRect) {\n            var s = this.getBoundingClientRect();\n            o = b.clientX - s.left, p = b.clientY - s.top;\n          }\n\n          return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), (a.event.dispatch || a.event.handle).apply(this, h);\n        }\n      }\n\n      function c() {\n        f = null;\n      }\n\n      function d(a, b) {\n        return k.settings.adjustOldDeltas && \"mousewheel\" === a.type && b % 120 == 0;\n      }\n\n      var e,\n          f,\n          g = [\"wheel\", \"mousewheel\", \"DOMMouseScroll\", \"MozMousePixelScroll\"],\n          h = \"onwheel\" in document || document.documentMode >= 9 ? [\"wheel\"] : [\"mousewheel\", \"DomMouseScroll\", \"MozMousePixelScroll\"],\n          i = Array.prototype.slice;\n      if (a.event.fixHooks) for (var j = g.length; j;) {\n        a.event.fixHooks[g[--j]] = a.event.mouseHooks;\n      }\n      var k = a.event.special.mousewheel = {\n        version: \"3.1.12\",\n        setup: function setup() {\n          if (this.addEventListener) for (var c = h.length; c;) {\n            this.addEventListener(h[--c], b, !1);\n          } else this.onmousewheel = b;\n          a.data(this, \"mousewheel-line-height\", k.getLineHeight(this)), a.data(this, \"mousewheel-page-height\", k.getPageHeight(this));\n        },\n        teardown: function teardown() {\n          if (this.removeEventListener) for (var c = h.length; c;) {\n            this.removeEventListener(h[--c], b, !1);\n          } else this.onmousewheel = null;\n          a.removeData(this, \"mousewheel-line-height\"), a.removeData(this, \"mousewheel-page-height\");\n        },\n        getLineHeight: function getLineHeight(b) {\n          var c = a(b),\n              d = c[\"offsetParent\" in a.fn ? \"offsetParent\" : \"parent\"]();\n          return d.length || (d = a(\"body\")), parseInt(d.css(\"fontSize\"), 10) || parseInt(c.css(\"fontSize\"), 10) || 16;\n        },\n        getPageHeight: function getPageHeight(b) {\n          return a(b).height();\n        },\n        settings: {\n          adjustOldDeltas: !0,\n          normalizeOffset: !0\n        }\n      };\n      a.fn.extend({\n        mousewheel: function mousewheel(a) {\n          return a ? this.bind(\"mousewheel\", a) : this.trigger(\"mousewheel\");\n        },\n        unmousewheel: function unmousewheel(a) {\n          return this.unbind(\"mousewheel\", a);\n        }\n      });\n    }), b.define(\"jquery.select2\", [\"jquery\", \"jquery-mousewheel\", \"./select2/core\", \"./select2/defaults\"], function (a, b, c, d) {\n      if (null == a.fn.select2) {\n        var e = [\"open\", \"close\", \"destroy\"];\n\n        a.fn.select2 = function (b) {\n          if (\"object\" == _typeof(b = b || {})) return this.each(function () {\n            var d = a.extend(!0, {}, b);\n            new c(a(this), d);\n          }), this;\n\n          if (\"string\" == typeof b) {\n            var d,\n                f = Array.prototype.slice.call(arguments, 1);\n            return this.each(function () {\n              var c = a(this).data(\"select2\");\n              null == c && window.console && console.error && console.error(\"The select2('\" + b + \"') method was called on an element that is not using Select2.\"), d = c[b].apply(c, f);\n            }), a.inArray(b, e) > -1 ? this : d;\n          }\n\n          throw new Error(\"Invalid arguments for Select2: \" + b);\n        };\n      }\n\n      return null == a.fn.select2.defaults && (a.fn.select2.defaults = d), c;\n    }), {\n      define: b.define,\n      require: b.require\n    };\n  }(),\n      c = b.require(\"jquery.select2\");\n\n  return a.fn.select2.amd = b, c;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/template/admin/assets/plugins/select2/dist/js/select2.full.min.js\n");

/***/ }),

/***/ 2:
/*!*************************************!*\
  !*** multi ./resources/js/admin.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\xampp\htdocs\backend\ShriVahan\resources\js\admin.js */"./resources/js/admin.js");


/***/ })

},[[2,"/js/manifest","/js/vendor"]]]);
